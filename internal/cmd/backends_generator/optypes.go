package main

import (
	"fmt"
	"go/ast"
	"os"
	"os/exec"
	"slices"
	"strings"
	"text/template"

	"github.com/gomlx/gomlx/internal/cmd/backends_generator/parsexlabuilder"
	"github.com/janpfeifer/must"
)

const (
	opTypesEnumFile = "gen_optypes.go"
)

var (
	// opTypeTemplate hard-code some OpTypes, and then expands with the ops read with parsexlabuilder.

	opTypesTemplate = template.Must(template.New(opTypesEnumFile).Parse(`
/***** File generated by ./internal/cmd/backends_generator, based on github.com/gomlx/gopjrt. Don't edit it directly. *****/

package backends

// OpType is an enum of all generic operations that can be supported by a Backend.Builder.
//
// Notice: nothing precludes a specialized backend Builder to support other ops not included here.
// It requires some careful casting of interfaces by the caller (presumably in package
// github.com/gomlx/gomlx/graph) and fallback to backends that don't support the specialized op.
type OpType int

const (
	OpTypeInvalid OpType = iota
	OpTypeParameter
	OpTypeConstant
	OpTypeIdentity
	OpTypeReduceWindow
	OpTypeRngBitGenerator
	OpTypeBatchNormForInference
	OpTypeBatchNormForTraining
	OpTypeBatchNormGradient
	OpTypeBitCount

{{range .}}	OpType{{.Name}}
{{end}}
	// OpTypeLast should always be kept the last, it is used as a counter/marker for OpType.
	OpTypeLast
)
`))
)

// GenerateOpTypesEnum generates OpType enum list. It is hard-coded for some, and automatically parsed (from Gopjrt) for the standard operations.
func GenerateOpTypesEnum(extractor *parsexlabuilder.NodeTextExtractor, xlaBuilderPkg *ast.Package) {
	var standardOps []FuncInfo
	parsexlabuilder.EnumerateStandardOpsFunctions(extractor, xlaBuilderPkg, func(funcDecl *ast.FuncDecl) {
		if methodsToExclude.Has(funcDecl.Name.Name) {
			return
		}
		fi := FuncInfo{
			Name: funcDecl.Name.Name,
		}
		standardOps = append(standardOps, fi)
	})
	slices.SortFunc(standardOps, func(a, b FuncInfo) int { return strings.Compare(a.Name, b.Name) })
	fileName := opTypesEnumFile
	f := must.M1(os.Create(fileName))
	must.M(opTypesTemplate.Execute(f, standardOps))

	// Format file.
	cmd := exec.Command("gofmt", "-w", fileName)
	fmt.Printf("\t%s\n", cmd)
	must.M(cmd.Run())
	fmt.Printf("\t\tgenerated %q based on github.com/gomlx/gopjrt/xlabuilder\n", fileName)

	// Generate strings for OpType names using enumer.
	cmd = exec.Command("go", "tool", "enumer", "-type=OpType", "-trimprefix=OpType", fileName)
	fmt.Printf("\t%s\n", cmd)
	must.M(cmd.Run())
	fmt.Printf("\t\tgenerated strings for OpType enum.\n")
}
