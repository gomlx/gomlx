// Code generated by "enumer -type=NodeType -trimprefix=NodeType -yaml -json -text -values gen_backend_ops.go"; DO NOT EDIT.

package graph

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _NodeTypeName = "InvalidSplitNodeAbsAddArgMinMaxBatchNormForInferenceBatchNormForTrainingBatchNormGradientBitCountBitcastBitwiseAndBitwiseNotBitwiseOrBitwiseXorBroadcastBroadcastInDimCeilClampClzComplexConcatenateConjConstantConvGeneralConvertDTypeCosDivDotDotGeneralDynamicSliceDynamicUpdateSliceEqualEqualTotalOrderErfExpExpm1FFTFloorGatherGreaterOrEqualGreaterOrEqualTotalOrderGreaterThanGreaterThanTotalOrderIdentityImagIotaIsFiniteLessOrEqualLessOrEqualTotalOrderLessThanLessThanTotalOrderLogLog1pLogicalAndLogicalNotLogicalOrLogicalXorLogisticMaxMinMulNegNotEqualNotEqualTotalOrderPadParameterPowRealReduceBitwiseAndReduceBitwiseOrReduceBitwiseXorReduceLogicalAndReduceLogicalOrReduceLogicalXorReduceMaxReduceMinReduceProductReduceSumReduceWindowRemReshapeReverseRngBitGeneratorRoundRsqrtScatterMaxScatterMinScatterSumSelectAndScatterMaxSelectAndScatterMinSelectAndScatterSumShiftLeftShiftRightArithmeticShiftRightLogicalSignSinSliceSqrtSubTanhTransposeWhere"

var _NodeTypeIndex = [...]uint16{0, 7, 16, 19, 22, 31, 52, 72, 89, 97, 104, 114, 124, 133, 143, 152, 166, 170, 175, 178, 185, 196, 200, 208, 219, 231, 234, 237, 240, 250, 262, 280, 285, 300, 303, 306, 311, 314, 319, 325, 339, 363, 374, 395, 403, 407, 411, 419, 430, 451, 459, 477, 480, 485, 495, 505, 514, 524, 532, 535, 538, 541, 544, 552, 570, 573, 582, 585, 589, 605, 620, 636, 652, 667, 683, 692, 701, 714, 723, 735, 738, 745, 752, 767, 772, 777, 787, 797, 807, 826, 845, 864, 873, 893, 910, 914, 917, 922, 926, 929, 933, 942, 947}

const _NodeTypeLowerName = "invalidsplitnodeabsaddargminmaxbatchnormforinferencebatchnormfortrainingbatchnormgradientbitcountbitcastbitwiseandbitwisenotbitwiseorbitwisexorbroadcastbroadcastindimceilclampclzcomplexconcatenateconjconstantconvgeneralconvertdtypecosdivdotdotgeneraldynamicslicedynamicupdatesliceequalequaltotalordererfexpexpm1fftfloorgathergreaterorequalgreaterorequaltotalordergreaterthangreaterthantotalorderidentityimagiotaisfinitelessorequallessorequaltotalorderlessthanlessthantotalorderloglog1plogicalandlogicalnotlogicalorlogicalxorlogisticmaxminmulnegnotequalnotequaltotalorderpadparameterpowrealreducebitwiseandreducebitwiseorreducebitwisexorreducelogicalandreducelogicalorreducelogicalxorreducemaxreduceminreduceproductreducesumreducewindowremreshapereverserngbitgeneratorroundrsqrtscattermaxscatterminscattersumselectandscattermaxselectandscatterminselectandscattersumshiftleftshiftrightarithmeticshiftrightlogicalsignsinslicesqrtsubtanhtransposewhere"

func (i NodeType) String() string {
	if i < 0 || i >= NodeType(len(_NodeTypeIndex)-1) {
		return fmt.Sprintf("NodeType(%d)", i)
	}
	return _NodeTypeName[_NodeTypeIndex[i]:_NodeTypeIndex[i+1]]
}

func (NodeType) Values() []string {
	return NodeTypeStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _NodeTypeNoOp() {
	var x [1]struct{}
	_ = x[NodeTypeInvalid-(0)]
	_ = x[NodeTypeSplitNode-(1)]
	_ = x[NodeTypeAbs-(2)]
	_ = x[NodeTypeAdd-(3)]
	_ = x[NodeTypeArgMinMax-(4)]
	_ = x[NodeTypeBatchNormForInference-(5)]
	_ = x[NodeTypeBatchNormForTraining-(6)]
	_ = x[NodeTypeBatchNormGradient-(7)]
	_ = x[NodeTypeBitCount-(8)]
	_ = x[NodeTypeBitcast-(9)]
	_ = x[NodeTypeBitwiseAnd-(10)]
	_ = x[NodeTypeBitwiseNot-(11)]
	_ = x[NodeTypeBitwiseOr-(12)]
	_ = x[NodeTypeBitwiseXor-(13)]
	_ = x[NodeTypeBroadcast-(14)]
	_ = x[NodeTypeBroadcastInDim-(15)]
	_ = x[NodeTypeCeil-(16)]
	_ = x[NodeTypeClamp-(17)]
	_ = x[NodeTypeClz-(18)]
	_ = x[NodeTypeComplex-(19)]
	_ = x[NodeTypeConcatenate-(20)]
	_ = x[NodeTypeConj-(21)]
	_ = x[NodeTypeConstant-(22)]
	_ = x[NodeTypeConvGeneral-(23)]
	_ = x[NodeTypeConvertDType-(24)]
	_ = x[NodeTypeCos-(25)]
	_ = x[NodeTypeDiv-(26)]
	_ = x[NodeTypeDot-(27)]
	_ = x[NodeTypeDotGeneral-(28)]
	_ = x[NodeTypeDynamicSlice-(29)]
	_ = x[NodeTypeDynamicUpdateSlice-(30)]
	_ = x[NodeTypeEqual-(31)]
	_ = x[NodeTypeEqualTotalOrder-(32)]
	_ = x[NodeTypeErf-(33)]
	_ = x[NodeTypeExp-(34)]
	_ = x[NodeTypeExpm1-(35)]
	_ = x[NodeTypeFFT-(36)]
	_ = x[NodeTypeFloor-(37)]
	_ = x[NodeTypeGather-(38)]
	_ = x[NodeTypeGreaterOrEqual-(39)]
	_ = x[NodeTypeGreaterOrEqualTotalOrder-(40)]
	_ = x[NodeTypeGreaterThan-(41)]
	_ = x[NodeTypeGreaterThanTotalOrder-(42)]
	_ = x[NodeTypeIdentity-(43)]
	_ = x[NodeTypeImag-(44)]
	_ = x[NodeTypeIota-(45)]
	_ = x[NodeTypeIsFinite-(46)]
	_ = x[NodeTypeLessOrEqual-(47)]
	_ = x[NodeTypeLessOrEqualTotalOrder-(48)]
	_ = x[NodeTypeLessThan-(49)]
	_ = x[NodeTypeLessThanTotalOrder-(50)]
	_ = x[NodeTypeLog-(51)]
	_ = x[NodeTypeLog1p-(52)]
	_ = x[NodeTypeLogicalAnd-(53)]
	_ = x[NodeTypeLogicalNot-(54)]
	_ = x[NodeTypeLogicalOr-(55)]
	_ = x[NodeTypeLogicalXor-(56)]
	_ = x[NodeTypeLogistic-(57)]
	_ = x[NodeTypeMax-(58)]
	_ = x[NodeTypeMin-(59)]
	_ = x[NodeTypeMul-(60)]
	_ = x[NodeTypeNeg-(61)]
	_ = x[NodeTypeNotEqual-(62)]
	_ = x[NodeTypeNotEqualTotalOrder-(63)]
	_ = x[NodeTypePad-(64)]
	_ = x[NodeTypeParameter-(65)]
	_ = x[NodeTypePow-(66)]
	_ = x[NodeTypeReal-(67)]
	_ = x[NodeTypeReduceBitwiseAnd-(68)]
	_ = x[NodeTypeReduceBitwiseOr-(69)]
	_ = x[NodeTypeReduceBitwiseXor-(70)]
	_ = x[NodeTypeReduceLogicalAnd-(71)]
	_ = x[NodeTypeReduceLogicalOr-(72)]
	_ = x[NodeTypeReduceLogicalXor-(73)]
	_ = x[NodeTypeReduceMax-(74)]
	_ = x[NodeTypeReduceMin-(75)]
	_ = x[NodeTypeReduceProduct-(76)]
	_ = x[NodeTypeReduceSum-(77)]
	_ = x[NodeTypeReduceWindow-(78)]
	_ = x[NodeTypeRem-(79)]
	_ = x[NodeTypeReshape-(80)]
	_ = x[NodeTypeReverse-(81)]
	_ = x[NodeTypeRngBitGenerator-(82)]
	_ = x[NodeTypeRound-(83)]
	_ = x[NodeTypeRsqrt-(84)]
	_ = x[NodeTypeScatterMax-(85)]
	_ = x[NodeTypeScatterMin-(86)]
	_ = x[NodeTypeScatterSum-(87)]
	_ = x[NodeTypeSelectAndScatterMax-(88)]
	_ = x[NodeTypeSelectAndScatterMin-(89)]
	_ = x[NodeTypeSelectAndScatterSum-(90)]
	_ = x[NodeTypeShiftLeft-(91)]
	_ = x[NodeTypeShiftRightArithmetic-(92)]
	_ = x[NodeTypeShiftRightLogical-(93)]
	_ = x[NodeTypeSign-(94)]
	_ = x[NodeTypeSin-(95)]
	_ = x[NodeTypeSlice-(96)]
	_ = x[NodeTypeSqrt-(97)]
	_ = x[NodeTypeSub-(98)]
	_ = x[NodeTypeTanh-(99)]
	_ = x[NodeTypeTranspose-(100)]
	_ = x[NodeTypeWhere-(101)]
}

var _NodeTypeValues = []NodeType{NodeTypeInvalid, NodeTypeSplitNode, NodeTypeAbs, NodeTypeAdd, NodeTypeArgMinMax, NodeTypeBatchNormForInference, NodeTypeBatchNormForTraining, NodeTypeBatchNormGradient, NodeTypeBitCount, NodeTypeBitcast, NodeTypeBitwiseAnd, NodeTypeBitwiseNot, NodeTypeBitwiseOr, NodeTypeBitwiseXor, NodeTypeBroadcast, NodeTypeBroadcastInDim, NodeTypeCeil, NodeTypeClamp, NodeTypeClz, NodeTypeComplex, NodeTypeConcatenate, NodeTypeConj, NodeTypeConstant, NodeTypeConvGeneral, NodeTypeConvertDType, NodeTypeCos, NodeTypeDiv, NodeTypeDot, NodeTypeDotGeneral, NodeTypeDynamicSlice, NodeTypeDynamicUpdateSlice, NodeTypeEqual, NodeTypeEqualTotalOrder, NodeTypeErf, NodeTypeExp, NodeTypeExpm1, NodeTypeFFT, NodeTypeFloor, NodeTypeGather, NodeTypeGreaterOrEqual, NodeTypeGreaterOrEqualTotalOrder, NodeTypeGreaterThan, NodeTypeGreaterThanTotalOrder, NodeTypeIdentity, NodeTypeImag, NodeTypeIota, NodeTypeIsFinite, NodeTypeLessOrEqual, NodeTypeLessOrEqualTotalOrder, NodeTypeLessThan, NodeTypeLessThanTotalOrder, NodeTypeLog, NodeTypeLog1p, NodeTypeLogicalAnd, NodeTypeLogicalNot, NodeTypeLogicalOr, NodeTypeLogicalXor, NodeTypeLogistic, NodeTypeMax, NodeTypeMin, NodeTypeMul, NodeTypeNeg, NodeTypeNotEqual, NodeTypeNotEqualTotalOrder, NodeTypePad, NodeTypeParameter, NodeTypePow, NodeTypeReal, NodeTypeReduceBitwiseAnd, NodeTypeReduceBitwiseOr, NodeTypeReduceBitwiseXor, NodeTypeReduceLogicalAnd, NodeTypeReduceLogicalOr, NodeTypeReduceLogicalXor, NodeTypeReduceMax, NodeTypeReduceMin, NodeTypeReduceProduct, NodeTypeReduceSum, NodeTypeReduceWindow, NodeTypeRem, NodeTypeReshape, NodeTypeReverse, NodeTypeRngBitGenerator, NodeTypeRound, NodeTypeRsqrt, NodeTypeScatterMax, NodeTypeScatterMin, NodeTypeScatterSum, NodeTypeSelectAndScatterMax, NodeTypeSelectAndScatterMin, NodeTypeSelectAndScatterSum, NodeTypeShiftLeft, NodeTypeShiftRightArithmetic, NodeTypeShiftRightLogical, NodeTypeSign, NodeTypeSin, NodeTypeSlice, NodeTypeSqrt, NodeTypeSub, NodeTypeTanh, NodeTypeTranspose, NodeTypeWhere}

var _NodeTypeNameToValueMap = map[string]NodeType{
	_NodeTypeName[0:7]:          NodeTypeInvalid,
	_NodeTypeLowerName[0:7]:     NodeTypeInvalid,
	_NodeTypeName[7:16]:         NodeTypeSplitNode,
	_NodeTypeLowerName[7:16]:    NodeTypeSplitNode,
	_NodeTypeName[16:19]:        NodeTypeAbs,
	_NodeTypeLowerName[16:19]:   NodeTypeAbs,
	_NodeTypeName[19:22]:        NodeTypeAdd,
	_NodeTypeLowerName[19:22]:   NodeTypeAdd,
	_NodeTypeName[22:31]:        NodeTypeArgMinMax,
	_NodeTypeLowerName[22:31]:   NodeTypeArgMinMax,
	_NodeTypeName[31:52]:        NodeTypeBatchNormForInference,
	_NodeTypeLowerName[31:52]:   NodeTypeBatchNormForInference,
	_NodeTypeName[52:72]:        NodeTypeBatchNormForTraining,
	_NodeTypeLowerName[52:72]:   NodeTypeBatchNormForTraining,
	_NodeTypeName[72:89]:        NodeTypeBatchNormGradient,
	_NodeTypeLowerName[72:89]:   NodeTypeBatchNormGradient,
	_NodeTypeName[89:97]:        NodeTypeBitCount,
	_NodeTypeLowerName[89:97]:   NodeTypeBitCount,
	_NodeTypeName[97:104]:       NodeTypeBitcast,
	_NodeTypeLowerName[97:104]:  NodeTypeBitcast,
	_NodeTypeName[104:114]:      NodeTypeBitwiseAnd,
	_NodeTypeLowerName[104:114]: NodeTypeBitwiseAnd,
	_NodeTypeName[114:124]:      NodeTypeBitwiseNot,
	_NodeTypeLowerName[114:124]: NodeTypeBitwiseNot,
	_NodeTypeName[124:133]:      NodeTypeBitwiseOr,
	_NodeTypeLowerName[124:133]: NodeTypeBitwiseOr,
	_NodeTypeName[133:143]:      NodeTypeBitwiseXor,
	_NodeTypeLowerName[133:143]: NodeTypeBitwiseXor,
	_NodeTypeName[143:152]:      NodeTypeBroadcast,
	_NodeTypeLowerName[143:152]: NodeTypeBroadcast,
	_NodeTypeName[152:166]:      NodeTypeBroadcastInDim,
	_NodeTypeLowerName[152:166]: NodeTypeBroadcastInDim,
	_NodeTypeName[166:170]:      NodeTypeCeil,
	_NodeTypeLowerName[166:170]: NodeTypeCeil,
	_NodeTypeName[170:175]:      NodeTypeClamp,
	_NodeTypeLowerName[170:175]: NodeTypeClamp,
	_NodeTypeName[175:178]:      NodeTypeClz,
	_NodeTypeLowerName[175:178]: NodeTypeClz,
	_NodeTypeName[178:185]:      NodeTypeComplex,
	_NodeTypeLowerName[178:185]: NodeTypeComplex,
	_NodeTypeName[185:196]:      NodeTypeConcatenate,
	_NodeTypeLowerName[185:196]: NodeTypeConcatenate,
	_NodeTypeName[196:200]:      NodeTypeConj,
	_NodeTypeLowerName[196:200]: NodeTypeConj,
	_NodeTypeName[200:208]:      NodeTypeConstant,
	_NodeTypeLowerName[200:208]: NodeTypeConstant,
	_NodeTypeName[208:219]:      NodeTypeConvGeneral,
	_NodeTypeLowerName[208:219]: NodeTypeConvGeneral,
	_NodeTypeName[219:231]:      NodeTypeConvertDType,
	_NodeTypeLowerName[219:231]: NodeTypeConvertDType,
	_NodeTypeName[231:234]:      NodeTypeCos,
	_NodeTypeLowerName[231:234]: NodeTypeCos,
	_NodeTypeName[234:237]:      NodeTypeDiv,
	_NodeTypeLowerName[234:237]: NodeTypeDiv,
	_NodeTypeName[237:240]:      NodeTypeDot,
	_NodeTypeLowerName[237:240]: NodeTypeDot,
	_NodeTypeName[240:250]:      NodeTypeDotGeneral,
	_NodeTypeLowerName[240:250]: NodeTypeDotGeneral,
	_NodeTypeName[250:262]:      NodeTypeDynamicSlice,
	_NodeTypeLowerName[250:262]: NodeTypeDynamicSlice,
	_NodeTypeName[262:280]:      NodeTypeDynamicUpdateSlice,
	_NodeTypeLowerName[262:280]: NodeTypeDynamicUpdateSlice,
	_NodeTypeName[280:285]:      NodeTypeEqual,
	_NodeTypeLowerName[280:285]: NodeTypeEqual,
	_NodeTypeName[285:300]:      NodeTypeEqualTotalOrder,
	_NodeTypeLowerName[285:300]: NodeTypeEqualTotalOrder,
	_NodeTypeName[300:303]:      NodeTypeErf,
	_NodeTypeLowerName[300:303]: NodeTypeErf,
	_NodeTypeName[303:306]:      NodeTypeExp,
	_NodeTypeLowerName[303:306]: NodeTypeExp,
	_NodeTypeName[306:311]:      NodeTypeExpm1,
	_NodeTypeLowerName[306:311]: NodeTypeExpm1,
	_NodeTypeName[311:314]:      NodeTypeFFT,
	_NodeTypeLowerName[311:314]: NodeTypeFFT,
	_NodeTypeName[314:319]:      NodeTypeFloor,
	_NodeTypeLowerName[314:319]: NodeTypeFloor,
	_NodeTypeName[319:325]:      NodeTypeGather,
	_NodeTypeLowerName[319:325]: NodeTypeGather,
	_NodeTypeName[325:339]:      NodeTypeGreaterOrEqual,
	_NodeTypeLowerName[325:339]: NodeTypeGreaterOrEqual,
	_NodeTypeName[339:363]:      NodeTypeGreaterOrEqualTotalOrder,
	_NodeTypeLowerName[339:363]: NodeTypeGreaterOrEqualTotalOrder,
	_NodeTypeName[363:374]:      NodeTypeGreaterThan,
	_NodeTypeLowerName[363:374]: NodeTypeGreaterThan,
	_NodeTypeName[374:395]:      NodeTypeGreaterThanTotalOrder,
	_NodeTypeLowerName[374:395]: NodeTypeGreaterThanTotalOrder,
	_NodeTypeName[395:403]:      NodeTypeIdentity,
	_NodeTypeLowerName[395:403]: NodeTypeIdentity,
	_NodeTypeName[403:407]:      NodeTypeImag,
	_NodeTypeLowerName[403:407]: NodeTypeImag,
	_NodeTypeName[407:411]:      NodeTypeIota,
	_NodeTypeLowerName[407:411]: NodeTypeIota,
	_NodeTypeName[411:419]:      NodeTypeIsFinite,
	_NodeTypeLowerName[411:419]: NodeTypeIsFinite,
	_NodeTypeName[419:430]:      NodeTypeLessOrEqual,
	_NodeTypeLowerName[419:430]: NodeTypeLessOrEqual,
	_NodeTypeName[430:451]:      NodeTypeLessOrEqualTotalOrder,
	_NodeTypeLowerName[430:451]: NodeTypeLessOrEqualTotalOrder,
	_NodeTypeName[451:459]:      NodeTypeLessThan,
	_NodeTypeLowerName[451:459]: NodeTypeLessThan,
	_NodeTypeName[459:477]:      NodeTypeLessThanTotalOrder,
	_NodeTypeLowerName[459:477]: NodeTypeLessThanTotalOrder,
	_NodeTypeName[477:480]:      NodeTypeLog,
	_NodeTypeLowerName[477:480]: NodeTypeLog,
	_NodeTypeName[480:485]:      NodeTypeLog1p,
	_NodeTypeLowerName[480:485]: NodeTypeLog1p,
	_NodeTypeName[485:495]:      NodeTypeLogicalAnd,
	_NodeTypeLowerName[485:495]: NodeTypeLogicalAnd,
	_NodeTypeName[495:505]:      NodeTypeLogicalNot,
	_NodeTypeLowerName[495:505]: NodeTypeLogicalNot,
	_NodeTypeName[505:514]:      NodeTypeLogicalOr,
	_NodeTypeLowerName[505:514]: NodeTypeLogicalOr,
	_NodeTypeName[514:524]:      NodeTypeLogicalXor,
	_NodeTypeLowerName[514:524]: NodeTypeLogicalXor,
	_NodeTypeName[524:532]:      NodeTypeLogistic,
	_NodeTypeLowerName[524:532]: NodeTypeLogistic,
	_NodeTypeName[532:535]:      NodeTypeMax,
	_NodeTypeLowerName[532:535]: NodeTypeMax,
	_NodeTypeName[535:538]:      NodeTypeMin,
	_NodeTypeLowerName[535:538]: NodeTypeMin,
	_NodeTypeName[538:541]:      NodeTypeMul,
	_NodeTypeLowerName[538:541]: NodeTypeMul,
	_NodeTypeName[541:544]:      NodeTypeNeg,
	_NodeTypeLowerName[541:544]: NodeTypeNeg,
	_NodeTypeName[544:552]:      NodeTypeNotEqual,
	_NodeTypeLowerName[544:552]: NodeTypeNotEqual,
	_NodeTypeName[552:570]:      NodeTypeNotEqualTotalOrder,
	_NodeTypeLowerName[552:570]: NodeTypeNotEqualTotalOrder,
	_NodeTypeName[570:573]:      NodeTypePad,
	_NodeTypeLowerName[570:573]: NodeTypePad,
	_NodeTypeName[573:582]:      NodeTypeParameter,
	_NodeTypeLowerName[573:582]: NodeTypeParameter,
	_NodeTypeName[582:585]:      NodeTypePow,
	_NodeTypeLowerName[582:585]: NodeTypePow,
	_NodeTypeName[585:589]:      NodeTypeReal,
	_NodeTypeLowerName[585:589]: NodeTypeReal,
	_NodeTypeName[589:605]:      NodeTypeReduceBitwiseAnd,
	_NodeTypeLowerName[589:605]: NodeTypeReduceBitwiseAnd,
	_NodeTypeName[605:620]:      NodeTypeReduceBitwiseOr,
	_NodeTypeLowerName[605:620]: NodeTypeReduceBitwiseOr,
	_NodeTypeName[620:636]:      NodeTypeReduceBitwiseXor,
	_NodeTypeLowerName[620:636]: NodeTypeReduceBitwiseXor,
	_NodeTypeName[636:652]:      NodeTypeReduceLogicalAnd,
	_NodeTypeLowerName[636:652]: NodeTypeReduceLogicalAnd,
	_NodeTypeName[652:667]:      NodeTypeReduceLogicalOr,
	_NodeTypeLowerName[652:667]: NodeTypeReduceLogicalOr,
	_NodeTypeName[667:683]:      NodeTypeReduceLogicalXor,
	_NodeTypeLowerName[667:683]: NodeTypeReduceLogicalXor,
	_NodeTypeName[683:692]:      NodeTypeReduceMax,
	_NodeTypeLowerName[683:692]: NodeTypeReduceMax,
	_NodeTypeName[692:701]:      NodeTypeReduceMin,
	_NodeTypeLowerName[692:701]: NodeTypeReduceMin,
	_NodeTypeName[701:714]:      NodeTypeReduceProduct,
	_NodeTypeLowerName[701:714]: NodeTypeReduceProduct,
	_NodeTypeName[714:723]:      NodeTypeReduceSum,
	_NodeTypeLowerName[714:723]: NodeTypeReduceSum,
	_NodeTypeName[723:735]:      NodeTypeReduceWindow,
	_NodeTypeLowerName[723:735]: NodeTypeReduceWindow,
	_NodeTypeName[735:738]:      NodeTypeRem,
	_NodeTypeLowerName[735:738]: NodeTypeRem,
	_NodeTypeName[738:745]:      NodeTypeReshape,
	_NodeTypeLowerName[738:745]: NodeTypeReshape,
	_NodeTypeName[745:752]:      NodeTypeReverse,
	_NodeTypeLowerName[745:752]: NodeTypeReverse,
	_NodeTypeName[752:767]:      NodeTypeRngBitGenerator,
	_NodeTypeLowerName[752:767]: NodeTypeRngBitGenerator,
	_NodeTypeName[767:772]:      NodeTypeRound,
	_NodeTypeLowerName[767:772]: NodeTypeRound,
	_NodeTypeName[772:777]:      NodeTypeRsqrt,
	_NodeTypeLowerName[772:777]: NodeTypeRsqrt,
	_NodeTypeName[777:787]:      NodeTypeScatterMax,
	_NodeTypeLowerName[777:787]: NodeTypeScatterMax,
	_NodeTypeName[787:797]:      NodeTypeScatterMin,
	_NodeTypeLowerName[787:797]: NodeTypeScatterMin,
	_NodeTypeName[797:807]:      NodeTypeScatterSum,
	_NodeTypeLowerName[797:807]: NodeTypeScatterSum,
	_NodeTypeName[807:826]:      NodeTypeSelectAndScatterMax,
	_NodeTypeLowerName[807:826]: NodeTypeSelectAndScatterMax,
	_NodeTypeName[826:845]:      NodeTypeSelectAndScatterMin,
	_NodeTypeLowerName[826:845]: NodeTypeSelectAndScatterMin,
	_NodeTypeName[845:864]:      NodeTypeSelectAndScatterSum,
	_NodeTypeLowerName[845:864]: NodeTypeSelectAndScatterSum,
	_NodeTypeName[864:873]:      NodeTypeShiftLeft,
	_NodeTypeLowerName[864:873]: NodeTypeShiftLeft,
	_NodeTypeName[873:893]:      NodeTypeShiftRightArithmetic,
	_NodeTypeLowerName[873:893]: NodeTypeShiftRightArithmetic,
	_NodeTypeName[893:910]:      NodeTypeShiftRightLogical,
	_NodeTypeLowerName[893:910]: NodeTypeShiftRightLogical,
	_NodeTypeName[910:914]:      NodeTypeSign,
	_NodeTypeLowerName[910:914]: NodeTypeSign,
	_NodeTypeName[914:917]:      NodeTypeSin,
	_NodeTypeLowerName[914:917]: NodeTypeSin,
	_NodeTypeName[917:922]:      NodeTypeSlice,
	_NodeTypeLowerName[917:922]: NodeTypeSlice,
	_NodeTypeName[922:926]:      NodeTypeSqrt,
	_NodeTypeLowerName[922:926]: NodeTypeSqrt,
	_NodeTypeName[926:929]:      NodeTypeSub,
	_NodeTypeLowerName[926:929]: NodeTypeSub,
	_NodeTypeName[929:933]:      NodeTypeTanh,
	_NodeTypeLowerName[929:933]: NodeTypeTanh,
	_NodeTypeName[933:942]:      NodeTypeTranspose,
	_NodeTypeLowerName[933:942]: NodeTypeTranspose,
	_NodeTypeName[942:947]:      NodeTypeWhere,
	_NodeTypeLowerName[942:947]: NodeTypeWhere,
}

var _NodeTypeNames = []string{
	_NodeTypeName[0:7],
	_NodeTypeName[7:16],
	_NodeTypeName[16:19],
	_NodeTypeName[19:22],
	_NodeTypeName[22:31],
	_NodeTypeName[31:52],
	_NodeTypeName[52:72],
	_NodeTypeName[72:89],
	_NodeTypeName[89:97],
	_NodeTypeName[97:104],
	_NodeTypeName[104:114],
	_NodeTypeName[114:124],
	_NodeTypeName[124:133],
	_NodeTypeName[133:143],
	_NodeTypeName[143:152],
	_NodeTypeName[152:166],
	_NodeTypeName[166:170],
	_NodeTypeName[170:175],
	_NodeTypeName[175:178],
	_NodeTypeName[178:185],
	_NodeTypeName[185:196],
	_NodeTypeName[196:200],
	_NodeTypeName[200:208],
	_NodeTypeName[208:219],
	_NodeTypeName[219:231],
	_NodeTypeName[231:234],
	_NodeTypeName[234:237],
	_NodeTypeName[237:240],
	_NodeTypeName[240:250],
	_NodeTypeName[250:262],
	_NodeTypeName[262:280],
	_NodeTypeName[280:285],
	_NodeTypeName[285:300],
	_NodeTypeName[300:303],
	_NodeTypeName[303:306],
	_NodeTypeName[306:311],
	_NodeTypeName[311:314],
	_NodeTypeName[314:319],
	_NodeTypeName[319:325],
	_NodeTypeName[325:339],
	_NodeTypeName[339:363],
	_NodeTypeName[363:374],
	_NodeTypeName[374:395],
	_NodeTypeName[395:403],
	_NodeTypeName[403:407],
	_NodeTypeName[407:411],
	_NodeTypeName[411:419],
	_NodeTypeName[419:430],
	_NodeTypeName[430:451],
	_NodeTypeName[451:459],
	_NodeTypeName[459:477],
	_NodeTypeName[477:480],
	_NodeTypeName[480:485],
	_NodeTypeName[485:495],
	_NodeTypeName[495:505],
	_NodeTypeName[505:514],
	_NodeTypeName[514:524],
	_NodeTypeName[524:532],
	_NodeTypeName[532:535],
	_NodeTypeName[535:538],
	_NodeTypeName[538:541],
	_NodeTypeName[541:544],
	_NodeTypeName[544:552],
	_NodeTypeName[552:570],
	_NodeTypeName[570:573],
	_NodeTypeName[573:582],
	_NodeTypeName[582:585],
	_NodeTypeName[585:589],
	_NodeTypeName[589:605],
	_NodeTypeName[605:620],
	_NodeTypeName[620:636],
	_NodeTypeName[636:652],
	_NodeTypeName[652:667],
	_NodeTypeName[667:683],
	_NodeTypeName[683:692],
	_NodeTypeName[692:701],
	_NodeTypeName[701:714],
	_NodeTypeName[714:723],
	_NodeTypeName[723:735],
	_NodeTypeName[735:738],
	_NodeTypeName[738:745],
	_NodeTypeName[745:752],
	_NodeTypeName[752:767],
	_NodeTypeName[767:772],
	_NodeTypeName[772:777],
	_NodeTypeName[777:787],
	_NodeTypeName[787:797],
	_NodeTypeName[797:807],
	_NodeTypeName[807:826],
	_NodeTypeName[826:845],
	_NodeTypeName[845:864],
	_NodeTypeName[864:873],
	_NodeTypeName[873:893],
	_NodeTypeName[893:910],
	_NodeTypeName[910:914],
	_NodeTypeName[914:917],
	_NodeTypeName[917:922],
	_NodeTypeName[922:926],
	_NodeTypeName[926:929],
	_NodeTypeName[929:933],
	_NodeTypeName[933:942],
	_NodeTypeName[942:947],
}

// NodeTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func NodeTypeString(s string) (NodeType, error) {
	if val, ok := _NodeTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _NodeTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to NodeType values", s)
}

// NodeTypeValues returns all values of the enum
func NodeTypeValues() []NodeType {
	return _NodeTypeValues
}

// NodeTypeStrings returns a slice of all String values of the enum
func NodeTypeStrings() []string {
	strs := make([]string, len(_NodeTypeNames))
	copy(strs, _NodeTypeNames)
	return strs
}

// IsANodeType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i NodeType) IsANodeType() bool {
	for _, v := range _NodeTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for NodeType
func (i NodeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for NodeType
func (i *NodeType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("NodeType should be a string, got %s", data)
	}

	var err error
	*i, err = NodeTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for NodeType
func (i NodeType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for NodeType
func (i *NodeType) UnmarshalText(text []byte) error {
	var err error
	*i, err = NodeTypeString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for NodeType
func (i NodeType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for NodeType
func (i *NodeType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = NodeTypeString(s)
	return err
}
