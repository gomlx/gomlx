// Code generated by "enumer -type=NodeType -trimprefix=NodeType -yaml -json -text -values /home/janpf/Projects/gomlx/graph/gen_backend_ops.go"; DO NOT EDIT.

package graph

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _NodeTypeName = "InvalidSplitNodeAbsAddArgMinMaxBatchNormForInferenceBatchNormForTrainingBatchNormGradientBitCountBitcastBitwiseAndBitwiseNotBitwiseOrBitwiseXorBroadcastBroadcastInDimCeilClampClzComplexConcatenateConjConstantConvGeneralConvertDTypeCosDivDotDotGeneralDynamicSliceDynamicUpdateSliceEqualEqualTotalOrderErfExpExpm1FFTFloorGatherGreaterOrEqualGreaterOrEqualTotalOrderGreaterThanGreaterThanTotalOrderIdentityImagIotaIsFiniteIsNaNLessOrEqualLessOrEqualTotalOrderLessThanLessThanTotalOrderLogLog1pLogicalAndLogicalNotLogicalOrLogicalXorLogisticMaxMinMulNegNotEqualNotEqualTotalOrderPadParameterPowRealReduceBitwiseAndReduceBitwiseOrReduceBitwiseXorReduceLogicalAndReduceLogicalOrReduceLogicalXorReduceMaxReduceMinReduceProductReduceSumReduceWindowRemReshapeReverseRngBitGeneratorRoundRsqrtScatterMaxScatterMinScatterSumSelectAndScatterMaxSelectAndScatterMinShiftLeftShiftRightArithmeticShiftRightLogicalSignSinSliceSqrtSubTanhTransposeWhere"

var _NodeTypeIndex = [...]uint16{0, 7, 16, 19, 22, 31, 52, 72, 89, 97, 104, 114, 124, 133, 143, 152, 166, 170, 175, 178, 185, 196, 200, 208, 219, 231, 234, 237, 240, 250, 262, 280, 285, 300, 303, 306, 311, 314, 319, 325, 339, 363, 374, 395, 403, 407, 411, 419, 424, 435, 456, 464, 482, 485, 490, 500, 510, 519, 529, 537, 540, 543, 546, 549, 557, 575, 578, 587, 590, 594, 610, 625, 641, 657, 672, 688, 697, 706, 719, 728, 740, 743, 750, 757, 772, 777, 782, 792, 802, 812, 831, 850, 859, 879, 896, 900, 903, 908, 912, 915, 919, 928, 933}

const _NodeTypeLowerName = "invalidsplitnodeabsaddargminmaxbatchnormforinferencebatchnormfortrainingbatchnormgradientbitcountbitcastbitwiseandbitwisenotbitwiseorbitwisexorbroadcastbroadcastindimceilclampclzcomplexconcatenateconjconstantconvgeneralconvertdtypecosdivdotdotgeneraldynamicslicedynamicupdatesliceequalequaltotalordererfexpexpm1fftfloorgathergreaterorequalgreaterorequaltotalordergreaterthangreaterthantotalorderidentityimagiotaisfiniteisnanlessorequallessorequaltotalorderlessthanlessthantotalorderloglog1plogicalandlogicalnotlogicalorlogicalxorlogisticmaxminmulnegnotequalnotequaltotalorderpadparameterpowrealreducebitwiseandreducebitwiseorreducebitwisexorreducelogicalandreducelogicalorreducelogicalxorreducemaxreduceminreduceproductreducesumreducewindowremreshapereverserngbitgeneratorroundrsqrtscattermaxscatterminscattersumselectandscattermaxselectandscatterminshiftleftshiftrightarithmeticshiftrightlogicalsignsinslicesqrtsubtanhtransposewhere"

func (i NodeType) String() string {
	if i < 0 || i >= NodeType(len(_NodeTypeIndex)-1) {
		return fmt.Sprintf("NodeType(%d)", i)
	}
	return _NodeTypeName[_NodeTypeIndex[i]:_NodeTypeIndex[i+1]]
}

func (NodeType) Values() []string {
	return NodeTypeStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _NodeTypeNoOp() {
	var x [1]struct{}
	_ = x[NodeTypeInvalid-(0)]
	_ = x[NodeTypeSplitNode-(1)]
	_ = x[NodeTypeAbs-(2)]
	_ = x[NodeTypeAdd-(3)]
	_ = x[NodeTypeArgMinMax-(4)]
	_ = x[NodeTypeBatchNormForInference-(5)]
	_ = x[NodeTypeBatchNormForTraining-(6)]
	_ = x[NodeTypeBatchNormGradient-(7)]
	_ = x[NodeTypeBitCount-(8)]
	_ = x[NodeTypeBitcast-(9)]
	_ = x[NodeTypeBitwiseAnd-(10)]
	_ = x[NodeTypeBitwiseNot-(11)]
	_ = x[NodeTypeBitwiseOr-(12)]
	_ = x[NodeTypeBitwiseXor-(13)]
	_ = x[NodeTypeBroadcast-(14)]
	_ = x[NodeTypeBroadcastInDim-(15)]
	_ = x[NodeTypeCeil-(16)]
	_ = x[NodeTypeClamp-(17)]
	_ = x[NodeTypeClz-(18)]
	_ = x[NodeTypeComplex-(19)]
	_ = x[NodeTypeConcatenate-(20)]
	_ = x[NodeTypeConj-(21)]
	_ = x[NodeTypeConstant-(22)]
	_ = x[NodeTypeConvGeneral-(23)]
	_ = x[NodeTypeConvertDType-(24)]
	_ = x[NodeTypeCos-(25)]
	_ = x[NodeTypeDiv-(26)]
	_ = x[NodeTypeDot-(27)]
	_ = x[NodeTypeDotGeneral-(28)]
	_ = x[NodeTypeDynamicSlice-(29)]
	_ = x[NodeTypeDynamicUpdateSlice-(30)]
	_ = x[NodeTypeEqual-(31)]
	_ = x[NodeTypeEqualTotalOrder-(32)]
	_ = x[NodeTypeErf-(33)]
	_ = x[NodeTypeExp-(34)]
	_ = x[NodeTypeExpm1-(35)]
	_ = x[NodeTypeFFT-(36)]
	_ = x[NodeTypeFloor-(37)]
	_ = x[NodeTypeGather-(38)]
	_ = x[NodeTypeGreaterOrEqual-(39)]
	_ = x[NodeTypeGreaterOrEqualTotalOrder-(40)]
	_ = x[NodeTypeGreaterThan-(41)]
	_ = x[NodeTypeGreaterThanTotalOrder-(42)]
	_ = x[NodeTypeIdentity-(43)]
	_ = x[NodeTypeImag-(44)]
	_ = x[NodeTypeIota-(45)]
	_ = x[NodeTypeIsFinite-(46)]
	_ = x[NodeTypeIsNaN-(47)]
	_ = x[NodeTypeLessOrEqual-(48)]
	_ = x[NodeTypeLessOrEqualTotalOrder-(49)]
	_ = x[NodeTypeLessThan-(50)]
	_ = x[NodeTypeLessThanTotalOrder-(51)]
	_ = x[NodeTypeLog-(52)]
	_ = x[NodeTypeLog1p-(53)]
	_ = x[NodeTypeLogicalAnd-(54)]
	_ = x[NodeTypeLogicalNot-(55)]
	_ = x[NodeTypeLogicalOr-(56)]
	_ = x[NodeTypeLogicalXor-(57)]
	_ = x[NodeTypeLogistic-(58)]
	_ = x[NodeTypeMax-(59)]
	_ = x[NodeTypeMin-(60)]
	_ = x[NodeTypeMul-(61)]
	_ = x[NodeTypeNeg-(62)]
	_ = x[NodeTypeNotEqual-(63)]
	_ = x[NodeTypeNotEqualTotalOrder-(64)]
	_ = x[NodeTypePad-(65)]
	_ = x[NodeTypeParameter-(66)]
	_ = x[NodeTypePow-(67)]
	_ = x[NodeTypeReal-(68)]
	_ = x[NodeTypeReduceBitwiseAnd-(69)]
	_ = x[NodeTypeReduceBitwiseOr-(70)]
	_ = x[NodeTypeReduceBitwiseXor-(71)]
	_ = x[NodeTypeReduceLogicalAnd-(72)]
	_ = x[NodeTypeReduceLogicalOr-(73)]
	_ = x[NodeTypeReduceLogicalXor-(74)]
	_ = x[NodeTypeReduceMax-(75)]
	_ = x[NodeTypeReduceMin-(76)]
	_ = x[NodeTypeReduceProduct-(77)]
	_ = x[NodeTypeReduceSum-(78)]
	_ = x[NodeTypeReduceWindow-(79)]
	_ = x[NodeTypeRem-(80)]
	_ = x[NodeTypeReshape-(81)]
	_ = x[NodeTypeReverse-(82)]
	_ = x[NodeTypeRngBitGenerator-(83)]
	_ = x[NodeTypeRound-(84)]
	_ = x[NodeTypeRsqrt-(85)]
	_ = x[NodeTypeScatterMax-(86)]
	_ = x[NodeTypeScatterMin-(87)]
	_ = x[NodeTypeScatterSum-(88)]
	_ = x[NodeTypeSelectAndScatterMax-(89)]
	_ = x[NodeTypeSelectAndScatterMin-(90)]
	_ = x[NodeTypeShiftLeft-(91)]
	_ = x[NodeTypeShiftRightArithmetic-(92)]
	_ = x[NodeTypeShiftRightLogical-(93)]
	_ = x[NodeTypeSign-(94)]
	_ = x[NodeTypeSin-(95)]
	_ = x[NodeTypeSlice-(96)]
	_ = x[NodeTypeSqrt-(97)]
	_ = x[NodeTypeSub-(98)]
	_ = x[NodeTypeTanh-(99)]
	_ = x[NodeTypeTranspose-(100)]
	_ = x[NodeTypeWhere-(101)]
}

var _NodeTypeValues = []NodeType{NodeTypeInvalid, NodeTypeSplitNode, NodeTypeAbs, NodeTypeAdd, NodeTypeArgMinMax, NodeTypeBatchNormForInference, NodeTypeBatchNormForTraining, NodeTypeBatchNormGradient, NodeTypeBitCount, NodeTypeBitcast, NodeTypeBitwiseAnd, NodeTypeBitwiseNot, NodeTypeBitwiseOr, NodeTypeBitwiseXor, NodeTypeBroadcast, NodeTypeBroadcastInDim, NodeTypeCeil, NodeTypeClamp, NodeTypeClz, NodeTypeComplex, NodeTypeConcatenate, NodeTypeConj, NodeTypeConstant, NodeTypeConvGeneral, NodeTypeConvertDType, NodeTypeCos, NodeTypeDiv, NodeTypeDot, NodeTypeDotGeneral, NodeTypeDynamicSlice, NodeTypeDynamicUpdateSlice, NodeTypeEqual, NodeTypeEqualTotalOrder, NodeTypeErf, NodeTypeExp, NodeTypeExpm1, NodeTypeFFT, NodeTypeFloor, NodeTypeGather, NodeTypeGreaterOrEqual, NodeTypeGreaterOrEqualTotalOrder, NodeTypeGreaterThan, NodeTypeGreaterThanTotalOrder, NodeTypeIdentity, NodeTypeImag, NodeTypeIota, NodeTypeIsFinite, NodeTypeIsNaN, NodeTypeLessOrEqual, NodeTypeLessOrEqualTotalOrder, NodeTypeLessThan, NodeTypeLessThanTotalOrder, NodeTypeLog, NodeTypeLog1p, NodeTypeLogicalAnd, NodeTypeLogicalNot, NodeTypeLogicalOr, NodeTypeLogicalXor, NodeTypeLogistic, NodeTypeMax, NodeTypeMin, NodeTypeMul, NodeTypeNeg, NodeTypeNotEqual, NodeTypeNotEqualTotalOrder, NodeTypePad, NodeTypeParameter, NodeTypePow, NodeTypeReal, NodeTypeReduceBitwiseAnd, NodeTypeReduceBitwiseOr, NodeTypeReduceBitwiseXor, NodeTypeReduceLogicalAnd, NodeTypeReduceLogicalOr, NodeTypeReduceLogicalXor, NodeTypeReduceMax, NodeTypeReduceMin, NodeTypeReduceProduct, NodeTypeReduceSum, NodeTypeReduceWindow, NodeTypeRem, NodeTypeReshape, NodeTypeReverse, NodeTypeRngBitGenerator, NodeTypeRound, NodeTypeRsqrt, NodeTypeScatterMax, NodeTypeScatterMin, NodeTypeScatterSum, NodeTypeSelectAndScatterMax, NodeTypeSelectAndScatterMin, NodeTypeShiftLeft, NodeTypeShiftRightArithmetic, NodeTypeShiftRightLogical, NodeTypeSign, NodeTypeSin, NodeTypeSlice, NodeTypeSqrt, NodeTypeSub, NodeTypeTanh, NodeTypeTranspose, NodeTypeWhere}

var _NodeTypeNameToValueMap = map[string]NodeType{
	_NodeTypeName[0:7]:          NodeTypeInvalid,
	_NodeTypeLowerName[0:7]:     NodeTypeInvalid,
	_NodeTypeName[7:16]:         NodeTypeSplitNode,
	_NodeTypeLowerName[7:16]:    NodeTypeSplitNode,
	_NodeTypeName[16:19]:        NodeTypeAbs,
	_NodeTypeLowerName[16:19]:   NodeTypeAbs,
	_NodeTypeName[19:22]:        NodeTypeAdd,
	_NodeTypeLowerName[19:22]:   NodeTypeAdd,
	_NodeTypeName[22:31]:        NodeTypeArgMinMax,
	_NodeTypeLowerName[22:31]:   NodeTypeArgMinMax,
	_NodeTypeName[31:52]:        NodeTypeBatchNormForInference,
	_NodeTypeLowerName[31:52]:   NodeTypeBatchNormForInference,
	_NodeTypeName[52:72]:        NodeTypeBatchNormForTraining,
	_NodeTypeLowerName[52:72]:   NodeTypeBatchNormForTraining,
	_NodeTypeName[72:89]:        NodeTypeBatchNormGradient,
	_NodeTypeLowerName[72:89]:   NodeTypeBatchNormGradient,
	_NodeTypeName[89:97]:        NodeTypeBitCount,
	_NodeTypeLowerName[89:97]:   NodeTypeBitCount,
	_NodeTypeName[97:104]:       NodeTypeBitcast,
	_NodeTypeLowerName[97:104]:  NodeTypeBitcast,
	_NodeTypeName[104:114]:      NodeTypeBitwiseAnd,
	_NodeTypeLowerName[104:114]: NodeTypeBitwiseAnd,
	_NodeTypeName[114:124]:      NodeTypeBitwiseNot,
	_NodeTypeLowerName[114:124]: NodeTypeBitwiseNot,
	_NodeTypeName[124:133]:      NodeTypeBitwiseOr,
	_NodeTypeLowerName[124:133]: NodeTypeBitwiseOr,
	_NodeTypeName[133:143]:      NodeTypeBitwiseXor,
	_NodeTypeLowerName[133:143]: NodeTypeBitwiseXor,
	_NodeTypeName[143:152]:      NodeTypeBroadcast,
	_NodeTypeLowerName[143:152]: NodeTypeBroadcast,
	_NodeTypeName[152:166]:      NodeTypeBroadcastInDim,
	_NodeTypeLowerName[152:166]: NodeTypeBroadcastInDim,
	_NodeTypeName[166:170]:      NodeTypeCeil,
	_NodeTypeLowerName[166:170]: NodeTypeCeil,
	_NodeTypeName[170:175]:      NodeTypeClamp,
	_NodeTypeLowerName[170:175]: NodeTypeClamp,
	_NodeTypeName[175:178]:      NodeTypeClz,
	_NodeTypeLowerName[175:178]: NodeTypeClz,
	_NodeTypeName[178:185]:      NodeTypeComplex,
	_NodeTypeLowerName[178:185]: NodeTypeComplex,
	_NodeTypeName[185:196]:      NodeTypeConcatenate,
	_NodeTypeLowerName[185:196]: NodeTypeConcatenate,
	_NodeTypeName[196:200]:      NodeTypeConj,
	_NodeTypeLowerName[196:200]: NodeTypeConj,
	_NodeTypeName[200:208]:      NodeTypeConstant,
	_NodeTypeLowerName[200:208]: NodeTypeConstant,
	_NodeTypeName[208:219]:      NodeTypeConvGeneral,
	_NodeTypeLowerName[208:219]: NodeTypeConvGeneral,
	_NodeTypeName[219:231]:      NodeTypeConvertDType,
	_NodeTypeLowerName[219:231]: NodeTypeConvertDType,
	_NodeTypeName[231:234]:      NodeTypeCos,
	_NodeTypeLowerName[231:234]: NodeTypeCos,
	_NodeTypeName[234:237]:      NodeTypeDiv,
	_NodeTypeLowerName[234:237]: NodeTypeDiv,
	_NodeTypeName[237:240]:      NodeTypeDot,
	_NodeTypeLowerName[237:240]: NodeTypeDot,
	_NodeTypeName[240:250]:      NodeTypeDotGeneral,
	_NodeTypeLowerName[240:250]: NodeTypeDotGeneral,
	_NodeTypeName[250:262]:      NodeTypeDynamicSlice,
	_NodeTypeLowerName[250:262]: NodeTypeDynamicSlice,
	_NodeTypeName[262:280]:      NodeTypeDynamicUpdateSlice,
	_NodeTypeLowerName[262:280]: NodeTypeDynamicUpdateSlice,
	_NodeTypeName[280:285]:      NodeTypeEqual,
	_NodeTypeLowerName[280:285]: NodeTypeEqual,
	_NodeTypeName[285:300]:      NodeTypeEqualTotalOrder,
	_NodeTypeLowerName[285:300]: NodeTypeEqualTotalOrder,
	_NodeTypeName[300:303]:      NodeTypeErf,
	_NodeTypeLowerName[300:303]: NodeTypeErf,
	_NodeTypeName[303:306]:      NodeTypeExp,
	_NodeTypeLowerName[303:306]: NodeTypeExp,
	_NodeTypeName[306:311]:      NodeTypeExpm1,
	_NodeTypeLowerName[306:311]: NodeTypeExpm1,
	_NodeTypeName[311:314]:      NodeTypeFFT,
	_NodeTypeLowerName[311:314]: NodeTypeFFT,
	_NodeTypeName[314:319]:      NodeTypeFloor,
	_NodeTypeLowerName[314:319]: NodeTypeFloor,
	_NodeTypeName[319:325]:      NodeTypeGather,
	_NodeTypeLowerName[319:325]: NodeTypeGather,
	_NodeTypeName[325:339]:      NodeTypeGreaterOrEqual,
	_NodeTypeLowerName[325:339]: NodeTypeGreaterOrEqual,
	_NodeTypeName[339:363]:      NodeTypeGreaterOrEqualTotalOrder,
	_NodeTypeLowerName[339:363]: NodeTypeGreaterOrEqualTotalOrder,
	_NodeTypeName[363:374]:      NodeTypeGreaterThan,
	_NodeTypeLowerName[363:374]: NodeTypeGreaterThan,
	_NodeTypeName[374:395]:      NodeTypeGreaterThanTotalOrder,
	_NodeTypeLowerName[374:395]: NodeTypeGreaterThanTotalOrder,
	_NodeTypeName[395:403]:      NodeTypeIdentity,
	_NodeTypeLowerName[395:403]: NodeTypeIdentity,
	_NodeTypeName[403:407]:      NodeTypeImag,
	_NodeTypeLowerName[403:407]: NodeTypeImag,
	_NodeTypeName[407:411]:      NodeTypeIota,
	_NodeTypeLowerName[407:411]: NodeTypeIota,
	_NodeTypeName[411:419]:      NodeTypeIsFinite,
	_NodeTypeLowerName[411:419]: NodeTypeIsFinite,
	_NodeTypeName[419:424]:      NodeTypeIsNaN,
	_NodeTypeLowerName[419:424]: NodeTypeIsNaN,
	_NodeTypeName[424:435]:      NodeTypeLessOrEqual,
	_NodeTypeLowerName[424:435]: NodeTypeLessOrEqual,
	_NodeTypeName[435:456]:      NodeTypeLessOrEqualTotalOrder,
	_NodeTypeLowerName[435:456]: NodeTypeLessOrEqualTotalOrder,
	_NodeTypeName[456:464]:      NodeTypeLessThan,
	_NodeTypeLowerName[456:464]: NodeTypeLessThan,
	_NodeTypeName[464:482]:      NodeTypeLessThanTotalOrder,
	_NodeTypeLowerName[464:482]: NodeTypeLessThanTotalOrder,
	_NodeTypeName[482:485]:      NodeTypeLog,
	_NodeTypeLowerName[482:485]: NodeTypeLog,
	_NodeTypeName[485:490]:      NodeTypeLog1p,
	_NodeTypeLowerName[485:490]: NodeTypeLog1p,
	_NodeTypeName[490:500]:      NodeTypeLogicalAnd,
	_NodeTypeLowerName[490:500]: NodeTypeLogicalAnd,
	_NodeTypeName[500:510]:      NodeTypeLogicalNot,
	_NodeTypeLowerName[500:510]: NodeTypeLogicalNot,
	_NodeTypeName[510:519]:      NodeTypeLogicalOr,
	_NodeTypeLowerName[510:519]: NodeTypeLogicalOr,
	_NodeTypeName[519:529]:      NodeTypeLogicalXor,
	_NodeTypeLowerName[519:529]: NodeTypeLogicalXor,
	_NodeTypeName[529:537]:      NodeTypeLogistic,
	_NodeTypeLowerName[529:537]: NodeTypeLogistic,
	_NodeTypeName[537:540]:      NodeTypeMax,
	_NodeTypeLowerName[537:540]: NodeTypeMax,
	_NodeTypeName[540:543]:      NodeTypeMin,
	_NodeTypeLowerName[540:543]: NodeTypeMin,
	_NodeTypeName[543:546]:      NodeTypeMul,
	_NodeTypeLowerName[543:546]: NodeTypeMul,
	_NodeTypeName[546:549]:      NodeTypeNeg,
	_NodeTypeLowerName[546:549]: NodeTypeNeg,
	_NodeTypeName[549:557]:      NodeTypeNotEqual,
	_NodeTypeLowerName[549:557]: NodeTypeNotEqual,
	_NodeTypeName[557:575]:      NodeTypeNotEqualTotalOrder,
	_NodeTypeLowerName[557:575]: NodeTypeNotEqualTotalOrder,
	_NodeTypeName[575:578]:      NodeTypePad,
	_NodeTypeLowerName[575:578]: NodeTypePad,
	_NodeTypeName[578:587]:      NodeTypeParameter,
	_NodeTypeLowerName[578:587]: NodeTypeParameter,
	_NodeTypeName[587:590]:      NodeTypePow,
	_NodeTypeLowerName[587:590]: NodeTypePow,
	_NodeTypeName[590:594]:      NodeTypeReal,
	_NodeTypeLowerName[590:594]: NodeTypeReal,
	_NodeTypeName[594:610]:      NodeTypeReduceBitwiseAnd,
	_NodeTypeLowerName[594:610]: NodeTypeReduceBitwiseAnd,
	_NodeTypeName[610:625]:      NodeTypeReduceBitwiseOr,
	_NodeTypeLowerName[610:625]: NodeTypeReduceBitwiseOr,
	_NodeTypeName[625:641]:      NodeTypeReduceBitwiseXor,
	_NodeTypeLowerName[625:641]: NodeTypeReduceBitwiseXor,
	_NodeTypeName[641:657]:      NodeTypeReduceLogicalAnd,
	_NodeTypeLowerName[641:657]: NodeTypeReduceLogicalAnd,
	_NodeTypeName[657:672]:      NodeTypeReduceLogicalOr,
	_NodeTypeLowerName[657:672]: NodeTypeReduceLogicalOr,
	_NodeTypeName[672:688]:      NodeTypeReduceLogicalXor,
	_NodeTypeLowerName[672:688]: NodeTypeReduceLogicalXor,
	_NodeTypeName[688:697]:      NodeTypeReduceMax,
	_NodeTypeLowerName[688:697]: NodeTypeReduceMax,
	_NodeTypeName[697:706]:      NodeTypeReduceMin,
	_NodeTypeLowerName[697:706]: NodeTypeReduceMin,
	_NodeTypeName[706:719]:      NodeTypeReduceProduct,
	_NodeTypeLowerName[706:719]: NodeTypeReduceProduct,
	_NodeTypeName[719:728]:      NodeTypeReduceSum,
	_NodeTypeLowerName[719:728]: NodeTypeReduceSum,
	_NodeTypeName[728:740]:      NodeTypeReduceWindow,
	_NodeTypeLowerName[728:740]: NodeTypeReduceWindow,
	_NodeTypeName[740:743]:      NodeTypeRem,
	_NodeTypeLowerName[740:743]: NodeTypeRem,
	_NodeTypeName[743:750]:      NodeTypeReshape,
	_NodeTypeLowerName[743:750]: NodeTypeReshape,
	_NodeTypeName[750:757]:      NodeTypeReverse,
	_NodeTypeLowerName[750:757]: NodeTypeReverse,
	_NodeTypeName[757:772]:      NodeTypeRngBitGenerator,
	_NodeTypeLowerName[757:772]: NodeTypeRngBitGenerator,
	_NodeTypeName[772:777]:      NodeTypeRound,
	_NodeTypeLowerName[772:777]: NodeTypeRound,
	_NodeTypeName[777:782]:      NodeTypeRsqrt,
	_NodeTypeLowerName[777:782]: NodeTypeRsqrt,
	_NodeTypeName[782:792]:      NodeTypeScatterMax,
	_NodeTypeLowerName[782:792]: NodeTypeScatterMax,
	_NodeTypeName[792:802]:      NodeTypeScatterMin,
	_NodeTypeLowerName[792:802]: NodeTypeScatterMin,
	_NodeTypeName[802:812]:      NodeTypeScatterSum,
	_NodeTypeLowerName[802:812]: NodeTypeScatterSum,
	_NodeTypeName[812:831]:      NodeTypeSelectAndScatterMax,
	_NodeTypeLowerName[812:831]: NodeTypeSelectAndScatterMax,
	_NodeTypeName[831:850]:      NodeTypeSelectAndScatterMin,
	_NodeTypeLowerName[831:850]: NodeTypeSelectAndScatterMin,
	_NodeTypeName[850:859]:      NodeTypeShiftLeft,
	_NodeTypeLowerName[850:859]: NodeTypeShiftLeft,
	_NodeTypeName[859:879]:      NodeTypeShiftRightArithmetic,
	_NodeTypeLowerName[859:879]: NodeTypeShiftRightArithmetic,
	_NodeTypeName[879:896]:      NodeTypeShiftRightLogical,
	_NodeTypeLowerName[879:896]: NodeTypeShiftRightLogical,
	_NodeTypeName[896:900]:      NodeTypeSign,
	_NodeTypeLowerName[896:900]: NodeTypeSign,
	_NodeTypeName[900:903]:      NodeTypeSin,
	_NodeTypeLowerName[900:903]: NodeTypeSin,
	_NodeTypeName[903:908]:      NodeTypeSlice,
	_NodeTypeLowerName[903:908]: NodeTypeSlice,
	_NodeTypeName[908:912]:      NodeTypeSqrt,
	_NodeTypeLowerName[908:912]: NodeTypeSqrt,
	_NodeTypeName[912:915]:      NodeTypeSub,
	_NodeTypeLowerName[912:915]: NodeTypeSub,
	_NodeTypeName[915:919]:      NodeTypeTanh,
	_NodeTypeLowerName[915:919]: NodeTypeTanh,
	_NodeTypeName[919:928]:      NodeTypeTranspose,
	_NodeTypeLowerName[919:928]: NodeTypeTranspose,
	_NodeTypeName[928:933]:      NodeTypeWhere,
	_NodeTypeLowerName[928:933]: NodeTypeWhere,
}

var _NodeTypeNames = []string{
	_NodeTypeName[0:7],
	_NodeTypeName[7:16],
	_NodeTypeName[16:19],
	_NodeTypeName[19:22],
	_NodeTypeName[22:31],
	_NodeTypeName[31:52],
	_NodeTypeName[52:72],
	_NodeTypeName[72:89],
	_NodeTypeName[89:97],
	_NodeTypeName[97:104],
	_NodeTypeName[104:114],
	_NodeTypeName[114:124],
	_NodeTypeName[124:133],
	_NodeTypeName[133:143],
	_NodeTypeName[143:152],
	_NodeTypeName[152:166],
	_NodeTypeName[166:170],
	_NodeTypeName[170:175],
	_NodeTypeName[175:178],
	_NodeTypeName[178:185],
	_NodeTypeName[185:196],
	_NodeTypeName[196:200],
	_NodeTypeName[200:208],
	_NodeTypeName[208:219],
	_NodeTypeName[219:231],
	_NodeTypeName[231:234],
	_NodeTypeName[234:237],
	_NodeTypeName[237:240],
	_NodeTypeName[240:250],
	_NodeTypeName[250:262],
	_NodeTypeName[262:280],
	_NodeTypeName[280:285],
	_NodeTypeName[285:300],
	_NodeTypeName[300:303],
	_NodeTypeName[303:306],
	_NodeTypeName[306:311],
	_NodeTypeName[311:314],
	_NodeTypeName[314:319],
	_NodeTypeName[319:325],
	_NodeTypeName[325:339],
	_NodeTypeName[339:363],
	_NodeTypeName[363:374],
	_NodeTypeName[374:395],
	_NodeTypeName[395:403],
	_NodeTypeName[403:407],
	_NodeTypeName[407:411],
	_NodeTypeName[411:419],
	_NodeTypeName[419:424],
	_NodeTypeName[424:435],
	_NodeTypeName[435:456],
	_NodeTypeName[456:464],
	_NodeTypeName[464:482],
	_NodeTypeName[482:485],
	_NodeTypeName[485:490],
	_NodeTypeName[490:500],
	_NodeTypeName[500:510],
	_NodeTypeName[510:519],
	_NodeTypeName[519:529],
	_NodeTypeName[529:537],
	_NodeTypeName[537:540],
	_NodeTypeName[540:543],
	_NodeTypeName[543:546],
	_NodeTypeName[546:549],
	_NodeTypeName[549:557],
	_NodeTypeName[557:575],
	_NodeTypeName[575:578],
	_NodeTypeName[578:587],
	_NodeTypeName[587:590],
	_NodeTypeName[590:594],
	_NodeTypeName[594:610],
	_NodeTypeName[610:625],
	_NodeTypeName[625:641],
	_NodeTypeName[641:657],
	_NodeTypeName[657:672],
	_NodeTypeName[672:688],
	_NodeTypeName[688:697],
	_NodeTypeName[697:706],
	_NodeTypeName[706:719],
	_NodeTypeName[719:728],
	_NodeTypeName[728:740],
	_NodeTypeName[740:743],
	_NodeTypeName[743:750],
	_NodeTypeName[750:757],
	_NodeTypeName[757:772],
	_NodeTypeName[772:777],
	_NodeTypeName[777:782],
	_NodeTypeName[782:792],
	_NodeTypeName[792:802],
	_NodeTypeName[802:812],
	_NodeTypeName[812:831],
	_NodeTypeName[831:850],
	_NodeTypeName[850:859],
	_NodeTypeName[859:879],
	_NodeTypeName[879:896],
	_NodeTypeName[896:900],
	_NodeTypeName[900:903],
	_NodeTypeName[903:908],
	_NodeTypeName[908:912],
	_NodeTypeName[912:915],
	_NodeTypeName[915:919],
	_NodeTypeName[919:928],
	_NodeTypeName[928:933],
}

// NodeTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func NodeTypeString(s string) (NodeType, error) {
	if val, ok := _NodeTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _NodeTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to NodeType values", s)
}

// NodeTypeValues returns all values of the enum
func NodeTypeValues() []NodeType {
	return _NodeTypeValues
}

// NodeTypeStrings returns a slice of all String values of the enum
func NodeTypeStrings() []string {
	strs := make([]string, len(_NodeTypeNames))
	copy(strs, _NodeTypeNames)
	return strs
}

// IsANodeType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i NodeType) IsANodeType() bool {
	for _, v := range _NodeTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for NodeType
func (i NodeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for NodeType
func (i *NodeType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("NodeType should be a string, got %s", data)
	}

	var err error
	*i, err = NodeTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for NodeType
func (i NodeType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for NodeType
func (i *NodeType) UnmarshalText(text []byte) error {
	var err error
	*i, err = NodeTypeString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for NodeType
func (i NodeType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for NodeType
func (i *NodeType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = NodeTypeString(s)
	return err
}
