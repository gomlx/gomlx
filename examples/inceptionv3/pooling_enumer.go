// Code generated by "enumer -type=Pooling model.go"; DO NOT EDIT.

package inceptionv3

import (
	"fmt"
	"strings"
)

const _PoolingName = "NoPoolingMaxPoolingMeanPooling"

var _PoolingIndex = [...]uint8{0, 9, 19, 30}

const _PoolingLowerName = "nopoolingmaxpoolingmeanpooling"

func (i Pooling) String() string {
	if i < 0 || i >= Pooling(len(_PoolingIndex)-1) {
		return fmt.Sprintf("Pooling(%d)", i)
	}
	return _PoolingName[_PoolingIndex[i]:_PoolingIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _PoolingNoOp() {
	var x [1]struct{}
	_ = x[NoPooling-(0)]
	_ = x[MaxPooling-(1)]
	_ = x[MeanPooling-(2)]
}

var _PoolingValues = []Pooling{NoPooling, MaxPooling, MeanPooling}

var _PoolingNameToValueMap = map[string]Pooling{
	_PoolingName[0:9]:        NoPooling,
	_PoolingLowerName[0:9]:   NoPooling,
	_PoolingName[9:19]:       MaxPooling,
	_PoolingLowerName[9:19]:  MaxPooling,
	_PoolingName[19:30]:      MeanPooling,
	_PoolingLowerName[19:30]: MeanPooling,
}

var _PoolingNames = []string{
	_PoolingName[0:9],
	_PoolingName[9:19],
	_PoolingName[19:30],
}

// PoolingString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func PoolingString(s string) (Pooling, error) {
	if val, ok := _PoolingNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _PoolingNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Pooling values", s)
}

// PoolingValues returns all values of the enum
func PoolingValues() []Pooling {
	return _PoolingValues
}

// PoolingStrings returns a slice of all String values of the enum
func PoolingStrings() []string {
	strs := make([]string, len(_PoolingNames))
	copy(strs, _PoolingNames)
	return strs
}

// IsAPooling returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Pooling) IsAPooling() bool {
	for _, v := range _PoolingValues {
		if i == v {
			return true
		}
	}
	return false
}
