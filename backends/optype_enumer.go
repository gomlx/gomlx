// Code generated by "enumer -type=OpType -trimprefix=OpType optype.go"; DO NOT EDIT.

package backends

import (
	"fmt"
	"strings"
)

const _OpTypeName = "InvalidParameterConstantIdentityReduceWindowRngBitGeneratorBatchNormForInferenceBatchNormForTrainingBatchNormGradientBitCountAbsAddArgMinMaxBitcastBitwiseAndBitwiseNotBitwiseOrBitwiseXorBroadcastBroadcastInDimCeilClzComplexConcatenateConjConvGeneralConvertDTypeCosDivDotDotGeneralDynamicSliceDynamicUpdateSliceEqualEqualTotalOrderErfExpExpm1FFTFloorGatherGreaterOrEqualGreaterOrEqualTotalOrderGreaterThanGreaterThanTotalOrderImagIotaIsFiniteLessOrEqualLessOrEqualTotalOrderLessThanLessThanTotalOrderLogLog1pLogicalAndLogicalNotLogicalOrLogicalXorLogisticMaxMinMulNegNotEqualNotEqualTotalOrderPadPowRealReduceBitwiseAndReduceBitwiseOrReduceBitwiseXorReduceLogicalAndReduceLogicalOrReduceLogicalXorReduceMaxReduceMinReduceProductReduceSumRemReshapeReverseRoundRsqrtScatterMaxScatterMinScatterSumSelectAndScatterMaxSelectAndScatterMinSelectAndScatterSumShiftLeftShiftRightArithmeticShiftRightLogicalSignSinSliceSqrtSubTanhTransposeWhereLast"

var _OpTypeIndex = [...]uint16{0, 7, 16, 24, 32, 44, 59, 80, 100, 117, 125, 128, 131, 140, 147, 157, 167, 176, 186, 195, 209, 213, 216, 223, 234, 238, 249, 261, 264, 267, 270, 280, 292, 310, 315, 330, 333, 336, 341, 344, 349, 355, 369, 393, 404, 425, 429, 433, 441, 452, 473, 481, 499, 502, 507, 517, 527, 536, 546, 554, 557, 560, 563, 566, 574, 592, 595, 598, 602, 618, 633, 649, 665, 680, 696, 705, 714, 727, 736, 739, 746, 753, 758, 763, 773, 783, 793, 812, 831, 850, 859, 879, 896, 900, 903, 908, 912, 915, 919, 928, 933, 937}

const _OpTypeLowerName = "invalidparameterconstantidentityreducewindowrngbitgeneratorbatchnormforinferencebatchnormfortrainingbatchnormgradientbitcountabsaddargminmaxbitcastbitwiseandbitwisenotbitwiseorbitwisexorbroadcastbroadcastindimceilclzcomplexconcatenateconjconvgeneralconvertdtypecosdivdotdotgeneraldynamicslicedynamicupdatesliceequalequaltotalordererfexpexpm1fftfloorgathergreaterorequalgreaterorequaltotalordergreaterthangreaterthantotalorderimagiotaisfinitelessorequallessorequaltotalorderlessthanlessthantotalorderloglog1plogicalandlogicalnotlogicalorlogicalxorlogisticmaxminmulnegnotequalnotequaltotalorderpadpowrealreducebitwiseandreducebitwiseorreducebitwisexorreducelogicalandreducelogicalorreducelogicalxorreducemaxreduceminreduceproductreducesumremreshapereverseroundrsqrtscattermaxscatterminscattersumselectandscattermaxselectandscatterminselectandscattersumshiftleftshiftrightarithmeticshiftrightlogicalsignsinslicesqrtsubtanhtransposewherelast"

func (i OpType) String() string {
	if i < 0 || i >= OpType(len(_OpTypeIndex)-1) {
		return fmt.Sprintf("OpType(%d)", i)
	}
	return _OpTypeName[_OpTypeIndex[i]:_OpTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _OpTypeNoOp() {
	var x [1]struct{}
	_ = x[OpTypeInvalid-(0)]
	_ = x[OpTypeParameter-(1)]
	_ = x[OpTypeConstant-(2)]
	_ = x[OpTypeIdentity-(3)]
	_ = x[OpTypeReduceWindow-(4)]
	_ = x[OpTypeRngBitGenerator-(5)]
	_ = x[OpTypeBatchNormForInference-(6)]
	_ = x[OpTypeBatchNormForTraining-(7)]
	_ = x[OpTypeBatchNormGradient-(8)]
	_ = x[OpTypeBitCount-(9)]
	_ = x[OpTypeAbs-(10)]
	_ = x[OpTypeAdd-(11)]
	_ = x[OpTypeArgMinMax-(12)]
	_ = x[OpTypeBitcast-(13)]
	_ = x[OpTypeBitwiseAnd-(14)]
	_ = x[OpTypeBitwiseNot-(15)]
	_ = x[OpTypeBitwiseOr-(16)]
	_ = x[OpTypeBitwiseXor-(17)]
	_ = x[OpTypeBroadcast-(18)]
	_ = x[OpTypeBroadcastInDim-(19)]
	_ = x[OpTypeCeil-(20)]
	_ = x[OpTypeClz-(21)]
	_ = x[OpTypeComplex-(22)]
	_ = x[OpTypeConcatenate-(23)]
	_ = x[OpTypeConj-(24)]
	_ = x[OpTypeConvGeneral-(25)]
	_ = x[OpTypeConvertDType-(26)]
	_ = x[OpTypeCos-(27)]
	_ = x[OpTypeDiv-(28)]
	_ = x[OpTypeDot-(29)]
	_ = x[OpTypeDotGeneral-(30)]
	_ = x[OpTypeDynamicSlice-(31)]
	_ = x[OpTypeDynamicUpdateSlice-(32)]
	_ = x[OpTypeEqual-(33)]
	_ = x[OpTypeEqualTotalOrder-(34)]
	_ = x[OpTypeErf-(35)]
	_ = x[OpTypeExp-(36)]
	_ = x[OpTypeExpm1-(37)]
	_ = x[OpTypeFFT-(38)]
	_ = x[OpTypeFloor-(39)]
	_ = x[OpTypeGather-(40)]
	_ = x[OpTypeGreaterOrEqual-(41)]
	_ = x[OpTypeGreaterOrEqualTotalOrder-(42)]
	_ = x[OpTypeGreaterThan-(43)]
	_ = x[OpTypeGreaterThanTotalOrder-(44)]
	_ = x[OpTypeImag-(45)]
	_ = x[OpTypeIota-(46)]
	_ = x[OpTypeIsFinite-(47)]
	_ = x[OpTypeLessOrEqual-(48)]
	_ = x[OpTypeLessOrEqualTotalOrder-(49)]
	_ = x[OpTypeLessThan-(50)]
	_ = x[OpTypeLessThanTotalOrder-(51)]
	_ = x[OpTypeLog-(52)]
	_ = x[OpTypeLog1p-(53)]
	_ = x[OpTypeLogicalAnd-(54)]
	_ = x[OpTypeLogicalNot-(55)]
	_ = x[OpTypeLogicalOr-(56)]
	_ = x[OpTypeLogicalXor-(57)]
	_ = x[OpTypeLogistic-(58)]
	_ = x[OpTypeMax-(59)]
	_ = x[OpTypeMin-(60)]
	_ = x[OpTypeMul-(61)]
	_ = x[OpTypeNeg-(62)]
	_ = x[OpTypeNotEqual-(63)]
	_ = x[OpTypeNotEqualTotalOrder-(64)]
	_ = x[OpTypePad-(65)]
	_ = x[OpTypePow-(66)]
	_ = x[OpTypeReal-(67)]
	_ = x[OpTypeReduceBitwiseAnd-(68)]
	_ = x[OpTypeReduceBitwiseOr-(69)]
	_ = x[OpTypeReduceBitwiseXor-(70)]
	_ = x[OpTypeReduceLogicalAnd-(71)]
	_ = x[OpTypeReduceLogicalOr-(72)]
	_ = x[OpTypeReduceLogicalXor-(73)]
	_ = x[OpTypeReduceMax-(74)]
	_ = x[OpTypeReduceMin-(75)]
	_ = x[OpTypeReduceProduct-(76)]
	_ = x[OpTypeReduceSum-(77)]
	_ = x[OpTypeRem-(78)]
	_ = x[OpTypeReshape-(79)]
	_ = x[OpTypeReverse-(80)]
	_ = x[OpTypeRound-(81)]
	_ = x[OpTypeRsqrt-(82)]
	_ = x[OpTypeScatterMax-(83)]
	_ = x[OpTypeScatterMin-(84)]
	_ = x[OpTypeScatterSum-(85)]
	_ = x[OpTypeSelectAndScatterMax-(86)]
	_ = x[OpTypeSelectAndScatterMin-(87)]
	_ = x[OpTypeSelectAndScatterSum-(88)]
	_ = x[OpTypeShiftLeft-(89)]
	_ = x[OpTypeShiftRightArithmetic-(90)]
	_ = x[OpTypeShiftRightLogical-(91)]
	_ = x[OpTypeSign-(92)]
	_ = x[OpTypeSin-(93)]
	_ = x[OpTypeSlice-(94)]
	_ = x[OpTypeSqrt-(95)]
	_ = x[OpTypeSub-(96)]
	_ = x[OpTypeTanh-(97)]
	_ = x[OpTypeTranspose-(98)]
	_ = x[OpTypeWhere-(99)]
	_ = x[OpTypeLast-(100)]
}

var _OpTypeValues = []OpType{OpTypeInvalid, OpTypeParameter, OpTypeConstant, OpTypeIdentity, OpTypeReduceWindow, OpTypeRngBitGenerator, OpTypeBatchNormForInference, OpTypeBatchNormForTraining, OpTypeBatchNormGradient, OpTypeBitCount, OpTypeAbs, OpTypeAdd, OpTypeArgMinMax, OpTypeBitcast, OpTypeBitwiseAnd, OpTypeBitwiseNot, OpTypeBitwiseOr, OpTypeBitwiseXor, OpTypeBroadcast, OpTypeBroadcastInDim, OpTypeCeil, OpTypeClz, OpTypeComplex, OpTypeConcatenate, OpTypeConj, OpTypeConvGeneral, OpTypeConvertDType, OpTypeCos, OpTypeDiv, OpTypeDot, OpTypeDotGeneral, OpTypeDynamicSlice, OpTypeDynamicUpdateSlice, OpTypeEqual, OpTypeEqualTotalOrder, OpTypeErf, OpTypeExp, OpTypeExpm1, OpTypeFFT, OpTypeFloor, OpTypeGather, OpTypeGreaterOrEqual, OpTypeGreaterOrEqualTotalOrder, OpTypeGreaterThan, OpTypeGreaterThanTotalOrder, OpTypeImag, OpTypeIota, OpTypeIsFinite, OpTypeLessOrEqual, OpTypeLessOrEqualTotalOrder, OpTypeLessThan, OpTypeLessThanTotalOrder, OpTypeLog, OpTypeLog1p, OpTypeLogicalAnd, OpTypeLogicalNot, OpTypeLogicalOr, OpTypeLogicalXor, OpTypeLogistic, OpTypeMax, OpTypeMin, OpTypeMul, OpTypeNeg, OpTypeNotEqual, OpTypeNotEqualTotalOrder, OpTypePad, OpTypePow, OpTypeReal, OpTypeReduceBitwiseAnd, OpTypeReduceBitwiseOr, OpTypeReduceBitwiseXor, OpTypeReduceLogicalAnd, OpTypeReduceLogicalOr, OpTypeReduceLogicalXor, OpTypeReduceMax, OpTypeReduceMin, OpTypeReduceProduct, OpTypeReduceSum, OpTypeRem, OpTypeReshape, OpTypeReverse, OpTypeRound, OpTypeRsqrt, OpTypeScatterMax, OpTypeScatterMin, OpTypeScatterSum, OpTypeSelectAndScatterMax, OpTypeSelectAndScatterMin, OpTypeSelectAndScatterSum, OpTypeShiftLeft, OpTypeShiftRightArithmetic, OpTypeShiftRightLogical, OpTypeSign, OpTypeSin, OpTypeSlice, OpTypeSqrt, OpTypeSub, OpTypeTanh, OpTypeTranspose, OpTypeWhere, OpTypeLast}

var _OpTypeNameToValueMap = map[string]OpType{
	_OpTypeName[0:7]:          OpTypeInvalid,
	_OpTypeLowerName[0:7]:     OpTypeInvalid,
	_OpTypeName[7:16]:         OpTypeParameter,
	_OpTypeLowerName[7:16]:    OpTypeParameter,
	_OpTypeName[16:24]:        OpTypeConstant,
	_OpTypeLowerName[16:24]:   OpTypeConstant,
	_OpTypeName[24:32]:        OpTypeIdentity,
	_OpTypeLowerName[24:32]:   OpTypeIdentity,
	_OpTypeName[32:44]:        OpTypeReduceWindow,
	_OpTypeLowerName[32:44]:   OpTypeReduceWindow,
	_OpTypeName[44:59]:        OpTypeRngBitGenerator,
	_OpTypeLowerName[44:59]:   OpTypeRngBitGenerator,
	_OpTypeName[59:80]:        OpTypeBatchNormForInference,
	_OpTypeLowerName[59:80]:   OpTypeBatchNormForInference,
	_OpTypeName[80:100]:       OpTypeBatchNormForTraining,
	_OpTypeLowerName[80:100]:  OpTypeBatchNormForTraining,
	_OpTypeName[100:117]:      OpTypeBatchNormGradient,
	_OpTypeLowerName[100:117]: OpTypeBatchNormGradient,
	_OpTypeName[117:125]:      OpTypeBitCount,
	_OpTypeLowerName[117:125]: OpTypeBitCount,
	_OpTypeName[125:128]:      OpTypeAbs,
	_OpTypeLowerName[125:128]: OpTypeAbs,
	_OpTypeName[128:131]:      OpTypeAdd,
	_OpTypeLowerName[128:131]: OpTypeAdd,
	_OpTypeName[131:140]:      OpTypeArgMinMax,
	_OpTypeLowerName[131:140]: OpTypeArgMinMax,
	_OpTypeName[140:147]:      OpTypeBitcast,
	_OpTypeLowerName[140:147]: OpTypeBitcast,
	_OpTypeName[147:157]:      OpTypeBitwiseAnd,
	_OpTypeLowerName[147:157]: OpTypeBitwiseAnd,
	_OpTypeName[157:167]:      OpTypeBitwiseNot,
	_OpTypeLowerName[157:167]: OpTypeBitwiseNot,
	_OpTypeName[167:176]:      OpTypeBitwiseOr,
	_OpTypeLowerName[167:176]: OpTypeBitwiseOr,
	_OpTypeName[176:186]:      OpTypeBitwiseXor,
	_OpTypeLowerName[176:186]: OpTypeBitwiseXor,
	_OpTypeName[186:195]:      OpTypeBroadcast,
	_OpTypeLowerName[186:195]: OpTypeBroadcast,
	_OpTypeName[195:209]:      OpTypeBroadcastInDim,
	_OpTypeLowerName[195:209]: OpTypeBroadcastInDim,
	_OpTypeName[209:213]:      OpTypeCeil,
	_OpTypeLowerName[209:213]: OpTypeCeil,
	_OpTypeName[213:216]:      OpTypeClz,
	_OpTypeLowerName[213:216]: OpTypeClz,
	_OpTypeName[216:223]:      OpTypeComplex,
	_OpTypeLowerName[216:223]: OpTypeComplex,
	_OpTypeName[223:234]:      OpTypeConcatenate,
	_OpTypeLowerName[223:234]: OpTypeConcatenate,
	_OpTypeName[234:238]:      OpTypeConj,
	_OpTypeLowerName[234:238]: OpTypeConj,
	_OpTypeName[238:249]:      OpTypeConvGeneral,
	_OpTypeLowerName[238:249]: OpTypeConvGeneral,
	_OpTypeName[249:261]:      OpTypeConvertDType,
	_OpTypeLowerName[249:261]: OpTypeConvertDType,
	_OpTypeName[261:264]:      OpTypeCos,
	_OpTypeLowerName[261:264]: OpTypeCos,
	_OpTypeName[264:267]:      OpTypeDiv,
	_OpTypeLowerName[264:267]: OpTypeDiv,
	_OpTypeName[267:270]:      OpTypeDot,
	_OpTypeLowerName[267:270]: OpTypeDot,
	_OpTypeName[270:280]:      OpTypeDotGeneral,
	_OpTypeLowerName[270:280]: OpTypeDotGeneral,
	_OpTypeName[280:292]:      OpTypeDynamicSlice,
	_OpTypeLowerName[280:292]: OpTypeDynamicSlice,
	_OpTypeName[292:310]:      OpTypeDynamicUpdateSlice,
	_OpTypeLowerName[292:310]: OpTypeDynamicUpdateSlice,
	_OpTypeName[310:315]:      OpTypeEqual,
	_OpTypeLowerName[310:315]: OpTypeEqual,
	_OpTypeName[315:330]:      OpTypeEqualTotalOrder,
	_OpTypeLowerName[315:330]: OpTypeEqualTotalOrder,
	_OpTypeName[330:333]:      OpTypeErf,
	_OpTypeLowerName[330:333]: OpTypeErf,
	_OpTypeName[333:336]:      OpTypeExp,
	_OpTypeLowerName[333:336]: OpTypeExp,
	_OpTypeName[336:341]:      OpTypeExpm1,
	_OpTypeLowerName[336:341]: OpTypeExpm1,
	_OpTypeName[341:344]:      OpTypeFFT,
	_OpTypeLowerName[341:344]: OpTypeFFT,
	_OpTypeName[344:349]:      OpTypeFloor,
	_OpTypeLowerName[344:349]: OpTypeFloor,
	_OpTypeName[349:355]:      OpTypeGather,
	_OpTypeLowerName[349:355]: OpTypeGather,
	_OpTypeName[355:369]:      OpTypeGreaterOrEqual,
	_OpTypeLowerName[355:369]: OpTypeGreaterOrEqual,
	_OpTypeName[369:393]:      OpTypeGreaterOrEqualTotalOrder,
	_OpTypeLowerName[369:393]: OpTypeGreaterOrEqualTotalOrder,
	_OpTypeName[393:404]:      OpTypeGreaterThan,
	_OpTypeLowerName[393:404]: OpTypeGreaterThan,
	_OpTypeName[404:425]:      OpTypeGreaterThanTotalOrder,
	_OpTypeLowerName[404:425]: OpTypeGreaterThanTotalOrder,
	_OpTypeName[425:429]:      OpTypeImag,
	_OpTypeLowerName[425:429]: OpTypeImag,
	_OpTypeName[429:433]:      OpTypeIota,
	_OpTypeLowerName[429:433]: OpTypeIota,
	_OpTypeName[433:441]:      OpTypeIsFinite,
	_OpTypeLowerName[433:441]: OpTypeIsFinite,
	_OpTypeName[441:452]:      OpTypeLessOrEqual,
	_OpTypeLowerName[441:452]: OpTypeLessOrEqual,
	_OpTypeName[452:473]:      OpTypeLessOrEqualTotalOrder,
	_OpTypeLowerName[452:473]: OpTypeLessOrEqualTotalOrder,
	_OpTypeName[473:481]:      OpTypeLessThan,
	_OpTypeLowerName[473:481]: OpTypeLessThan,
	_OpTypeName[481:499]:      OpTypeLessThanTotalOrder,
	_OpTypeLowerName[481:499]: OpTypeLessThanTotalOrder,
	_OpTypeName[499:502]:      OpTypeLog,
	_OpTypeLowerName[499:502]: OpTypeLog,
	_OpTypeName[502:507]:      OpTypeLog1p,
	_OpTypeLowerName[502:507]: OpTypeLog1p,
	_OpTypeName[507:517]:      OpTypeLogicalAnd,
	_OpTypeLowerName[507:517]: OpTypeLogicalAnd,
	_OpTypeName[517:527]:      OpTypeLogicalNot,
	_OpTypeLowerName[517:527]: OpTypeLogicalNot,
	_OpTypeName[527:536]:      OpTypeLogicalOr,
	_OpTypeLowerName[527:536]: OpTypeLogicalOr,
	_OpTypeName[536:546]:      OpTypeLogicalXor,
	_OpTypeLowerName[536:546]: OpTypeLogicalXor,
	_OpTypeName[546:554]:      OpTypeLogistic,
	_OpTypeLowerName[546:554]: OpTypeLogistic,
	_OpTypeName[554:557]:      OpTypeMax,
	_OpTypeLowerName[554:557]: OpTypeMax,
	_OpTypeName[557:560]:      OpTypeMin,
	_OpTypeLowerName[557:560]: OpTypeMin,
	_OpTypeName[560:563]:      OpTypeMul,
	_OpTypeLowerName[560:563]: OpTypeMul,
	_OpTypeName[563:566]:      OpTypeNeg,
	_OpTypeLowerName[563:566]: OpTypeNeg,
	_OpTypeName[566:574]:      OpTypeNotEqual,
	_OpTypeLowerName[566:574]: OpTypeNotEqual,
	_OpTypeName[574:592]:      OpTypeNotEqualTotalOrder,
	_OpTypeLowerName[574:592]: OpTypeNotEqualTotalOrder,
	_OpTypeName[592:595]:      OpTypePad,
	_OpTypeLowerName[592:595]: OpTypePad,
	_OpTypeName[595:598]:      OpTypePow,
	_OpTypeLowerName[595:598]: OpTypePow,
	_OpTypeName[598:602]:      OpTypeReal,
	_OpTypeLowerName[598:602]: OpTypeReal,
	_OpTypeName[602:618]:      OpTypeReduceBitwiseAnd,
	_OpTypeLowerName[602:618]: OpTypeReduceBitwiseAnd,
	_OpTypeName[618:633]:      OpTypeReduceBitwiseOr,
	_OpTypeLowerName[618:633]: OpTypeReduceBitwiseOr,
	_OpTypeName[633:649]:      OpTypeReduceBitwiseXor,
	_OpTypeLowerName[633:649]: OpTypeReduceBitwiseXor,
	_OpTypeName[649:665]:      OpTypeReduceLogicalAnd,
	_OpTypeLowerName[649:665]: OpTypeReduceLogicalAnd,
	_OpTypeName[665:680]:      OpTypeReduceLogicalOr,
	_OpTypeLowerName[665:680]: OpTypeReduceLogicalOr,
	_OpTypeName[680:696]:      OpTypeReduceLogicalXor,
	_OpTypeLowerName[680:696]: OpTypeReduceLogicalXor,
	_OpTypeName[696:705]:      OpTypeReduceMax,
	_OpTypeLowerName[696:705]: OpTypeReduceMax,
	_OpTypeName[705:714]:      OpTypeReduceMin,
	_OpTypeLowerName[705:714]: OpTypeReduceMin,
	_OpTypeName[714:727]:      OpTypeReduceProduct,
	_OpTypeLowerName[714:727]: OpTypeReduceProduct,
	_OpTypeName[727:736]:      OpTypeReduceSum,
	_OpTypeLowerName[727:736]: OpTypeReduceSum,
	_OpTypeName[736:739]:      OpTypeRem,
	_OpTypeLowerName[736:739]: OpTypeRem,
	_OpTypeName[739:746]:      OpTypeReshape,
	_OpTypeLowerName[739:746]: OpTypeReshape,
	_OpTypeName[746:753]:      OpTypeReverse,
	_OpTypeLowerName[746:753]: OpTypeReverse,
	_OpTypeName[753:758]:      OpTypeRound,
	_OpTypeLowerName[753:758]: OpTypeRound,
	_OpTypeName[758:763]:      OpTypeRsqrt,
	_OpTypeLowerName[758:763]: OpTypeRsqrt,
	_OpTypeName[763:773]:      OpTypeScatterMax,
	_OpTypeLowerName[763:773]: OpTypeScatterMax,
	_OpTypeName[773:783]:      OpTypeScatterMin,
	_OpTypeLowerName[773:783]: OpTypeScatterMin,
	_OpTypeName[783:793]:      OpTypeScatterSum,
	_OpTypeLowerName[783:793]: OpTypeScatterSum,
	_OpTypeName[793:812]:      OpTypeSelectAndScatterMax,
	_OpTypeLowerName[793:812]: OpTypeSelectAndScatterMax,
	_OpTypeName[812:831]:      OpTypeSelectAndScatterMin,
	_OpTypeLowerName[812:831]: OpTypeSelectAndScatterMin,
	_OpTypeName[831:850]:      OpTypeSelectAndScatterSum,
	_OpTypeLowerName[831:850]: OpTypeSelectAndScatterSum,
	_OpTypeName[850:859]:      OpTypeShiftLeft,
	_OpTypeLowerName[850:859]: OpTypeShiftLeft,
	_OpTypeName[859:879]:      OpTypeShiftRightArithmetic,
	_OpTypeLowerName[859:879]: OpTypeShiftRightArithmetic,
	_OpTypeName[879:896]:      OpTypeShiftRightLogical,
	_OpTypeLowerName[879:896]: OpTypeShiftRightLogical,
	_OpTypeName[896:900]:      OpTypeSign,
	_OpTypeLowerName[896:900]: OpTypeSign,
	_OpTypeName[900:903]:      OpTypeSin,
	_OpTypeLowerName[900:903]: OpTypeSin,
	_OpTypeName[903:908]:      OpTypeSlice,
	_OpTypeLowerName[903:908]: OpTypeSlice,
	_OpTypeName[908:912]:      OpTypeSqrt,
	_OpTypeLowerName[908:912]: OpTypeSqrt,
	_OpTypeName[912:915]:      OpTypeSub,
	_OpTypeLowerName[912:915]: OpTypeSub,
	_OpTypeName[915:919]:      OpTypeTanh,
	_OpTypeLowerName[915:919]: OpTypeTanh,
	_OpTypeName[919:928]:      OpTypeTranspose,
	_OpTypeLowerName[919:928]: OpTypeTranspose,
	_OpTypeName[928:933]:      OpTypeWhere,
	_OpTypeLowerName[928:933]: OpTypeWhere,
	_OpTypeName[933:937]:      OpTypeLast,
	_OpTypeLowerName[933:937]: OpTypeLast,
}

var _OpTypeNames = []string{
	_OpTypeName[0:7],
	_OpTypeName[7:16],
	_OpTypeName[16:24],
	_OpTypeName[24:32],
	_OpTypeName[32:44],
	_OpTypeName[44:59],
	_OpTypeName[59:80],
	_OpTypeName[80:100],
	_OpTypeName[100:117],
	_OpTypeName[117:125],
	_OpTypeName[125:128],
	_OpTypeName[128:131],
	_OpTypeName[131:140],
	_OpTypeName[140:147],
	_OpTypeName[147:157],
	_OpTypeName[157:167],
	_OpTypeName[167:176],
	_OpTypeName[176:186],
	_OpTypeName[186:195],
	_OpTypeName[195:209],
	_OpTypeName[209:213],
	_OpTypeName[213:216],
	_OpTypeName[216:223],
	_OpTypeName[223:234],
	_OpTypeName[234:238],
	_OpTypeName[238:249],
	_OpTypeName[249:261],
	_OpTypeName[261:264],
	_OpTypeName[264:267],
	_OpTypeName[267:270],
	_OpTypeName[270:280],
	_OpTypeName[280:292],
	_OpTypeName[292:310],
	_OpTypeName[310:315],
	_OpTypeName[315:330],
	_OpTypeName[330:333],
	_OpTypeName[333:336],
	_OpTypeName[336:341],
	_OpTypeName[341:344],
	_OpTypeName[344:349],
	_OpTypeName[349:355],
	_OpTypeName[355:369],
	_OpTypeName[369:393],
	_OpTypeName[393:404],
	_OpTypeName[404:425],
	_OpTypeName[425:429],
	_OpTypeName[429:433],
	_OpTypeName[433:441],
	_OpTypeName[441:452],
	_OpTypeName[452:473],
	_OpTypeName[473:481],
	_OpTypeName[481:499],
	_OpTypeName[499:502],
	_OpTypeName[502:507],
	_OpTypeName[507:517],
	_OpTypeName[517:527],
	_OpTypeName[527:536],
	_OpTypeName[536:546],
	_OpTypeName[546:554],
	_OpTypeName[554:557],
	_OpTypeName[557:560],
	_OpTypeName[560:563],
	_OpTypeName[563:566],
	_OpTypeName[566:574],
	_OpTypeName[574:592],
	_OpTypeName[592:595],
	_OpTypeName[595:598],
	_OpTypeName[598:602],
	_OpTypeName[602:618],
	_OpTypeName[618:633],
	_OpTypeName[633:649],
	_OpTypeName[649:665],
	_OpTypeName[665:680],
	_OpTypeName[680:696],
	_OpTypeName[696:705],
	_OpTypeName[705:714],
	_OpTypeName[714:727],
	_OpTypeName[727:736],
	_OpTypeName[736:739],
	_OpTypeName[739:746],
	_OpTypeName[746:753],
	_OpTypeName[753:758],
	_OpTypeName[758:763],
	_OpTypeName[763:773],
	_OpTypeName[773:783],
	_OpTypeName[783:793],
	_OpTypeName[793:812],
	_OpTypeName[812:831],
	_OpTypeName[831:850],
	_OpTypeName[850:859],
	_OpTypeName[859:879],
	_OpTypeName[879:896],
	_OpTypeName[896:900],
	_OpTypeName[900:903],
	_OpTypeName[903:908],
	_OpTypeName[908:912],
	_OpTypeName[912:915],
	_OpTypeName[915:919],
	_OpTypeName[919:928],
	_OpTypeName[928:933],
	_OpTypeName[933:937],
}

// OpTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OpTypeString(s string) (OpType, error) {
	if val, ok := _OpTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _OpTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to OpType values", s)
}

// OpTypeValues returns all values of the enum
func OpTypeValues() []OpType {
	return _OpTypeValues
}

// OpTypeStrings returns a slice of all String values of the enum
func OpTypeStrings() []string {
	strs := make([]string, len(_OpTypeNames))
	copy(strs, _OpTypeNames)
	return strs
}

// IsAOpType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i OpType) IsAOpType() bool {
	for _, v := range _OpTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
