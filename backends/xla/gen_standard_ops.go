/***** File generated by ./internal/cmd/xla_generator, based on github.com/gomlx/gopjrt. Don't edit it directly. *****/

package xla

import (
	"github.com/gomlx/gomlx/backends"
	"github.com/gomlx/gomlx/types/shapes"
	"github.com/gomlx/gopjrt/dtypes"
	"github.com/gomlx/gopjrt/xlabuilder"
	"github.com/pkg/errors"
)

// Abs returns the Op that represents the output of the corresponding operation.
func (b *Builder) Abs(x backends.Op) (backends.Op, error) {
	xla_x, err := b.verifyAndCastOp(x, "x")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Abs", BackendName)
	}

	xla_result, err := xlabuilder.Abs(xla_x)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Abs", BackendName)
	}
	return xla_result, nil
}

// Add returns the element-wise sum of the two values.
// Standard broadcasting rules apply (see documentation).
// The op is created on the same XlaBuilder as used for x0 and x1.
func (b *Builder) Add(x0, x1 backends.Op) (backends.Op, error) {
	xla_x0, err := b.verifyAndCastOp(x0, "x0")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Add", BackendName)
	}

	xla_x1, err := b.verifyAndCastOp(x1, "x1")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Add", BackendName)
	}

	xla_result, err := xlabuilder.Add(xla_x0, xla_x1)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Add", BackendName)
	}
	return xla_result, nil
}

// ArgMinMax calculates the "argmin" or "argmax" across an axis of the given input array x.
// outputDType defines the output of the argmin/argmax, it doesn't need to be the same as the input.
// It's a form of reduction on the given axis, and that axis goes away. So the rank of the result is one less than
// the rank of x.
// Examples:
//
//	ArgMinMax(x={{2, 0, 7}, {-3, 4, 2}}, axis=1, isMin=true) -> {1, 0}  // (it chooses the 0 and the -3)
//	ArgMinMax(x={{2, 0, 7}, {-3, 4, 2}}, axis=0, isMin=false) -> {0, 1, 0} // (it choose the 2, 4 and 7)
func (b *Builder) ArgMinMax(x backends.Op, axis int, outputDType dtypes.DType, isMin bool) (backends.Op, error) {
	xla_x, err := b.verifyAndCastOp(x, "x")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed ArgMinMax", BackendName)
	}

	xla_result, err := xlabuilder.ArgMinMax(xla_x, axis, outputDType, isMin)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed ArgMinMax", BackendName)
	}
	return xla_result, nil
}

// BatchNormForInference implements Batch Norm for inference. See details in
// https://www.tensorflow.org/xla/operation_semantics#batchnorminference
// Based on paper "Batch Normalization: Accelerating Deep Network Training by Reducing
// Internal Covariate Shift" (Sergey Ioffe, Christian Szegedy), https://arxiv.org/abs/1502.03167.
func (b *Builder) BatchNormForInference(operand, scale, offset, mean, variance backends.Op, epsilon float32, axis int) (backends.Op, error) {
	xla_operand, err := b.verifyAndCastOp(operand, "operand")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed BatchNormForInference", BackendName)
	}

	xla_scale, err := b.verifyAndCastOp(scale, "scale")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed BatchNormForInference", BackendName)
	}

	xla_offset, err := b.verifyAndCastOp(offset, "offset")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed BatchNormForInference", BackendName)
	}

	xla_mean, err := b.verifyAndCastOp(mean, "mean")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed BatchNormForInference", BackendName)
	}

	xla_variance, err := b.verifyAndCastOp(variance, "variance")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed BatchNormForInference", BackendName)
	}

	xla_result, err := xlabuilder.BatchNormForInference(xla_operand, xla_scale, xla_offset, xla_mean, xla_variance, epsilon, axis)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed BatchNormForInference", BackendName)
	}
	return xla_result, nil
}

// Bitcast performs an elementwise bit-cast operation from a dtype to another dtype.
// The bitcast doesn't "convert" anything, it just reinterprets the bits from x.DType() to the targetDType.
// If x.DType() and targetDType use the same number of bytes (targetDType.Size() = x.DType().Size()),
// the dimensions are not changed, simply the dtype is changed.
// If targetDType.Size() > x.DType().Size(), it requires that x last axis to have a dimension of targetDType.Size() / x.DType().Size(),
// and the returned shape will trim the last axis.
// If targetDType.Size() < x.DType().Size(), the returned shape will have an extra axis in the end, with dimension of
// x.DType().Size() / targetDType.Size().
// E.g: Bitcast([1]uint32{0xdeadbeef}, dtypes.UInt16) -> [1][2]uint16{{0xdead, 0xbeef}}
func (b *Builder) Bitcast(x backends.Op, targetDType dtypes.DType) (backends.Op, error) {
	xla_x, err := b.verifyAndCastOp(x, "x")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Bitcast", BackendName)
	}

	xla_result, err := xlabuilder.Bitcast(xla_x, targetDType)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Bitcast", BackendName)
	}
	return xla_result, nil
}

// BitwiseAnd returns the element-wise bitwise AND operation.
// The op is created on the same XlaBuilder as used for x0 and x1.
func (b *Builder) BitwiseAnd(x0, x1 backends.Op) (backends.Op, error) {
	xla_x0, err := b.verifyAndCastOp(x0, "x0")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed BitwiseAnd", BackendName)
	}

	xla_x1, err := b.verifyAndCastOp(x1, "x1")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed BitwiseAnd", BackendName)
	}

	xla_result, err := xlabuilder.BitwiseAnd(xla_x0, xla_x1)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed BitwiseAnd", BackendName)
	}
	return xla_result, nil
}

// BitwiseNot returns the element-wise bitwise AND operation.
func (b *Builder) BitwiseNot(x backends.Op) (backends.Op, error) {
	xla_x, err := b.verifyAndCastOp(x, "x")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed BitwiseNot", BackendName)
	}

	xla_result, err := xlabuilder.BitwiseNot(xla_x)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed BitwiseNot", BackendName)
	}
	return xla_result, nil
}

// BitwiseOr returns the element-wise bitwise OR operation.
// The op is created on the same XlaBuilder as used for x0 and x1.
func (b *Builder) BitwiseOr(x0, x1 backends.Op) (backends.Op, error) {
	xla_x0, err := b.verifyAndCastOp(x0, "x0")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed BitwiseOr", BackendName)
	}

	xla_x1, err := b.verifyAndCastOp(x1, "x1")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed BitwiseOr", BackendName)
	}

	xla_result, err := xlabuilder.BitwiseOr(xla_x0, xla_x1)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed BitwiseOr", BackendName)
	}
	return xla_result, nil
}

// BitwiseXor returns the element-wise bitwise XOR operator.
// The op is created on the same XlaBuilder as used for x0 and x1.
func (b *Builder) BitwiseXor(x0, x1 backends.Op) (backends.Op, error) {
	xla_x0, err := b.verifyAndCastOp(x0, "x0")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed BitwiseXor", BackendName)
	}

	xla_x1, err := b.verifyAndCastOp(x1, "x1")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed BitwiseXor", BackendName)
	}

	xla_result, err := xlabuilder.BitwiseXor(xla_x0, xla_x1)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed BitwiseXor", BackendName)
	}
	return xla_result, nil
}

// Broadcast prefixes dimensions to an array by duplicating the data in the array.
// See BroadcastInDim for a broadcast in between the axes.
// The new dimensions dims are inserted on the left, i.e., if
// prefixDims has values `{a0, ..., aN}` and the operand shape
// has dimensions {b0, ..., bM} then the shape of the output has
// dimensions {a0, ..., aN, b0, ..., bM}.
// The new dimensions id into copies of the operand, i.e.
//
//	output[i0, ..., iN, j0, ..., jM] = operand[j0, ..., jM]
func (b *Builder) Broadcast(x backends.Op, prefixDims ...int) (backends.Op, error) {
	xla_x, err := b.verifyAndCastOp(x, "x")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Broadcast", BackendName)
	}

	xla_result, err := xlabuilder.Broadcast(xla_x, prefixDims...)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Broadcast", BackendName)
	}
	return xla_result, nil
}

// BroadcastInDim broadcasts x to an output with the given shape.
// broadcastAxes has an output axes value for each x axes (len(broadcastAxes) == x.Shape.Rank()).
// The i-th axis of x is mapped to the broadcastAxes[i]-th dimension of the output.
// broadcastAxes must be also increasing: this operation cannot be used to transpose axes, it will only
// broadcast and introduce new axes in-between.
// This also requires that the i-th input axis is either 1 or is the same as the
// output dimension it's broadcasting into.
// For example, say operand `x = (s32)[2]{1, 2}`; outputShape = `(s32)[2,2]`:
//   - Specifying []int{1} as broadcastAxes will generate output
//     {{1, 2},
//     {1, 2}}
//   - On the other hand, specifying []int{0} as broadcastAxes
//     will generate output
//     {{1 , 1},
//     {2 , 2}}
func (b *Builder) BroadcastInDim(x backends.Op, outputShape shapes.Shape, broadcastAxes []int) (backends.Op, error) {
	xla_x, err := b.verifyAndCastOp(x, "x")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed BroadcastInDim", BackendName)
	}

	xla_outputShape := shapeToXShape(outputShape)
	xla_result, err := xlabuilder.BroadcastInDim(xla_x, xla_outputShape, broadcastAxes)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed BroadcastInDim", BackendName)
	}
	return xla_result, nil
}

// Ceil returns the Op that represents the output of the corresponding operation.
func (b *Builder) Ceil(x backends.Op) (backends.Op, error) {
	xla_x, err := b.verifyAndCastOp(x, "x")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Ceil", BackendName)
	}

	xla_result, err := xlabuilder.Ceil(xla_x)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Ceil", BackendName)
	}
	return xla_result, nil
}

// Clz returns element-wise the "count leading zeros" bits of input node x -- for integer values.
func (b *Builder) Clz(x backends.Op) (backends.Op, error) {
	xla_x, err := b.verifyAndCastOp(x, "x")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Clz", BackendName)
	}

	xla_result, err := xlabuilder.Clz(xla_x)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Clz", BackendName)
	}
	return xla_result, nil
}

// Complex returns the complex number taking x0 as the real part and x1 as the imaginary part.
// The real (x0) and imaginary (x1) must have the same dtype, and they must be either `dtypes.Float32` or
// `dtypes.Float64`.
// The output will be either `dtypes.Complex64` or `dtypes.Complex128`, depending on x0 and x1 dtypes.
// The shapes of `real` or `imaginary` must be the same, or one must be a scalar, in which case
// the value is broadcast to every other value.
// The op is created on the same XlaBuilder as used for x0 and x1.
func (b *Builder) Complex(x0, x1 backends.Op) (backends.Op, error) {
	xla_x0, err := b.verifyAndCastOp(x0, "x0")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Complex", BackendName)
	}

	xla_x1, err := b.verifyAndCastOp(x1, "x1")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Complex", BackendName)
	}

	xla_result, err := xlabuilder.Complex(xla_x0, xla_x1)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Complex", BackendName)
	}
	return xla_result, nil
}

// Concatenate results on the given axis.
// All axes that are not being concatenated must match dimensions.
// It doesn't work with scalars -- use ExpandDims.
// If there is only one operand, it is returned and this is a no-op.
func (b *Builder) Concatenate(axis int, operands ...backends.Op) (backends.Op, error) {
	xla_operands, err := b.verifyAndCastOps(operands, "operands")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Concatenate", BackendName)
	}

	xla_result, err := xlabuilder.Concatenate(axis, xla_operands...)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Concatenate", BackendName)
	}
	return xla_result, nil
}

// Conj returns the conjugate of a complex number. E.g: Conj(1+3i) = 1-3i
func (b *Builder) Conj(x backends.Op) (backends.Op, error) {
	xla_x, err := b.verifyAndCastOp(x, "x")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Conj", BackendName)
	}

	xla_result, err := xlabuilder.Conj(xla_x)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Conj", BackendName)
	}
	return xla_result, nil
}

// ConvGeneral is a generic Convolution operation with support for:
// - Arbitrary number of spatial axes.
// - Arbitrary transposition of axes.
// - Strides and padding.
// - Dilations of the input.
// - Dilations of the kernel, aka. atrous convolution.
// - Channels grouping (on the input channels).
// - Batch grouping.
// Some details in https://www.tensorflow.org/xla/operation_semantics#convwithgeneralpadding_convolution.
// There operand and filter are called lhs and rhs.
// (XLA documentation is unfortunately poor, much is guess-work).
// Also useful, https://arxiv.org/pdf/1603.07285v1.pdf.
// Note:
//   - Another common term for "channels" is "features".
//   - "Kernel" is also commonly called "weights" or "filters".
func (b *Builder) ConvGeneral(input, kernel backends.Op, axes backends.ConvolveAxesConfig, strides []int, paddings [][2]int, inputDilations, kernelDilations []int, channelGroupCount, batchGroupCount int) (backends.Op, error) {
	xla_input, err := b.verifyAndCastOp(input, "input")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed ConvGeneral", BackendName)
	}

	xla_kernel, err := b.verifyAndCastOp(kernel, "kernel")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed ConvGeneral", BackendName)
	}

	xla_axes := convertConvolveAxesConfig(axes)
	xla_result, err := xlabuilder.ConvGeneral(xla_input, xla_kernel, xla_axes, strides, paddings, inputDilations, kernelDilations, channelGroupCount, batchGroupCount)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed ConvGeneral", BackendName)
	}
	return xla_result, nil
}

// ConvertDType of x to dtype.
func (b *Builder) ConvertDType(x backends.Op, dtype dtypes.DType) (backends.Op, error) {
	xla_x, err := b.verifyAndCastOp(x, "x")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed ConvertDType", BackendName)
	}

	xla_result, err := xlabuilder.ConvertDType(xla_x, dtype)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed ConvertDType", BackendName)
	}
	return xla_result, nil
}

// Cos returns the Op that represents the output of the corresponding operation.
func (b *Builder) Cos(x backends.Op) (backends.Op, error) {
	xla_x, err := b.verifyAndCastOp(x, "x")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Cos", BackendName)
	}

	xla_result, err := xlabuilder.Cos(xla_x)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Cos", BackendName)
	}
	return xla_result, nil
}

// Div returns the element-wise division of the two values.
// Standard broadcasting rules apply (see documentation).
// The op is created on the same XlaBuilder as used for x0 and x1.
func (b *Builder) Div(x0, x1 backends.Op) (backends.Op, error) {
	xla_x0, err := b.verifyAndCastOp(x0, "x0")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Div", BackendName)
	}

	xla_x1, err := b.verifyAndCastOp(x1, "x1")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Div", BackendName)
	}

	xla_result, err := xlabuilder.Div(xla_x0, xla_x1)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Div", BackendName)
	}
	return xla_result, nil
}

// Dot returns the "dot product" operation.
// The exact semantics of this operation depend on the ranks of the operands:
// | Input | Output | Semantics |
// | vector [n] dot vector [n] | scalar | vector dot product |
// | matrix [m x k] dot vector [k] | vector [m]	matrix-vector multiplication |
// | matrix [m x k] dot matrix [k x n] | matrix [m x n] | matrix-matrix multiplication |
// The operation performs sum of products over the second dimension of x0 (or the first if it has rank 1) and
// the first dimension of x1.
// These are the "contracted" dimensions.
// The contracted dimensions of x0 and x1 must be of the same size.
// In practice, it can be used to perform dot products between vectors, vector/matrix multiplications or
// matrix/matrix multiplications.
// The op is created on the same XlaBuilder as used for x0 and x1.
func (b *Builder) Dot(x0, x1 backends.Op) (backends.Op, error) {
	xla_x0, err := b.verifyAndCastOp(x0, "x0")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Dot", BackendName)
	}

	xla_x1, err := b.verifyAndCastOp(x1, "x1")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Dot", BackendName)
	}

	xla_result, err := xlabuilder.Dot(xla_x0, xla_x1)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Dot", BackendName)
	}
	return xla_result, nil
}

// DotGeneral takes as input lhs (left-hand-side) and rhs (right-hand-side) specifications
// for a general vector product -- a generalized "Einsum". Each axis can be:
//   - Just aligned (batch axes), so the output has the same axes as the inputs. The dimensions
//     must match in lhs and rhs.
//   - Crossed (default), in which case the output is the combination (concatenation) of the
//     dimensions.
//   - Contracted (contracting axes), where the output does multiply the values and reduce sum
//     those dimensions.
//
// It follows that the resulting dimension number starts with the batch dimension, then the 'lhs'
// non-contracting/non-batch dimension, and finally the 'rhs' non-contracting/non-batch dimension.
// It provides the basic means of implementing Einsum.
func (b *Builder) DotGeneral(lhs backends.Op, lhsContractingAxes, lhsBatchAxes []int, rhs backends.Op, rhsContractingAxes, rhsBatchAxes []int) (backends.Op, error) {
	xla_lhs, err := b.verifyAndCastOp(lhs, "lhs")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed DotGeneral", BackendName)
	}

	xla_rhs, err := b.verifyAndCastOp(rhs, "rhs")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed DotGeneral", BackendName)
	}

	xla_result, err := xlabuilder.DotGeneral(xla_lhs, lhsContractingAxes, lhsBatchAxes, xla_rhs, rhsContractingAxes, rhsBatchAxes)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed DotGeneral", BackendName)
	}
	return xla_result, nil
}

// DynamicSlice extracts a sub-array from the input array at dynamic start_indices.
// The size of the slice in each axis is passed in sliceDims, which specify the slice
// intervals for each axis: [start, start + size).
// The shape of startIndices must be rank == 1, with dimension size equal to the rank of operand.
// See description in https://openxla.org/xla/operation_semantics#dynamicslice
func (b *Builder) DynamicSlice(operand backends.Op, startIndices []backends.Op, sliceDims []int) (backends.Op, error) {
	xla_operand, err := b.verifyAndCastOp(operand, "operand")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed DynamicSlice", BackendName)
	}

	xla_startIndices, err := b.verifyAndCastOps(startIndices, "startIndices")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed DynamicSlice", BackendName)
	}

	xla_result, err := xlabuilder.DynamicSlice(xla_operand, xla_startIndices, sliceDims)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed DynamicSlice", BackendName)
	}
	return xla_result, nil
}

// DynamicUpdateSlice generates a result which is the value of the input array operand, with a slice update overwritten
// at startIndices.
// The shape of update determines the shape of the sub-array of the result which is updated.
// The shape of startIndices must be rank == 1, with dimension size equal to the rank of operand.
// See description in https://openxla.org/xla/operation_semantics#dynamicupdateslice
func (b *Builder) DynamicUpdateSlice(operand, update backends.Op, startIndices []backends.Op) (backends.Op, error) {
	xla_operand, err := b.verifyAndCastOp(operand, "operand")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed DynamicUpdateSlice", BackendName)
	}

	xla_update, err := b.verifyAndCastOp(update, "update")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed DynamicUpdateSlice", BackendName)
	}

	xla_startIndices, err := b.verifyAndCastOps(startIndices, "startIndices")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed DynamicUpdateSlice", BackendName)
	}

	xla_result, err := xlabuilder.DynamicUpdateSlice(xla_operand, xla_update, xla_startIndices)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed DynamicUpdateSlice", BackendName)
	}
	return xla_result, nil
}

// Equal performs element-wise equality check, returns boolean results with the same dimensions as input.
// The op is created on the same XlaBuilder as used for x0 and x1.
func (b *Builder) Equal(x0, x1 backends.Op) (backends.Op, error) {
	xla_x0, err := b.verifyAndCastOp(x0, "x0")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Equal", BackendName)
	}

	xla_x1, err := b.verifyAndCastOp(x1, "x1")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Equal", BackendName)
	}

	xla_result, err := xlabuilder.Equal(xla_x0, xla_x1)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Equal", BackendName)
	}
	return xla_result, nil
}

// EqualTotalOrder returns the element-wise operation.
// Standard broadcasting rules apply (see documentation).
// The "TotalOrder" version of the operation enforces `-NaN < -Inf < -Finite < -0 < +0 < +Finite < +Inf < +NaN`.
// The op is created on the same XlaBuilder as used for x0 and x1.
func (b *Builder) EqualTotalOrder(x0, x1 backends.Op) (backends.Op, error) {
	xla_x0, err := b.verifyAndCastOp(x0, "x0")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed EqualTotalOrder", BackendName)
	}

	xla_x1, err := b.verifyAndCastOp(x1, "x1")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed EqualTotalOrder", BackendName)
	}

	xla_result, err := xlabuilder.EqualTotalOrder(xla_x0, xla_x1)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed EqualTotalOrder", BackendName)
	}
	return xla_result, nil
}

// Erf returns the "error function", defined as erf(x) = 2/Pi * \int_{0}^{x}{e^{-t^2}dt}.
func (b *Builder) Erf(x backends.Op) (backends.Op, error) {
	xla_x, err := b.verifyAndCastOp(x, "x")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Erf", BackendName)
	}

	xla_result, err := xlabuilder.Erf(xla_x)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Erf", BackendName)
	}
	return xla_result, nil
}

// Exp returns the Op that represents the output of the corresponding operation.
func (b *Builder) Exp(x backends.Op) (backends.Op, error) {
	xla_x, err := b.verifyAndCastOp(x, "x")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Exp", BackendName)
	}

	xla_result, err := xlabuilder.Exp(xla_x)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Exp", BackendName)
	}
	return xla_result, nil
}

// Expm1 returns the Op that represents the output of the corresponding operation.
func (b *Builder) Expm1(x backends.Op) (backends.Op, error) {
	xla_x, err := b.verifyAndCastOp(x, "x")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Expm1", BackendName)
	}

	xla_result, err := xlabuilder.Expm1(xla_x)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Expm1", BackendName)
	}
	return xla_result, nil
}

// FFT calls the XLA FFT operation, which implements {Forward, Inverse} x {Complex, Real} versions.
// See documentation in https://www.tensorflow.org/xla/operation_semantics.
// Underlying, CPU FFT is backed by Eigen's TensorFFT and GPU FFT uses cuFFT.
func (b *Builder) FFT(operand backends.Op, fftType backends.FFTType, fftLength []int) (backends.Op, error) {
	xla_operand, err := b.verifyAndCastOp(operand, "operand")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed FFT", BackendName)
	}

	var xla_fftType = convertFFTType(fftType)
	xla_result, err := xlabuilder.FFT(xla_operand, xla_fftType, fftLength)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed FFT", BackendName)
	}
	return xla_result, nil
}

// Floor returns the Op that represents the output of the corresponding operation.
func (b *Builder) Floor(x backends.Op) (backends.Op, error) {
	xla_x, err := b.verifyAndCastOp(x, "x")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Floor", BackendName)
	}

	xla_result, err := xlabuilder.Floor(xla_x)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Floor", BackendName)
	}
	return xla_result, nil
}

// Gather is a powerful but cumbersome Gather operation offered by XLA.
// Full details in https://www.tensorflow.org/xla/operation_semantics#gather.
// (Warning: it's circular and cumbersome)
// The output of Gather has the same DType of the operand, from where we are pulling the data.
// It's shape will be composed of 2 parts:
//   - Batch axes: they come from the axes of startIndices, except the "indexVectorAxis" (usually the last)
//     that is used as the indices into the operand. (*)
//   - "Offset axes": these are axes that come from the operand, the sizes given by sliceSizes. Notice
//     that if sliceSizes for an axis is 1, and that axis feature in the collapsedSliceAxes list, this
//     axis gets omitted in the output.
//
// So in general output.Rank() = startIndices.Rank() - 1 + len(offsetAxes).
// (*) One exception is if indexVectorAxis == startIndices.Rank(), in which case we assume there is an
// extra virtual axis in startIndices of size 1, in which case output.Rank() = startIndices.Rank() + len(offsetAxes).
// Arguments:
//   - operand: the values from where we are gathering. The output DType will follow the operand one.
//   - startIndices: are the indices we want to gather. There will be one axis pointed by indexVector axis which
//     enumerates the indices of the slice to be gathered in the operand array (their values are mapped to the axis
//     in the operand according to startIndexMap).
//     All other axes are "batch dimensions" and they will have equivalent axes (same dimensions) in the output.
//   - indexVectorAxis: which of the axis in startIndices is collected and used as the start index for slices
//     to be gathered in the operand.
//     It is typically the last axis of startIndices, so startIndices.Shape.Rank()-1.
//     There is a special case where indexVectorAxis == startIndices.Rank() in which case we assume there is an
//     extra virtual axis in startIndices of size 1, in which case output.Rank() = startIndices.Rank() + len(offsetAxes).
//   - offsetOutputAxes: axes in the _output_ (not on the operand) that will hold the "offset slices", slices that are not
//     collapsed. It points in which position (axis) in the output these slices should show up. Any axis in sliceSizes
//     that is > 1 must feature here.
//     Notice all axes in the operand will either become an "offset axis" in the output, if their slice size > 1,
//     of optionally collapsed (or "squeezed") in the output, if their slice size == 1. We map the axes in the output
//     (given in offsetAxes) to the axes in the operand (the axes not present in collapsedSliceAxes) sequentially.
//     One must have Rank(operand) == len(collapsedSliceAxes) + len(offsetAxes).
//   - collapsedSliceAxes: for sliceSizes that are 1 in the operand, one may not want to include them in the output.
//     The _operand_ axes included here are marked to be collapsed (removed) in the output. Notice, the corresponding
//     value in sliceSizes must be 1.
//     One must have Rank(operand) == len(collapsedSliceAxes) + len(offsetOutputAxes).
//   - startIndexMap: this maps which value in startIndices is used for which axis index in the slice to be gathered.
//     Notice len(startIndexMap) must match the startIndices.Shape().Dimensions[indexVectorAxis].
//     E.g: if startIndices.shape=(2, 3), indexVectorAxis=1, and operand.rank=4 and startIndexMap=[]int{0, 1, 2},
//     this mean each row of the startIndices will point to the first 3 axis (0,1 and 2) in operand.
//     In many cases this is [0, 1, 2, ..., operand.Shape.Rank()-1], that is, each "index vector" fully defines
//     an element on the operand. In some this is only a prefix of the operand's rank.
//     For those axis in the operand not explicitly set (so if len(startIndexMap) < operand.Rank()), the corresponding
//     axis start index is considered to be 0, and one sets the sliceSizes to take the slice one wants (typically the
//     full slice).
//   - sliceSizes: once the start index from where to gather is resolved, this defines how much data in each axis
//     to gather. The "offset" output axes (see above) will have dimensions equal to this number for not axes that
//     are not collapsed.
//   - indicesAreSorted: can be set to true if its guaranteed that startIndices are sorted (in ascending order,
//     after scattering its values according to start_index_map) by the user. This allows for some optimizations
//     in some platforms.
func (b *Builder) Gather(operand, startIndices backends.Op, indexVectorAxis int, offsetOutputAxes, collapsedSliceAxes, startIndexMap, sliceSizes []int, indicesAreSorted bool) (backends.Op, error) {
	xla_operand, err := b.verifyAndCastOp(operand, "operand")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Gather", BackendName)
	}

	xla_startIndices, err := b.verifyAndCastOp(startIndices, "startIndices")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Gather", BackendName)
	}

	xla_result, err := xlabuilder.Gather(xla_operand, xla_startIndices, indexVectorAxis, offsetOutputAxes, collapsedSliceAxes, startIndexMap, sliceSizes, indicesAreSorted)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Gather", BackendName)
	}
	return xla_result, nil
}

// GreaterOrEqual performs element-wise comparison, returns boolean results with the same dimensions as input.
// The op is created on the same XlaBuilder as used for x0 and x1.
func (b *Builder) GreaterOrEqual(x0, x1 backends.Op) (backends.Op, error) {
	xla_x0, err := b.verifyAndCastOp(x0, "x0")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed GreaterOrEqual", BackendName)
	}

	xla_x1, err := b.verifyAndCastOp(x1, "x1")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed GreaterOrEqual", BackendName)
	}

	xla_result, err := xlabuilder.GreaterOrEqual(xla_x0, xla_x1)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed GreaterOrEqual", BackendName)
	}
	return xla_result, nil
}

// GreaterOrEqualTotalOrder returns the element-wise operation.
// Standard broadcasting rules apply (see documentation).
// The "TotalOrder" version of the operation enforces `-NaN < -Inf < -Finite < -0 < +0 < +Finite < +Inf < +NaN`.
// The op is created on the same XlaBuilder as used for x0 and x1.
func (b *Builder) GreaterOrEqualTotalOrder(x0, x1 backends.Op) (backends.Op, error) {
	xla_x0, err := b.verifyAndCastOp(x0, "x0")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed GreaterOrEqualTotalOrder", BackendName)
	}

	xla_x1, err := b.verifyAndCastOp(x1, "x1")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed GreaterOrEqualTotalOrder", BackendName)
	}

	xla_result, err := xlabuilder.GreaterOrEqualTotalOrder(xla_x0, xla_x1)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed GreaterOrEqualTotalOrder", BackendName)
	}
	return xla_result, nil
}

// GreaterThan performs element-wise comparison, returns boolean results with the same dimensions as input.
// The op is created on the same XlaBuilder as used for x0 and x1.
func (b *Builder) GreaterThan(x0, x1 backends.Op) (backends.Op, error) {
	xla_x0, err := b.verifyAndCastOp(x0, "x0")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed GreaterThan", BackendName)
	}

	xla_x1, err := b.verifyAndCastOp(x1, "x1")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed GreaterThan", BackendName)
	}

	xla_result, err := xlabuilder.GreaterThan(xla_x0, xla_x1)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed GreaterThan", BackendName)
	}
	return xla_result, nil
}

// GreaterThanTotalOrder returns the element-wise operation.
// Standard broadcasting rules apply (see documentation).
// The "TotalOrder" version of the operation enforces `-NaN < -Inf < -Finite < -0 < +0 < +Finite < +Inf < +NaN`.
// The op is created on the same XlaBuilder as used for x0 and x1.
func (b *Builder) GreaterThanTotalOrder(x0, x1 backends.Op) (backends.Op, error) {
	xla_x0, err := b.verifyAndCastOp(x0, "x0")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed GreaterThanTotalOrder", BackendName)
	}

	xla_x1, err := b.verifyAndCastOp(x1, "x1")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed GreaterThanTotalOrder", BackendName)
	}

	xla_result, err := xlabuilder.GreaterThanTotalOrder(xla_x0, xla_x1)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed GreaterThanTotalOrder", BackendName)
	}
	return xla_result, nil
}

// Imag returns the imaginary part of a complex number. It returns 0 if the x is a float number.
func (b *Builder) Imag(x backends.Op) (backends.Op, error) {
	xla_x, err := b.verifyAndCastOp(x, "x")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Imag", BackendName)
	}

	xla_result, err := xlabuilder.Imag(xla_x)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Imag", BackendName)
	}
	return xla_result, nil
}

// Iota creates a constant of the given shape with increasing numbers (starting from 0)
// on the given axis. So Iota([2,2], 1) returns [[0 1][0 1]], while Iota([2,2], 0)
// returns [[0 0][1 1]].
func (b *Builder) Iota(shape shapes.Shape, iotaAxis int) (backends.Op, error) {
	xla_shape := shapeToXShape(shape)
	xla_result, err := xlabuilder.Iota(b.builder, xla_shape, iotaAxis)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Iota", BackendName)
	}
	return xla_result, nil
}

// IsFinite tests whether each element of operand is finite, i.e., is not positive or negative infinity, and is not NaN.
// It returns an array of boolean values with the same shape as the input, where each element is true if and only if
// the corresponding input element is finite.
func (b *Builder) IsFinite(x backends.Op) (backends.Op, error) {
	xla_x, err := b.verifyAndCastOp(x, "x")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed IsFinite", BackendName)
	}

	xla_result, err := xlabuilder.IsFinite(xla_x)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed IsFinite", BackendName)
	}
	return xla_result, nil
}

// LessOrEqual performs element-wise comparison, returns boolean results with the same dimensions as input.
// The op is created on the same XlaBuilder as used for x0 and x1.
func (b *Builder) LessOrEqual(x0, x1 backends.Op) (backends.Op, error) {
	xla_x0, err := b.verifyAndCastOp(x0, "x0")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed LessOrEqual", BackendName)
	}

	xla_x1, err := b.verifyAndCastOp(x1, "x1")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed LessOrEqual", BackendName)
	}

	xla_result, err := xlabuilder.LessOrEqual(xla_x0, xla_x1)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed LessOrEqual", BackendName)
	}
	return xla_result, nil
}

// LessOrEqualTotalOrder returns the element-wise operation.
// Standard broadcasting rules apply (see documentation).
// The "TotalOrder" version of the operation enforces `-NaN < -Inf < -Finite < -0 < +0 < +Finite < +Inf < +NaN`.
// The op is created on the same XlaBuilder as used for x0 and x1.
func (b *Builder) LessOrEqualTotalOrder(x0, x1 backends.Op) (backends.Op, error) {
	xla_x0, err := b.verifyAndCastOp(x0, "x0")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed LessOrEqualTotalOrder", BackendName)
	}

	xla_x1, err := b.verifyAndCastOp(x1, "x1")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed LessOrEqualTotalOrder", BackendName)
	}

	xla_result, err := xlabuilder.LessOrEqualTotalOrder(xla_x0, xla_x1)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed LessOrEqualTotalOrder", BackendName)
	}
	return xla_result, nil
}

// LessThan performs element-wise comparison, returns boolean results with the same dimensions as input.
// The op is created on the same XlaBuilder as used for x0 and x1.
func (b *Builder) LessThan(x0, x1 backends.Op) (backends.Op, error) {
	xla_x0, err := b.verifyAndCastOp(x0, "x0")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed LessThan", BackendName)
	}

	xla_x1, err := b.verifyAndCastOp(x1, "x1")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed LessThan", BackendName)
	}

	xla_result, err := xlabuilder.LessThan(xla_x0, xla_x1)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed LessThan", BackendName)
	}
	return xla_result, nil
}

// LessThanTotalOrder returns the element-wise operation.
// Standard broadcasting rules apply (see documentation).
// The "TotalOrder" version of the operation enforces `-NaN < -Inf < -Finite < -0 < +0 < +Finite < +Inf < +NaN`.
// The op is created on the same XlaBuilder as used for x0 and x1.
func (b *Builder) LessThanTotalOrder(x0, x1 backends.Op) (backends.Op, error) {
	xla_x0, err := b.verifyAndCastOp(x0, "x0")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed LessThanTotalOrder", BackendName)
	}

	xla_x1, err := b.verifyAndCastOp(x1, "x1")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed LessThanTotalOrder", BackendName)
	}

	xla_result, err := xlabuilder.LessThanTotalOrder(xla_x0, xla_x1)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed LessThanTotalOrder", BackendName)
	}
	return xla_result, nil
}

// Log returns the Op that represents the output of the corresponding operation.
func (b *Builder) Log(x backends.Op) (backends.Op, error) {
	xla_x, err := b.verifyAndCastOp(x, "x")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Log", BackendName)
	}

	xla_result, err := xlabuilder.Log(xla_x)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Log", BackendName)
	}
	return xla_result, nil
}

// Log1p returns the expression log(x+1).
func (b *Builder) Log1p(x backends.Op) (backends.Op, error) {
	xla_x, err := b.verifyAndCastOp(x, "x")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Log1p", BackendName)
	}

	xla_result, err := xlabuilder.Log1p(xla_x)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Log1p", BackendName)
	}
	return xla_result, nil
}

// LogicalAnd returns the element-wise logical AND operation.
// The op is created on the same XlaBuilder as used for x0 and x1.
func (b *Builder) LogicalAnd(x0, x1 backends.Op) (backends.Op, error) {
	xla_x0, err := b.verifyAndCastOp(x0, "x0")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed LogicalAnd", BackendName)
	}

	xla_x1, err := b.verifyAndCastOp(x1, "x1")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed LogicalAnd", BackendName)
	}

	xla_result, err := xlabuilder.LogicalAnd(xla_x0, xla_x1)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed LogicalAnd", BackendName)
	}
	return xla_result, nil
}

// LogicalNot returns the Op that represents the output of the corresponding operation.
func (b *Builder) LogicalNot(x backends.Op) (backends.Op, error) {
	xla_x, err := b.verifyAndCastOp(x, "x")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed LogicalNot", BackendName)
	}

	xla_result, err := xlabuilder.LogicalNot(xla_x)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed LogicalNot", BackendName)
	}
	return xla_result, nil
}

// LogicalOr returns the element-wise logical OR operation.
// The op is created on the same XlaBuilder as used for x0 and x1.
func (b *Builder) LogicalOr(x0, x1 backends.Op) (backends.Op, error) {
	xla_x0, err := b.verifyAndCastOp(x0, "x0")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed LogicalOr", BackendName)
	}

	xla_x1, err := b.verifyAndCastOp(x1, "x1")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed LogicalOr", BackendName)
	}

	xla_result, err := xlabuilder.LogicalOr(xla_x0, xla_x1)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed LogicalOr", BackendName)
	}
	return xla_result, nil
}

// LogicalXor returns the element-wise logical XOR operator.
// The op is created on the same XlaBuilder as used for x0 and x1.
func (b *Builder) LogicalXor(x0, x1 backends.Op) (backends.Op, error) {
	xla_x0, err := b.verifyAndCastOp(x0, "x0")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed LogicalXor", BackendName)
	}

	xla_x1, err := b.verifyAndCastOp(x1, "x1")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed LogicalXor", BackendName)
	}

	xla_result, err := xlabuilder.LogicalXor(xla_x0, xla_x1)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed LogicalXor", BackendName)
	}
	return xla_result, nil
}

// Logistic returns the element-wise expression 1/(1+exp(-x)). Also known as the Sigmoid function.
func (b *Builder) Logistic(x backends.Op) (backends.Op, error) {
	xla_x, err := b.verifyAndCastOp(x, "x")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Logistic", BackendName)
	}

	xla_result, err := xlabuilder.Logistic(xla_x)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Logistic", BackendName)
	}
	return xla_result, nil
}

// Max returns the element-wise highest value among the two.
// The op is created on the same XlaBuilder as used for x0 and x1.
func (b *Builder) Max(x0, x1 backends.Op) (backends.Op, error) {
	xla_x0, err := b.verifyAndCastOp(x0, "x0")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Max", BackendName)
	}

	xla_x1, err := b.verifyAndCastOp(x1, "x1")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Max", BackendName)
	}

	xla_result, err := xlabuilder.Max(xla_x0, xla_x1)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Max", BackendName)
	}
	return xla_result, nil
}

// Min returns the element-wise smallest value among the two.
// The op is created on the same XlaBuilder as used for x0 and x1.
func (b *Builder) Min(x0, x1 backends.Op) (backends.Op, error) {
	xla_x0, err := b.verifyAndCastOp(x0, "x0")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Min", BackendName)
	}

	xla_x1, err := b.verifyAndCastOp(x1, "x1")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Min", BackendName)
	}

	xla_result, err := xlabuilder.Min(xla_x0, xla_x1)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Min", BackendName)
	}
	return xla_result, nil
}

// Mul returns the element-wise multiplication of the two values.
// Standard broadcasting rules apply (see documentation).
// The op is created on the same XlaBuilder as used for x0 and x1.
func (b *Builder) Mul(x0, x1 backends.Op) (backends.Op, error) {
	xla_x0, err := b.verifyAndCastOp(x0, "x0")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Mul", BackendName)
	}

	xla_x1, err := b.verifyAndCastOp(x1, "x1")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Mul", BackendName)
	}

	xla_result, err := xlabuilder.Mul(xla_x0, xla_x1)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Mul", BackendName)
	}
	return xla_result, nil
}

// Neg returns the Op that represents the output of the corresponding operation.
func (b *Builder) Neg(x backends.Op) (backends.Op, error) {
	xla_x, err := b.verifyAndCastOp(x, "x")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Neg", BackendName)
	}

	xla_result, err := xlabuilder.Neg(xla_x)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Neg", BackendName)
	}
	return xla_result, nil
}

// NotEqual performs element-wise inequality check, returns boolean results with the same dimensions as input.
// The op is created on the same XlaBuilder as used for x0 and x1.
func (b *Builder) NotEqual(x0, x1 backends.Op) (backends.Op, error) {
	xla_x0, err := b.verifyAndCastOp(x0, "x0")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed NotEqual", BackendName)
	}

	xla_x1, err := b.verifyAndCastOp(x1, "x1")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed NotEqual", BackendName)
	}

	xla_result, err := xlabuilder.NotEqual(xla_x0, xla_x1)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed NotEqual", BackendName)
	}
	return xla_result, nil
}

// NotEqualTotalOrder returns the element-wise operation.
// Standard broadcasting rules apply (see documentation).
// The "TotalOrder" version of the operation enforces `-NaN < -Inf < -Finite < -0 < +0 < +Finite < +Inf < +NaN`.
// The op is created on the same XlaBuilder as used for x0 and x1.
func (b *Builder) NotEqualTotalOrder(x0, x1 backends.Op) (backends.Op, error) {
	xla_x0, err := b.verifyAndCastOp(x0, "x0")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed NotEqualTotalOrder", BackendName)
	}

	xla_x1, err := b.verifyAndCastOp(x1, "x1")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed NotEqualTotalOrder", BackendName)
	}

	xla_result, err := xlabuilder.NotEqualTotalOrder(xla_x0, xla_x1)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed NotEqualTotalOrder", BackendName)
	}
	return xla_result, nil
}

// Pad injects padding on the start, end or interior (in between each element) of the given operand.
// There must be at most `operand.Rank()` axesConfig values. Missing PadAxis are assumed to be zeros,
// that is, no padding for those axes.
func (b *Builder) Pad(x, fillValue backends.Op, axesConfig ...backends.PadAxis) (backends.Op, error) {
	xla_x, err := b.verifyAndCastOp(x, "x")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Pad", BackendName)
	}

	xla_fillValue, err := b.verifyAndCastOp(fillValue, "fillValue")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Pad", BackendName)
	}

	var xla_axesConfig []xlabuilder.PadAxis
	for _, pad := range axesConfig {
		xla_axesConfig = append(xla_axesConfig, convertPadAxis(pad))
	}
	xla_result, err := xlabuilder.Pad(xla_x, xla_fillValue, xla_axesConfig...)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Pad", BackendName)
	}
	return xla_result, nil
}

// Pow returns the Op that represents the output of the corresponding operation.
// The op is created on the same XlaBuilder as used for x0 and x1.
func (b *Builder) Pow(x0, x1 backends.Op) (backends.Op, error) {
	xla_x0, err := b.verifyAndCastOp(x0, "x0")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Pow", BackendName)
	}

	xla_x1, err := b.verifyAndCastOp(x1, "x1")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Pow", BackendName)
	}

	xla_result, err := xlabuilder.Pow(xla_x0, xla_x1)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Pow", BackendName)
	}
	return xla_result, nil
}

// Real return the real part of a complex number. It returns x if the x is a float number.
func (b *Builder) Real(x backends.Op) (backends.Op, error) {
	xla_x, err := b.verifyAndCastOp(x, "x")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Real", BackendName)
	}

	xla_result, err := xlabuilder.Real(xla_x)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Real", BackendName)
	}
	return xla_result, nil
}

// ReduceBitwiseAnd is a shortcut for Reduce with the proper computation and initial value to reduce x on the given axes, by taking the bitwise/logical And of the reduced axes.
// If no axes are given, it reduces the full array.
func (b *Builder) ReduceBitwiseAnd(x backends.Op, axes ...int) (backends.Op, error) {
	xla_x, err := b.verifyAndCastOp(x, "x")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed ReduceBitwiseAnd", BackendName)
	}

	xla_result, err := xlabuilder.ReduceBitwiseAnd(xla_x, axes...)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed ReduceBitwiseAnd", BackendName)
	}
	return xla_result, nil
}

// ReduceBitwiseOr is a shortcut for Reduce with the proper computation and initial value to reduce x on the given axes, by taking the bitwise/logical Or of the reduced axes.
// If no axes are given, it reduces the full array.
func (b *Builder) ReduceBitwiseOr(x backends.Op, axes ...int) (backends.Op, error) {
	xla_x, err := b.verifyAndCastOp(x, "x")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed ReduceBitwiseOr", BackendName)
	}

	xla_result, err := xlabuilder.ReduceBitwiseOr(xla_x, axes...)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed ReduceBitwiseOr", BackendName)
	}
	return xla_result, nil
}

// ReduceBitwiseXor is a shortcut for Reduce with the proper computation and initial value to reduce x on the given axes, by taking the bitwise/logical Xor of the reduced axes.
// If no axes are given, it reduces the full array.
func (b *Builder) ReduceBitwiseXor(x backends.Op, axes ...int) (backends.Op, error) {
	xla_x, err := b.verifyAndCastOp(x, "x")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed ReduceBitwiseXor", BackendName)
	}

	xla_result, err := xlabuilder.ReduceBitwiseXor(xla_x, axes...)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed ReduceBitwiseXor", BackendName)
	}
	return xla_result, nil
}

// ReduceLogicalAnd is a shortcut for Reduce with the proper computation and initial value to reduce x on the given axes, by taking the bitwise/logical And of the reduced axes.
// If no axes are given, it reduces the full array.
func (b *Builder) ReduceLogicalAnd(x backends.Op, axes ...int) (backends.Op, error) {
	xla_x, err := b.verifyAndCastOp(x, "x")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed ReduceLogicalAnd", BackendName)
	}

	xla_result, err := xlabuilder.ReduceLogicalAnd(xla_x, axes...)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed ReduceLogicalAnd", BackendName)
	}
	return xla_result, nil
}

// ReduceLogicalOr is a shortcut for Reduce with the proper computation and initial value to reduce x on the given axes, by taking the bitwise/logical Or of the reduced axes.
// If no axes are given, it reduces the full array.
func (b *Builder) ReduceLogicalOr(x backends.Op, axes ...int) (backends.Op, error) {
	xla_x, err := b.verifyAndCastOp(x, "x")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed ReduceLogicalOr", BackendName)
	}

	xla_result, err := xlabuilder.ReduceLogicalOr(xla_x, axes...)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed ReduceLogicalOr", BackendName)
	}
	return xla_result, nil
}

// ReduceLogicalXor is a shortcut for Reduce with the proper computation and initial value to reduce x on the given axes, by taking the bitwise/logical Xor of the reduced axes.
// If no axes are given, it reduces the full array.
func (b *Builder) ReduceLogicalXor(x backends.Op, axes ...int) (backends.Op, error) {
	xla_x, err := b.verifyAndCastOp(x, "x")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed ReduceLogicalXor", BackendName)
	}

	xla_result, err := xlabuilder.ReduceLogicalXor(xla_x, axes...)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed ReduceLogicalXor", BackendName)
	}
	return xla_result, nil
}

// ReduceMax is a shortcut for Reduce with the proper computation and initial value to reduce x on the given axes, by taking the max value.
// If no axes are given, it reduces the full array.
func (b *Builder) ReduceMax(x backends.Op, axes ...int) (backends.Op, error) {
	xla_x, err := b.verifyAndCastOp(x, "x")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed ReduceMax", BackendName)
	}

	xla_result, err := xlabuilder.ReduceMax(xla_x, axes...)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed ReduceMax", BackendName)
	}
	return xla_result, nil
}

// ReduceMin is a shortcut for Reduce with the proper computation and initial value to reduce x on the given axes, by taking the min value.
// If no axes are given, it reduces the full array.
func (b *Builder) ReduceMin(x backends.Op, axes ...int) (backends.Op, error) {
	xla_x, err := b.verifyAndCastOp(x, "x")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed ReduceMin", BackendName)
	}

	xla_result, err := xlabuilder.ReduceMin(xla_x, axes...)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed ReduceMin", BackendName)
	}
	return xla_result, nil
}

// ReduceProduct is a shortcut for Reduce with the proper computation and initial value to reduce x on the given axes, by taking the product of the reduced axes.
// If no axes are given, it reduces the full array.
func (b *Builder) ReduceProduct(x backends.Op, axes ...int) (backends.Op, error) {
	xla_x, err := b.verifyAndCastOp(x, "x")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed ReduceProduct", BackendName)
	}

	xla_result, err := xlabuilder.ReduceProduct(xla_x, axes...)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed ReduceProduct", BackendName)
	}
	return xla_result, nil
}

// ReduceSum is a shortcut for Reduce with the proper computation and initial value to reduce x on the given axes, by taking the sum of the reduced axes.
// If no axes are given, it reduces the full array.
func (b *Builder) ReduceSum(x backends.Op, axes ...int) (backends.Op, error) {
	xla_x, err := b.verifyAndCastOp(x, "x")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed ReduceSum", BackendName)
	}

	xla_result, err := xlabuilder.ReduceSum(xla_x, axes...)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed ReduceSum", BackendName)
	}
	return xla_result, nil
}

// Rem returns the remainder operation, also known as modulo (or Mod for short).
// Notice despite the name XLA implements Mod not IEEE754 Remainder operation.
// The op is created on the same XlaBuilder as used for x0 and x1.
func (b *Builder) Rem(x0, x1 backends.Op) (backends.Op, error) {
	xla_x0, err := b.verifyAndCastOp(x0, "x0")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Rem", BackendName)
	}

	xla_x1, err := b.verifyAndCastOp(x1, "x1")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Rem", BackendName)
	}

	xla_result, err := xlabuilder.Rem(xla_x0, xla_x1)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Rem", BackendName)
	}
	return xla_result, nil
}

// Reshape reshapes x to the new dimensions.
// Total size cannot change, it's just a "reinterpretation" of the same flat data.
// The dtype remains the same, see ConvertDType to actually convert the values.
func (b *Builder) Reshape(x backends.Op, dimensions ...int) (backends.Op, error) {
	xla_x, err := b.verifyAndCastOp(x, "x")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Reshape", BackendName)
	}

	xla_result, err := xlabuilder.Reshape(xla_x, dimensions...)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Reshape", BackendName)
	}
	return xla_result, nil
}

// Reverse returns x with the values for the given dimensions reversed, that is,
// the value indexed at `i` will be swapped with the value at indexed `(dimension_size - 1 - i)`.
// The shape remains the same.
func (b *Builder) Reverse(x backends.Op, axes ...int) (backends.Op, error) {
	xla_x, err := b.verifyAndCastOp(x, "x")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Reverse", BackendName)
	}

	xla_result, err := xlabuilder.Reverse(xla_x, axes...)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Reverse", BackendName)
	}
	return xla_result, nil
}

// Round returns the Op that represents the output of the corresponding operation.
func (b *Builder) Round(x backends.Op) (backends.Op, error) {
	xla_x, err := b.verifyAndCastOp(x, "x")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Round", BackendName)
	}

	xla_result, err := xlabuilder.Round(xla_x)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Round", BackendName)
	}
	return xla_result, nil
}

// Rsqrt returns the element-wise reciprocal of square root operation 1/sqrt(x).
func (b *Builder) Rsqrt(x backends.Op) (backends.Op, error) {
	xla_x, err := b.verifyAndCastOp(x, "x")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Rsqrt", BackendName)
	}

	xla_result, err := xlabuilder.Rsqrt(xla_x)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Rsqrt", BackendName)
	}
	return xla_result, nil
}

// ScatterMax scatter values from updates pointed by scatterIndices to operand, by taking the Max.
func (b *Builder) ScatterMax(operand, scatterIndices, updates backends.Op, indexVectorAxis int, updateWindowAxes, insertedWindowAxes, scatterAxesToOperandAxes []int, indicesAreSorted, uniqueIndices bool) (backends.Op, error) {
	xla_operand, err := b.verifyAndCastOp(operand, "operand")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed ScatterMax", BackendName)
	}

	xla_scatterIndices, err := b.verifyAndCastOp(scatterIndices, "scatterIndices")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed ScatterMax", BackendName)
	}

	xla_updates, err := b.verifyAndCastOp(updates, "updates")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed ScatterMax", BackendName)
	}

	xla_result, err := xlabuilder.ScatterMax(xla_operand, xla_scatterIndices, xla_updates, indexVectorAxis, updateWindowAxes, insertedWindowAxes, scatterAxesToOperandAxes, indicesAreSorted, uniqueIndices)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed ScatterMax", BackendName)
	}
	return xla_result, nil
}

// ScatterMin scatter values from updates pointed by scatterIndices to operand, by taking the Min.
func (b *Builder) ScatterMin(operand, scatterIndices, updates backends.Op, indexVectorAxis int, updateWindowAxes, insertedWindowAxes, scatterAxesToOperandAxes []int, indicesAreSorted, uniqueIndices bool) (backends.Op, error) {
	xla_operand, err := b.verifyAndCastOp(operand, "operand")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed ScatterMin", BackendName)
	}

	xla_scatterIndices, err := b.verifyAndCastOp(scatterIndices, "scatterIndices")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed ScatterMin", BackendName)
	}

	xla_updates, err := b.verifyAndCastOp(updates, "updates")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed ScatterMin", BackendName)
	}

	xla_result, err := xlabuilder.ScatterMin(xla_operand, xla_scatterIndices, xla_updates, indexVectorAxis, updateWindowAxes, insertedWindowAxes, scatterAxesToOperandAxes, indicesAreSorted, uniqueIndices)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed ScatterMin", BackendName)
	}
	return xla_result, nil
}

// ScatterSum values from updates pointed by scatterIndices to operand.
func (b *Builder) ScatterSum(operand, scatterIndices, updates backends.Op, indexVectorAxis int, updateWindowAxes, insertedWindowAxes, scatterAxesToOperandAxes []int, indicesAreSorted, uniqueIndices bool) (backends.Op, error) {
	xla_operand, err := b.verifyAndCastOp(operand, "operand")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed ScatterSum", BackendName)
	}

	xla_scatterIndices, err := b.verifyAndCastOp(scatterIndices, "scatterIndices")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed ScatterSum", BackendName)
	}

	xla_updates, err := b.verifyAndCastOp(updates, "updates")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed ScatterSum", BackendName)
	}

	xla_result, err := xlabuilder.ScatterSum(xla_operand, xla_scatterIndices, xla_updates, indexVectorAxis, updateWindowAxes, insertedWindowAxes, scatterAxesToOperandAxes, indicesAreSorted, uniqueIndices)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed ScatterSum", BackendName)
	}
	return xla_result, nil
}

// SelectAndScatterMax runs windows (similar to ReduceWindow) over the operand, selects values to updates the output (like ScatterAdd)
// It selects the values in the window such that it works as reverse for ScatterMax.
// See details in https://openxla.org/xla/operation_semantics#selectandscatter
func (b *Builder) SelectAndScatterMax(operand, source backends.Op, windowDimensions, windowStrides []int, paddings [][2]int) (backends.Op, error) {
	xla_operand, err := b.verifyAndCastOp(operand, "operand")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed SelectAndScatterMax", BackendName)
	}

	xla_source, err := b.verifyAndCastOp(source, "source")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed SelectAndScatterMax", BackendName)
	}

	xla_result, err := xlabuilder.SelectAndScatterMax(xla_operand, xla_source, windowDimensions, windowStrides, paddings)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed SelectAndScatterMax", BackendName)
	}
	return xla_result, nil
}

// SelectAndScatterMin runs windows (similar to ReduceWindow) over the operand, selects values to updates the output (like ScatterAdd)
// It selects the values in the window such that it works as reverse for ScatterMin.
// See details in https://openxla.org/xla/operation_semantics#selectandscatter
func (b *Builder) SelectAndScatterMin(operand, source backends.Op, windowDimensions, windowStrides []int, paddings [][2]int) (backends.Op, error) {
	xla_operand, err := b.verifyAndCastOp(operand, "operand")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed SelectAndScatterMin", BackendName)
	}

	xla_source, err := b.verifyAndCastOp(source, "source")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed SelectAndScatterMin", BackendName)
	}

	xla_result, err := xlabuilder.SelectAndScatterMin(xla_operand, xla_source, windowDimensions, windowStrides, paddings)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed SelectAndScatterMin", BackendName)
	}
	return xla_result, nil
}

// ShiftLeft n bits. It implicitly preserves the sign bit, if there is no overflow. So ShiftLeft(-1, 1) = -2.
// The op is created on the same XlaBuilder as used for x0 and x1.
func (b *Builder) ShiftLeft(x0, x1 backends.Op) (backends.Op, error) {
	xla_x0, err := b.verifyAndCastOp(x0, "x0")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed ShiftLeft", BackendName)
	}

	xla_x1, err := b.verifyAndCastOp(x1, "x1")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed ShiftLeft", BackendName)
	}

	xla_result, err := xlabuilder.ShiftLeft(xla_x0, xla_x1)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed ShiftLeft", BackendName)
	}
	return xla_result, nil
}

// ShiftRightArithmetic shifts right by n bits, preserving the sign bit. So ShiftRight(-2, 1) = -1.
// The op is created on the same XlaBuilder as used for x0 and x1.
func (b *Builder) ShiftRightArithmetic(x0, x1 backends.Op) (backends.Op, error) {
	xla_x0, err := b.verifyAndCastOp(x0, "x0")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed ShiftRightArithmetic", BackendName)
	}

	xla_x1, err := b.verifyAndCastOp(x1, "x1")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed ShiftRightArithmetic", BackendName)
	}

	xla_result, err := xlabuilder.ShiftRightArithmetic(xla_x0, xla_x1)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed ShiftRightArithmetic", BackendName)
	}
	return xla_result, nil
}

// ShiftRightLogical shifts right by n bits, destroying the sign bit.
// The op is created on the same XlaBuilder as used for x0 and x1.
func (b *Builder) ShiftRightLogical(x0, x1 backends.Op) (backends.Op, error) {
	xla_x0, err := b.verifyAndCastOp(x0, "x0")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed ShiftRightLogical", BackendName)
	}

	xla_x1, err := b.verifyAndCastOp(x1, "x1")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed ShiftRightLogical", BackendName)
	}

	xla_result, err := xlabuilder.ShiftRightLogical(xla_x0, xla_x1)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed ShiftRightLogical", BackendName)
	}
	return xla_result, nil
}

// Sign returns element-wise +1, +/-0 or -1 depending on the sign of x. It returns NaN if the input is NaN.
func (b *Builder) Sign(x backends.Op) (backends.Op, error) {
	xla_x, err := b.verifyAndCastOp(x, "x")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Sign", BackendName)
	}

	xla_result, err := xlabuilder.Sign(xla_x)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Sign", BackendName)
	}
	return xla_result, nil
}

// Sin returns the Op that represents the output of the corresponding operation.
func (b *Builder) Sin(x backends.Op) (backends.Op, error) {
	xla_x, err := b.verifyAndCastOp(x, "x")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Sin", BackendName)
	}

	xla_result, err := xlabuilder.Sin(xla_x)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Sin", BackendName)
	}
	return xla_result, nil
}

// Slice extracts a sub-array from the input array.
// The sub-array is of the same rank as the input and contains the values inside a bounding box within the input array
// where the dimensions and indices of the bounding box are given as arguments to the slice operation.
// The strides set the input stride of the slice in each axis and must be >= 1.
// It is optional, and if missing it is assumed to be 1 for every dimension.
// Examples:
//
//	Slice(x={0, 1, 2, 3, 4}, starts={2}, limits={4}, strides=nil) -> {2, 3}
//	Slice(x={0, 1, 2, 3, 4}, starts={2}, limits={5}, strides={2}) -> {2, 4}
func (b *Builder) Slice(x backends.Op, starts, limits, strides []int) (backends.Op, error) {
	xla_x, err := b.verifyAndCastOp(x, "x")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Slice", BackendName)
	}

	xla_result, err := xlabuilder.Slice(xla_x, starts, limits, strides)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Slice", BackendName)
	}
	return xla_result, nil
}

// Sqrt returns the Op that represents the output of the corresponding operation.
func (b *Builder) Sqrt(x backends.Op) (backends.Op, error) {
	xla_x, err := b.verifyAndCastOp(x, "x")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Sqrt", BackendName)
	}

	xla_result, err := xlabuilder.Sqrt(xla_x)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Sqrt", BackendName)
	}
	return xla_result, nil
}

// Sub returns the element-wise subtraction of the two values.
// Standard broadcasting rules apply (see documentation).
// The op is created on the same XlaBuilder as used for x0 and x1.
func (b *Builder) Sub(x0, x1 backends.Op) (backends.Op, error) {
	xla_x0, err := b.verifyAndCastOp(x0, "x0")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Sub", BackendName)
	}

	xla_x1, err := b.verifyAndCastOp(x1, "x1")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Sub", BackendName)
	}

	xla_result, err := xlabuilder.Sub(xla_x0, xla_x1)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Sub", BackendName)
	}
	return xla_result, nil
}

// Tanh returns the Op that represents the output of the corresponding operation.
func (b *Builder) Tanh(x backends.Op) (backends.Op, error) {
	xla_x, err := b.verifyAndCastOp(x, "x")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Tanh", BackendName)
	}

	xla_result, err := xlabuilder.Tanh(xla_x)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Tanh", BackendName)
	}
	return xla_result, nil
}

// Transpose axes of x.
// There should be one value in permutations for each axis in x.
// The output will have: output.Shape.Dimension[ii] = x.Shape.Dimension[permutations[i]].
func (b *Builder) Transpose(x backends.Op, permutations ...int) (backends.Op, error) {
	xla_x, err := b.verifyAndCastOp(x, "x")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Transpose", BackendName)
	}

	xla_result, err := xlabuilder.Transpose(xla_x, permutations...)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Transpose", BackendName)
	}
	return xla_result, nil
}

// Where takes element-wise values from onTrue or onFalse depending on the value of condition (expected to be boolean).
func (b *Builder) Where(condition, onTrue, onFalse backends.Op) (backends.Op, error) {
	xla_condition, err := b.verifyAndCastOp(condition, "condition")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Where", BackendName)
	}

	xla_onTrue, err := b.verifyAndCastOp(onTrue, "onTrue")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Where", BackendName)
	}

	xla_onFalse, err := b.verifyAndCastOp(onFalse, "onFalse")
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Where", BackendName)
	}

	xla_result, err := xlabuilder.Where(xla_condition, xla_onTrue, xla_onFalse)
	if err != nil {
		return nil, errors.WithMessagef(err, "Backend %q: failed Where", BackendName)
	}
	return xla_result, nil
}
