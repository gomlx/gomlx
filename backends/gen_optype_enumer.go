// Code generated by "enumer -type=OpType -trimprefix=OpType -output=gen_optype_enumer.go optype.go"; DO NOT EDIT.

package backends

import (
	"fmt"
	"strings"
)

const _OpTypeName = "InvalidParameterConstantIdentityReduceWindowRngBitGeneratorBatchNormForInferenceBatchNormForTrainingBatchNormGradientBitCountAbsAddArgMinMaxBitcastBitwiseAndBitwiseNotBitwiseOrBitwiseXorBroadcastBroadcastInDimClampCeilClzComplexConcatenateConjConvGeneralConvertDTypeCosDivDotDotGeneralDynamicSliceDynamicUpdateSliceEqualEqualTotalOrderErfExpExpm1FFTFloorGatherGreaterOrEqualGreaterOrEqualTotalOrderGreaterThanGreaterThanTotalOrderImagIotaIsFiniteIsNaNLessOrEqualLessOrEqualTotalOrderLessThanLessThanTotalOrderLogLog1pLogicalAndLogicalNotLogicalOrLogicalXorLogisticMaxMinMulNegNotEqualNotEqualTotalOrderPadPowRealReduceBitwiseAndReduceBitwiseOrReduceBitwiseXorReduceLogicalAndReduceLogicalOrReduceLogicalXorReduceMaxReduceMinReduceProductReduceSumRemReshapeReverseRoundRsqrtScatterMaxScatterMinScatterSumSelectAndScatterMaxSelectAndScatterMinSelectAndScatterSumShiftLeftShiftRightArithmeticShiftRightLogicalSignSinSliceSqrtSubTanhTransposeWhereLast"

var _OpTypeIndex = [...]uint16{0, 7, 16, 24, 32, 44, 59, 80, 100, 117, 125, 128, 131, 140, 147, 157, 167, 176, 186, 195, 209, 214, 218, 221, 228, 239, 243, 254, 266, 269, 272, 275, 285, 297, 315, 320, 335, 338, 341, 346, 349, 354, 360, 374, 398, 409, 430, 434, 438, 446, 451, 462, 483, 491, 509, 512, 517, 527, 537, 546, 556, 564, 567, 570, 573, 576, 584, 602, 605, 608, 612, 628, 643, 659, 675, 690, 706, 715, 724, 737, 746, 749, 756, 763, 768, 773, 783, 793, 803, 822, 841, 860, 869, 889, 906, 910, 913, 918, 922, 925, 929, 938, 943, 947}

const _OpTypeLowerName = "invalidparameterconstantidentityreducewindowrngbitgeneratorbatchnormforinferencebatchnormfortrainingbatchnormgradientbitcountabsaddargminmaxbitcastbitwiseandbitwisenotbitwiseorbitwisexorbroadcastbroadcastindimclampceilclzcomplexconcatenateconjconvgeneralconvertdtypecosdivdotdotgeneraldynamicslicedynamicupdatesliceequalequaltotalordererfexpexpm1fftfloorgathergreaterorequalgreaterorequaltotalordergreaterthangreaterthantotalorderimagiotaisfiniteisnanlessorequallessorequaltotalorderlessthanlessthantotalorderloglog1plogicalandlogicalnotlogicalorlogicalxorlogisticmaxminmulnegnotequalnotequaltotalorderpadpowrealreducebitwiseandreducebitwiseorreducebitwisexorreducelogicalandreducelogicalorreducelogicalxorreducemaxreduceminreduceproductreducesumremreshapereverseroundrsqrtscattermaxscatterminscattersumselectandscattermaxselectandscatterminselectandscattersumshiftleftshiftrightarithmeticshiftrightlogicalsignsinslicesqrtsubtanhtransposewherelast"

func (i OpType) String() string {
	if i < 0 || i >= OpType(len(_OpTypeIndex)-1) {
		return fmt.Sprintf("OpType(%d)", i)
	}
	return _OpTypeName[_OpTypeIndex[i]:_OpTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _OpTypeNoOp() {
	var x [1]struct{}
	_ = x[OpTypeInvalid-(0)]
	_ = x[OpTypeParameter-(1)]
	_ = x[OpTypeConstant-(2)]
	_ = x[OpTypeIdentity-(3)]
	_ = x[OpTypeReduceWindow-(4)]
	_ = x[OpTypeRngBitGenerator-(5)]
	_ = x[OpTypeBatchNormForInference-(6)]
	_ = x[OpTypeBatchNormForTraining-(7)]
	_ = x[OpTypeBatchNormGradient-(8)]
	_ = x[OpTypeBitCount-(9)]
	_ = x[OpTypeAbs-(10)]
	_ = x[OpTypeAdd-(11)]
	_ = x[OpTypeArgMinMax-(12)]
	_ = x[OpTypeBitcast-(13)]
	_ = x[OpTypeBitwiseAnd-(14)]
	_ = x[OpTypeBitwiseNot-(15)]
	_ = x[OpTypeBitwiseOr-(16)]
	_ = x[OpTypeBitwiseXor-(17)]
	_ = x[OpTypeBroadcast-(18)]
	_ = x[OpTypeBroadcastInDim-(19)]
	_ = x[OpTypeClamp-(20)]
	_ = x[OpTypeCeil-(21)]
	_ = x[OpTypeClz-(22)]
	_ = x[OpTypeComplex-(23)]
	_ = x[OpTypeConcatenate-(24)]
	_ = x[OpTypeConj-(25)]
	_ = x[OpTypeConvGeneral-(26)]
	_ = x[OpTypeConvertDType-(27)]
	_ = x[OpTypeCos-(28)]
	_ = x[OpTypeDiv-(29)]
	_ = x[OpTypeDot-(30)]
	_ = x[OpTypeDotGeneral-(31)]
	_ = x[OpTypeDynamicSlice-(32)]
	_ = x[OpTypeDynamicUpdateSlice-(33)]
	_ = x[OpTypeEqual-(34)]
	_ = x[OpTypeEqualTotalOrder-(35)]
	_ = x[OpTypeErf-(36)]
	_ = x[OpTypeExp-(37)]
	_ = x[OpTypeExpm1-(38)]
	_ = x[OpTypeFFT-(39)]
	_ = x[OpTypeFloor-(40)]
	_ = x[OpTypeGather-(41)]
	_ = x[OpTypeGreaterOrEqual-(42)]
	_ = x[OpTypeGreaterOrEqualTotalOrder-(43)]
	_ = x[OpTypeGreaterThan-(44)]
	_ = x[OpTypeGreaterThanTotalOrder-(45)]
	_ = x[OpTypeImag-(46)]
	_ = x[OpTypeIota-(47)]
	_ = x[OpTypeIsFinite-(48)]
	_ = x[OpTypeIsNaN-(49)]
	_ = x[OpTypeLessOrEqual-(50)]
	_ = x[OpTypeLessOrEqualTotalOrder-(51)]
	_ = x[OpTypeLessThan-(52)]
	_ = x[OpTypeLessThanTotalOrder-(53)]
	_ = x[OpTypeLog-(54)]
	_ = x[OpTypeLog1p-(55)]
	_ = x[OpTypeLogicalAnd-(56)]
	_ = x[OpTypeLogicalNot-(57)]
	_ = x[OpTypeLogicalOr-(58)]
	_ = x[OpTypeLogicalXor-(59)]
	_ = x[OpTypeLogistic-(60)]
	_ = x[OpTypeMax-(61)]
	_ = x[OpTypeMin-(62)]
	_ = x[OpTypeMul-(63)]
	_ = x[OpTypeNeg-(64)]
	_ = x[OpTypeNotEqual-(65)]
	_ = x[OpTypeNotEqualTotalOrder-(66)]
	_ = x[OpTypePad-(67)]
	_ = x[OpTypePow-(68)]
	_ = x[OpTypeReal-(69)]
	_ = x[OpTypeReduceBitwiseAnd-(70)]
	_ = x[OpTypeReduceBitwiseOr-(71)]
	_ = x[OpTypeReduceBitwiseXor-(72)]
	_ = x[OpTypeReduceLogicalAnd-(73)]
	_ = x[OpTypeReduceLogicalOr-(74)]
	_ = x[OpTypeReduceLogicalXor-(75)]
	_ = x[OpTypeReduceMax-(76)]
	_ = x[OpTypeReduceMin-(77)]
	_ = x[OpTypeReduceProduct-(78)]
	_ = x[OpTypeReduceSum-(79)]
	_ = x[OpTypeRem-(80)]
	_ = x[OpTypeReshape-(81)]
	_ = x[OpTypeReverse-(82)]
	_ = x[OpTypeRound-(83)]
	_ = x[OpTypeRsqrt-(84)]
	_ = x[OpTypeScatterMax-(85)]
	_ = x[OpTypeScatterMin-(86)]
	_ = x[OpTypeScatterSum-(87)]
	_ = x[OpTypeSelectAndScatterMax-(88)]
	_ = x[OpTypeSelectAndScatterMin-(89)]
	_ = x[OpTypeSelectAndScatterSum-(90)]
	_ = x[OpTypeShiftLeft-(91)]
	_ = x[OpTypeShiftRightArithmetic-(92)]
	_ = x[OpTypeShiftRightLogical-(93)]
	_ = x[OpTypeSign-(94)]
	_ = x[OpTypeSin-(95)]
	_ = x[OpTypeSlice-(96)]
	_ = x[OpTypeSqrt-(97)]
	_ = x[OpTypeSub-(98)]
	_ = x[OpTypeTanh-(99)]
	_ = x[OpTypeTranspose-(100)]
	_ = x[OpTypeWhere-(101)]
	_ = x[OpTypeLast-(102)]
}

var _OpTypeValues = []OpType{OpTypeInvalid, OpTypeParameter, OpTypeConstant, OpTypeIdentity, OpTypeReduceWindow, OpTypeRngBitGenerator, OpTypeBatchNormForInference, OpTypeBatchNormForTraining, OpTypeBatchNormGradient, OpTypeBitCount, OpTypeAbs, OpTypeAdd, OpTypeArgMinMax, OpTypeBitcast, OpTypeBitwiseAnd, OpTypeBitwiseNot, OpTypeBitwiseOr, OpTypeBitwiseXor, OpTypeBroadcast, OpTypeBroadcastInDim, OpTypeClamp, OpTypeCeil, OpTypeClz, OpTypeComplex, OpTypeConcatenate, OpTypeConj, OpTypeConvGeneral, OpTypeConvertDType, OpTypeCos, OpTypeDiv, OpTypeDot, OpTypeDotGeneral, OpTypeDynamicSlice, OpTypeDynamicUpdateSlice, OpTypeEqual, OpTypeEqualTotalOrder, OpTypeErf, OpTypeExp, OpTypeExpm1, OpTypeFFT, OpTypeFloor, OpTypeGather, OpTypeGreaterOrEqual, OpTypeGreaterOrEqualTotalOrder, OpTypeGreaterThan, OpTypeGreaterThanTotalOrder, OpTypeImag, OpTypeIota, OpTypeIsFinite, OpTypeIsNaN, OpTypeLessOrEqual, OpTypeLessOrEqualTotalOrder, OpTypeLessThan, OpTypeLessThanTotalOrder, OpTypeLog, OpTypeLog1p, OpTypeLogicalAnd, OpTypeLogicalNot, OpTypeLogicalOr, OpTypeLogicalXor, OpTypeLogistic, OpTypeMax, OpTypeMin, OpTypeMul, OpTypeNeg, OpTypeNotEqual, OpTypeNotEqualTotalOrder, OpTypePad, OpTypePow, OpTypeReal, OpTypeReduceBitwiseAnd, OpTypeReduceBitwiseOr, OpTypeReduceBitwiseXor, OpTypeReduceLogicalAnd, OpTypeReduceLogicalOr, OpTypeReduceLogicalXor, OpTypeReduceMax, OpTypeReduceMin, OpTypeReduceProduct, OpTypeReduceSum, OpTypeRem, OpTypeReshape, OpTypeReverse, OpTypeRound, OpTypeRsqrt, OpTypeScatterMax, OpTypeScatterMin, OpTypeScatterSum, OpTypeSelectAndScatterMax, OpTypeSelectAndScatterMin, OpTypeSelectAndScatterSum, OpTypeShiftLeft, OpTypeShiftRightArithmetic, OpTypeShiftRightLogical, OpTypeSign, OpTypeSin, OpTypeSlice, OpTypeSqrt, OpTypeSub, OpTypeTanh, OpTypeTranspose, OpTypeWhere, OpTypeLast}

var _OpTypeNameToValueMap = map[string]OpType{
	_OpTypeName[0:7]:          OpTypeInvalid,
	_OpTypeLowerName[0:7]:     OpTypeInvalid,
	_OpTypeName[7:16]:         OpTypeParameter,
	_OpTypeLowerName[7:16]:    OpTypeParameter,
	_OpTypeName[16:24]:        OpTypeConstant,
	_OpTypeLowerName[16:24]:   OpTypeConstant,
	_OpTypeName[24:32]:        OpTypeIdentity,
	_OpTypeLowerName[24:32]:   OpTypeIdentity,
	_OpTypeName[32:44]:        OpTypeReduceWindow,
	_OpTypeLowerName[32:44]:   OpTypeReduceWindow,
	_OpTypeName[44:59]:        OpTypeRngBitGenerator,
	_OpTypeLowerName[44:59]:   OpTypeRngBitGenerator,
	_OpTypeName[59:80]:        OpTypeBatchNormForInference,
	_OpTypeLowerName[59:80]:   OpTypeBatchNormForInference,
	_OpTypeName[80:100]:       OpTypeBatchNormForTraining,
	_OpTypeLowerName[80:100]:  OpTypeBatchNormForTraining,
	_OpTypeName[100:117]:      OpTypeBatchNormGradient,
	_OpTypeLowerName[100:117]: OpTypeBatchNormGradient,
	_OpTypeName[117:125]:      OpTypeBitCount,
	_OpTypeLowerName[117:125]: OpTypeBitCount,
	_OpTypeName[125:128]:      OpTypeAbs,
	_OpTypeLowerName[125:128]: OpTypeAbs,
	_OpTypeName[128:131]:      OpTypeAdd,
	_OpTypeLowerName[128:131]: OpTypeAdd,
	_OpTypeName[131:140]:      OpTypeArgMinMax,
	_OpTypeLowerName[131:140]: OpTypeArgMinMax,
	_OpTypeName[140:147]:      OpTypeBitcast,
	_OpTypeLowerName[140:147]: OpTypeBitcast,
	_OpTypeName[147:157]:      OpTypeBitwiseAnd,
	_OpTypeLowerName[147:157]: OpTypeBitwiseAnd,
	_OpTypeName[157:167]:      OpTypeBitwiseNot,
	_OpTypeLowerName[157:167]: OpTypeBitwiseNot,
	_OpTypeName[167:176]:      OpTypeBitwiseOr,
	_OpTypeLowerName[167:176]: OpTypeBitwiseOr,
	_OpTypeName[176:186]:      OpTypeBitwiseXor,
	_OpTypeLowerName[176:186]: OpTypeBitwiseXor,
	_OpTypeName[186:195]:      OpTypeBroadcast,
	_OpTypeLowerName[186:195]: OpTypeBroadcast,
	_OpTypeName[195:209]:      OpTypeBroadcastInDim,
	_OpTypeLowerName[195:209]: OpTypeBroadcastInDim,
	_OpTypeName[209:214]:      OpTypeClamp,
	_OpTypeLowerName[209:214]: OpTypeClamp,
	_OpTypeName[214:218]:      OpTypeCeil,
	_OpTypeLowerName[214:218]: OpTypeCeil,
	_OpTypeName[218:221]:      OpTypeClz,
	_OpTypeLowerName[218:221]: OpTypeClz,
	_OpTypeName[221:228]:      OpTypeComplex,
	_OpTypeLowerName[221:228]: OpTypeComplex,
	_OpTypeName[228:239]:      OpTypeConcatenate,
	_OpTypeLowerName[228:239]: OpTypeConcatenate,
	_OpTypeName[239:243]:      OpTypeConj,
	_OpTypeLowerName[239:243]: OpTypeConj,
	_OpTypeName[243:254]:      OpTypeConvGeneral,
	_OpTypeLowerName[243:254]: OpTypeConvGeneral,
	_OpTypeName[254:266]:      OpTypeConvertDType,
	_OpTypeLowerName[254:266]: OpTypeConvertDType,
	_OpTypeName[266:269]:      OpTypeCos,
	_OpTypeLowerName[266:269]: OpTypeCos,
	_OpTypeName[269:272]:      OpTypeDiv,
	_OpTypeLowerName[269:272]: OpTypeDiv,
	_OpTypeName[272:275]:      OpTypeDot,
	_OpTypeLowerName[272:275]: OpTypeDot,
	_OpTypeName[275:285]:      OpTypeDotGeneral,
	_OpTypeLowerName[275:285]: OpTypeDotGeneral,
	_OpTypeName[285:297]:      OpTypeDynamicSlice,
	_OpTypeLowerName[285:297]: OpTypeDynamicSlice,
	_OpTypeName[297:315]:      OpTypeDynamicUpdateSlice,
	_OpTypeLowerName[297:315]: OpTypeDynamicUpdateSlice,
	_OpTypeName[315:320]:      OpTypeEqual,
	_OpTypeLowerName[315:320]: OpTypeEqual,
	_OpTypeName[320:335]:      OpTypeEqualTotalOrder,
	_OpTypeLowerName[320:335]: OpTypeEqualTotalOrder,
	_OpTypeName[335:338]:      OpTypeErf,
	_OpTypeLowerName[335:338]: OpTypeErf,
	_OpTypeName[338:341]:      OpTypeExp,
	_OpTypeLowerName[338:341]: OpTypeExp,
	_OpTypeName[341:346]:      OpTypeExpm1,
	_OpTypeLowerName[341:346]: OpTypeExpm1,
	_OpTypeName[346:349]:      OpTypeFFT,
	_OpTypeLowerName[346:349]: OpTypeFFT,
	_OpTypeName[349:354]:      OpTypeFloor,
	_OpTypeLowerName[349:354]: OpTypeFloor,
	_OpTypeName[354:360]:      OpTypeGather,
	_OpTypeLowerName[354:360]: OpTypeGather,
	_OpTypeName[360:374]:      OpTypeGreaterOrEqual,
	_OpTypeLowerName[360:374]: OpTypeGreaterOrEqual,
	_OpTypeName[374:398]:      OpTypeGreaterOrEqualTotalOrder,
	_OpTypeLowerName[374:398]: OpTypeGreaterOrEqualTotalOrder,
	_OpTypeName[398:409]:      OpTypeGreaterThan,
	_OpTypeLowerName[398:409]: OpTypeGreaterThan,
	_OpTypeName[409:430]:      OpTypeGreaterThanTotalOrder,
	_OpTypeLowerName[409:430]: OpTypeGreaterThanTotalOrder,
	_OpTypeName[430:434]:      OpTypeImag,
	_OpTypeLowerName[430:434]: OpTypeImag,
	_OpTypeName[434:438]:      OpTypeIota,
	_OpTypeLowerName[434:438]: OpTypeIota,
	_OpTypeName[438:446]:      OpTypeIsFinite,
	_OpTypeLowerName[438:446]: OpTypeIsFinite,
	_OpTypeName[446:451]:      OpTypeIsNaN,
	_OpTypeLowerName[446:451]: OpTypeIsNaN,
	_OpTypeName[451:462]:      OpTypeLessOrEqual,
	_OpTypeLowerName[451:462]: OpTypeLessOrEqual,
	_OpTypeName[462:483]:      OpTypeLessOrEqualTotalOrder,
	_OpTypeLowerName[462:483]: OpTypeLessOrEqualTotalOrder,
	_OpTypeName[483:491]:      OpTypeLessThan,
	_OpTypeLowerName[483:491]: OpTypeLessThan,
	_OpTypeName[491:509]:      OpTypeLessThanTotalOrder,
	_OpTypeLowerName[491:509]: OpTypeLessThanTotalOrder,
	_OpTypeName[509:512]:      OpTypeLog,
	_OpTypeLowerName[509:512]: OpTypeLog,
	_OpTypeName[512:517]:      OpTypeLog1p,
	_OpTypeLowerName[512:517]: OpTypeLog1p,
	_OpTypeName[517:527]:      OpTypeLogicalAnd,
	_OpTypeLowerName[517:527]: OpTypeLogicalAnd,
	_OpTypeName[527:537]:      OpTypeLogicalNot,
	_OpTypeLowerName[527:537]: OpTypeLogicalNot,
	_OpTypeName[537:546]:      OpTypeLogicalOr,
	_OpTypeLowerName[537:546]: OpTypeLogicalOr,
	_OpTypeName[546:556]:      OpTypeLogicalXor,
	_OpTypeLowerName[546:556]: OpTypeLogicalXor,
	_OpTypeName[556:564]:      OpTypeLogistic,
	_OpTypeLowerName[556:564]: OpTypeLogistic,
	_OpTypeName[564:567]:      OpTypeMax,
	_OpTypeLowerName[564:567]: OpTypeMax,
	_OpTypeName[567:570]:      OpTypeMin,
	_OpTypeLowerName[567:570]: OpTypeMin,
	_OpTypeName[570:573]:      OpTypeMul,
	_OpTypeLowerName[570:573]: OpTypeMul,
	_OpTypeName[573:576]:      OpTypeNeg,
	_OpTypeLowerName[573:576]: OpTypeNeg,
	_OpTypeName[576:584]:      OpTypeNotEqual,
	_OpTypeLowerName[576:584]: OpTypeNotEqual,
	_OpTypeName[584:602]:      OpTypeNotEqualTotalOrder,
	_OpTypeLowerName[584:602]: OpTypeNotEqualTotalOrder,
	_OpTypeName[602:605]:      OpTypePad,
	_OpTypeLowerName[602:605]: OpTypePad,
	_OpTypeName[605:608]:      OpTypePow,
	_OpTypeLowerName[605:608]: OpTypePow,
	_OpTypeName[608:612]:      OpTypeReal,
	_OpTypeLowerName[608:612]: OpTypeReal,
	_OpTypeName[612:628]:      OpTypeReduceBitwiseAnd,
	_OpTypeLowerName[612:628]: OpTypeReduceBitwiseAnd,
	_OpTypeName[628:643]:      OpTypeReduceBitwiseOr,
	_OpTypeLowerName[628:643]: OpTypeReduceBitwiseOr,
	_OpTypeName[643:659]:      OpTypeReduceBitwiseXor,
	_OpTypeLowerName[643:659]: OpTypeReduceBitwiseXor,
	_OpTypeName[659:675]:      OpTypeReduceLogicalAnd,
	_OpTypeLowerName[659:675]: OpTypeReduceLogicalAnd,
	_OpTypeName[675:690]:      OpTypeReduceLogicalOr,
	_OpTypeLowerName[675:690]: OpTypeReduceLogicalOr,
	_OpTypeName[690:706]:      OpTypeReduceLogicalXor,
	_OpTypeLowerName[690:706]: OpTypeReduceLogicalXor,
	_OpTypeName[706:715]:      OpTypeReduceMax,
	_OpTypeLowerName[706:715]: OpTypeReduceMax,
	_OpTypeName[715:724]:      OpTypeReduceMin,
	_OpTypeLowerName[715:724]: OpTypeReduceMin,
	_OpTypeName[724:737]:      OpTypeReduceProduct,
	_OpTypeLowerName[724:737]: OpTypeReduceProduct,
	_OpTypeName[737:746]:      OpTypeReduceSum,
	_OpTypeLowerName[737:746]: OpTypeReduceSum,
	_OpTypeName[746:749]:      OpTypeRem,
	_OpTypeLowerName[746:749]: OpTypeRem,
	_OpTypeName[749:756]:      OpTypeReshape,
	_OpTypeLowerName[749:756]: OpTypeReshape,
	_OpTypeName[756:763]:      OpTypeReverse,
	_OpTypeLowerName[756:763]: OpTypeReverse,
	_OpTypeName[763:768]:      OpTypeRound,
	_OpTypeLowerName[763:768]: OpTypeRound,
	_OpTypeName[768:773]:      OpTypeRsqrt,
	_OpTypeLowerName[768:773]: OpTypeRsqrt,
	_OpTypeName[773:783]:      OpTypeScatterMax,
	_OpTypeLowerName[773:783]: OpTypeScatterMax,
	_OpTypeName[783:793]:      OpTypeScatterMin,
	_OpTypeLowerName[783:793]: OpTypeScatterMin,
	_OpTypeName[793:803]:      OpTypeScatterSum,
	_OpTypeLowerName[793:803]: OpTypeScatterSum,
	_OpTypeName[803:822]:      OpTypeSelectAndScatterMax,
	_OpTypeLowerName[803:822]: OpTypeSelectAndScatterMax,
	_OpTypeName[822:841]:      OpTypeSelectAndScatterMin,
	_OpTypeLowerName[822:841]: OpTypeSelectAndScatterMin,
	_OpTypeName[841:860]:      OpTypeSelectAndScatterSum,
	_OpTypeLowerName[841:860]: OpTypeSelectAndScatterSum,
	_OpTypeName[860:869]:      OpTypeShiftLeft,
	_OpTypeLowerName[860:869]: OpTypeShiftLeft,
	_OpTypeName[869:889]:      OpTypeShiftRightArithmetic,
	_OpTypeLowerName[869:889]: OpTypeShiftRightArithmetic,
	_OpTypeName[889:906]:      OpTypeShiftRightLogical,
	_OpTypeLowerName[889:906]: OpTypeShiftRightLogical,
	_OpTypeName[906:910]:      OpTypeSign,
	_OpTypeLowerName[906:910]: OpTypeSign,
	_OpTypeName[910:913]:      OpTypeSin,
	_OpTypeLowerName[910:913]: OpTypeSin,
	_OpTypeName[913:918]:      OpTypeSlice,
	_OpTypeLowerName[913:918]: OpTypeSlice,
	_OpTypeName[918:922]:      OpTypeSqrt,
	_OpTypeLowerName[918:922]: OpTypeSqrt,
	_OpTypeName[922:925]:      OpTypeSub,
	_OpTypeLowerName[922:925]: OpTypeSub,
	_OpTypeName[925:929]:      OpTypeTanh,
	_OpTypeLowerName[925:929]: OpTypeTanh,
	_OpTypeName[929:938]:      OpTypeTranspose,
	_OpTypeLowerName[929:938]: OpTypeTranspose,
	_OpTypeName[938:943]:      OpTypeWhere,
	_OpTypeLowerName[938:943]: OpTypeWhere,
	_OpTypeName[943:947]:      OpTypeLast,
	_OpTypeLowerName[943:947]: OpTypeLast,
}

var _OpTypeNames = []string{
	_OpTypeName[0:7],
	_OpTypeName[7:16],
	_OpTypeName[16:24],
	_OpTypeName[24:32],
	_OpTypeName[32:44],
	_OpTypeName[44:59],
	_OpTypeName[59:80],
	_OpTypeName[80:100],
	_OpTypeName[100:117],
	_OpTypeName[117:125],
	_OpTypeName[125:128],
	_OpTypeName[128:131],
	_OpTypeName[131:140],
	_OpTypeName[140:147],
	_OpTypeName[147:157],
	_OpTypeName[157:167],
	_OpTypeName[167:176],
	_OpTypeName[176:186],
	_OpTypeName[186:195],
	_OpTypeName[195:209],
	_OpTypeName[209:214],
	_OpTypeName[214:218],
	_OpTypeName[218:221],
	_OpTypeName[221:228],
	_OpTypeName[228:239],
	_OpTypeName[239:243],
	_OpTypeName[243:254],
	_OpTypeName[254:266],
	_OpTypeName[266:269],
	_OpTypeName[269:272],
	_OpTypeName[272:275],
	_OpTypeName[275:285],
	_OpTypeName[285:297],
	_OpTypeName[297:315],
	_OpTypeName[315:320],
	_OpTypeName[320:335],
	_OpTypeName[335:338],
	_OpTypeName[338:341],
	_OpTypeName[341:346],
	_OpTypeName[346:349],
	_OpTypeName[349:354],
	_OpTypeName[354:360],
	_OpTypeName[360:374],
	_OpTypeName[374:398],
	_OpTypeName[398:409],
	_OpTypeName[409:430],
	_OpTypeName[430:434],
	_OpTypeName[434:438],
	_OpTypeName[438:446],
	_OpTypeName[446:451],
	_OpTypeName[451:462],
	_OpTypeName[462:483],
	_OpTypeName[483:491],
	_OpTypeName[491:509],
	_OpTypeName[509:512],
	_OpTypeName[512:517],
	_OpTypeName[517:527],
	_OpTypeName[527:537],
	_OpTypeName[537:546],
	_OpTypeName[546:556],
	_OpTypeName[556:564],
	_OpTypeName[564:567],
	_OpTypeName[567:570],
	_OpTypeName[570:573],
	_OpTypeName[573:576],
	_OpTypeName[576:584],
	_OpTypeName[584:602],
	_OpTypeName[602:605],
	_OpTypeName[605:608],
	_OpTypeName[608:612],
	_OpTypeName[612:628],
	_OpTypeName[628:643],
	_OpTypeName[643:659],
	_OpTypeName[659:675],
	_OpTypeName[675:690],
	_OpTypeName[690:706],
	_OpTypeName[706:715],
	_OpTypeName[715:724],
	_OpTypeName[724:737],
	_OpTypeName[737:746],
	_OpTypeName[746:749],
	_OpTypeName[749:756],
	_OpTypeName[756:763],
	_OpTypeName[763:768],
	_OpTypeName[768:773],
	_OpTypeName[773:783],
	_OpTypeName[783:793],
	_OpTypeName[793:803],
	_OpTypeName[803:822],
	_OpTypeName[822:841],
	_OpTypeName[841:860],
	_OpTypeName[860:869],
	_OpTypeName[869:889],
	_OpTypeName[889:906],
	_OpTypeName[906:910],
	_OpTypeName[910:913],
	_OpTypeName[913:918],
	_OpTypeName[918:922],
	_OpTypeName[922:925],
	_OpTypeName[925:929],
	_OpTypeName[929:938],
	_OpTypeName[938:943],
	_OpTypeName[943:947],
}

// OpTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OpTypeString(s string) (OpType, error) {
	if val, ok := _OpTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _OpTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to OpType values", s)
}

// OpTypeValues returns all values of the enum
func OpTypeValues() []OpType {
	return _OpTypeValues
}

// OpTypeStrings returns a slice of all String values of the enum
func OpTypeStrings() []string {
	strs := make([]string, len(_OpTypeNames))
	copy(strs, _OpTypeNames)
	return strs
}

// IsAOpType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i OpType) IsAOpType() bool {
	for _, v := range _OpTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
