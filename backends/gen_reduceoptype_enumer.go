// Code generated by "enumer -type ReduceOpType -trimprefix=ReduceOp -output=gen_reduceoptype_enumer.go builder.go"; DO NOT EDIT.

package backends

import (
	"fmt"
	"strings"
)

const _ReduceOpTypeName = "UndefinedSumProductMaxMin"

var _ReduceOpTypeIndex = [...]uint8{0, 9, 12, 19, 22, 25}

const _ReduceOpTypeLowerName = "undefinedsumproductmaxmin"

func (i ReduceOpType) String() string {
	if i < 0 || i >= ReduceOpType(len(_ReduceOpTypeIndex)-1) {
		return fmt.Sprintf("ReduceOpType(%d)", i)
	}
	return _ReduceOpTypeName[_ReduceOpTypeIndex[i]:_ReduceOpTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ReduceOpTypeNoOp() {
	var x [1]struct{}
	_ = x[ReduceOpUndefined-(0)]
	_ = x[ReduceOpSum-(1)]
	_ = x[ReduceOpProduct-(2)]
	_ = x[ReduceOpMax-(3)]
	_ = x[ReduceOpMin-(4)]
}

var _ReduceOpTypeValues = []ReduceOpType{ReduceOpUndefined, ReduceOpSum, ReduceOpProduct, ReduceOpMax, ReduceOpMin}

var _ReduceOpTypeNameToValueMap = map[string]ReduceOpType{
	_ReduceOpTypeName[0:9]:        ReduceOpUndefined,
	_ReduceOpTypeLowerName[0:9]:   ReduceOpUndefined,
	_ReduceOpTypeName[9:12]:       ReduceOpSum,
	_ReduceOpTypeLowerName[9:12]:  ReduceOpSum,
	_ReduceOpTypeName[12:19]:      ReduceOpProduct,
	_ReduceOpTypeLowerName[12:19]: ReduceOpProduct,
	_ReduceOpTypeName[19:22]:      ReduceOpMax,
	_ReduceOpTypeLowerName[19:22]: ReduceOpMax,
	_ReduceOpTypeName[22:25]:      ReduceOpMin,
	_ReduceOpTypeLowerName[22:25]: ReduceOpMin,
}

var _ReduceOpTypeNames = []string{
	_ReduceOpTypeName[0:9],
	_ReduceOpTypeName[9:12],
	_ReduceOpTypeName[12:19],
	_ReduceOpTypeName[19:22],
	_ReduceOpTypeName[22:25],
}

// ReduceOpTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ReduceOpTypeString(s string) (ReduceOpType, error) {
	if val, ok := _ReduceOpTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ReduceOpTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ReduceOpType values", s)
}

// ReduceOpTypeValues returns all values of the enum
func ReduceOpTypeValues() []ReduceOpType {
	return _ReduceOpTypeValues
}

// ReduceOpTypeStrings returns a slice of all String values of the enum
func ReduceOpTypeStrings() []string {
	strs := make([]string, len(_ReduceOpTypeNames))
	copy(strs, _ReduceOpTypeNames)
	return strs
}

// IsAReduceOpType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ReduceOpType) IsAReduceOpType() bool {
	for _, v := range _ReduceOpTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
