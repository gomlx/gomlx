/***** File generated by ./internal/cmd/notimplemented_generator, based on github.com/gomlx/gomlx/backends/. Don't edit it directly. *****/

package notimplemented

import (
	"github.com/gomlx/gomlx/backends"
	"github.com/gomlx/gomlx/types/shapes"
	"github.com/gomlx/gopjrt/dtypes"
)

// Abs returns the Op that represents the output of the corresponding operation.
func (b Builder) Abs(x backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeAbs)
}

// Add returns the element-wise sum of the two values.
// Standard broadcasting rules apply (see documentation).
func (b Builder) Add(lhs backends.Op, rhs backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeAdd)
}

// ArgMinMax calculates the "argmin" or "argmax" across an axis of the given input array x.
//
// outputDType defines the output of the argmin/argmax, it doesn't need to be the same as the input.
// It's a form of reduction on the given axis, and that axis goes away.
// So the rank of the result is one less than the rank of x.
//
// Examples:
//
//	ArgMinMax(x={{2, 0, 7}, {-3, 4, 2}}, axis=1, isMin=true) -> {1, 0}  // (it chooses the 0 and the -3)
//	ArgMinMax(x={{2, 0, 7}, {-3, 4, 2}}, axis=0, isMin=false) -> {0, 1, 0} // (it choose the 2, 4 and 7)
func (b Builder) ArgMinMax(x backends.Op, axis int, outputDType dtypes.DType, isMin bool) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeArgMinMax)
}

// BitCount returns the number of bits that are set to one.
func (b Builder) BitCount(operand backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeBitCount)
}

// Bitcast performs an elementwise bit-cast operation from a dtype to another dtype.
//
// The bitcast doesn't "convert", rather it just reinterprets the bits from x.DType() to the targetDType.
//
// If x.DType() and targetDType use the same number of bytes (targetDType.Size() == x.DType().Size()),
// the dimensions are not changed, simply the dtype is changed.
//
// If targetDType.Size() > x.DType().Size(), it requires x last axis to have a dimension of
// targetDType.Size() / x.DType().Size(), and the returned shape will trim the last axis.
//
// If targetDType.Size() < x.DType().Size(), the returned shape will have an extra axis in the end, with dimension of
// x.DType().Size() / targetDType.Size().
//
// E.g: Bitcast([1]uint32{0xdeadbeef}, dtypes.UInt16) -> [1][2]uint16{{0xdead, 0xbeef}}
func (b Builder) Bitcast(x backends.Op, targetDType dtypes.DType) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeBitcast)
}

// BitwiseAnd returns the element-wise bitwise AND operation.
func (b Builder) BitwiseAnd(lhs backends.Op, rhs backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeBitwiseAnd)
}

// BitwiseNot returns the element-wise bitwise AND operation.
func (b Builder) BitwiseNot(x backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeBitwiseNot)
}

// BitwiseOr returns the element-wise bitwise OR operation.
func (b Builder) BitwiseOr(lhs backends.Op, rhs backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeBitwiseOr)
}

// BitwiseXor returns the element-wise bitwise XOR operator.
func (b Builder) BitwiseXor(lhs backends.Op, rhs backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeBitwiseXor)
}

// Broadcast prefixes dimensions to an array by duplicating the data in the array.
// See BroadcastInDim for a broadcast in between the axes.
// The new dimensions dims are inserted on the left, i.e., if
// prefixDims has values `{a0, ..., aN}` and the operand shape
// has dimensions {b0, ..., bM} then the shape of the output has
// dimensions {a0, ..., aN, b0, ..., bM}.
// The new dimensions id into copies of the operand, i.e.
//
//	output[i0, ..., iN, j0, ..., jM] = operand[j0, ..., jM]
func (b Builder) Broadcast(x backends.Op, prefixDims ...int) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeBroadcast)
}

// BroadcastInDim broadcasts x to an output with the given shape.
// broadcastAxes has an output axes value for each x axes (len(broadcastAxes) == x.Shape.Rank()).
// The i-th axis of x is mapped to the broadcastAxes[i]-th dimension of the output.
// broadcastAxes must be also increasing: this operation cannot be used to transpose axes, it will only
// broadcast and introduce new axes in-between.
// This also requires that the i-th input axis is either 1 or is the same as the
// output dimension it's broadcasting into.
// For example, say operand `x = (s32)[2]{1, 2}`; outputShape = `(s32)[2,2]`:
//   - Specifying []int{1} as broadcastAxes will generate output
//     {{1, 2},
//     {1, 2}}
//   - On the other hand, specifying []int{0} as broadcastAxes
//     will generate output
//     {{1 , 1},
//     {2 , 2}}
func (b Builder) BroadcastInDim(x backends.Op, outputShape shapes.Shape, broadcastAxes []int) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeBroadcastInDim)
}

// Ceil returns the Op that represents the output of the corresponding operation.
func (b Builder) Ceil(x backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeCeil)
}

// Clamp returns the element-wise clamping operation.
//
// The values max and min can either be a scalar or have the same shape as x.
func (b Builder) Clamp(min backends.Op, a backends.Op, max backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeClamp)
}

// Clz returns element-wise the "count leading zeros" bits of input node x -- for integer values.
func (b Builder) Clz(x backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeClz)
}

// Complex returns the complex number taking x0 as the real part and x1 as the imaginary part.
// The real (x0) and imaginary (x1) must have the same dtype, and they must be either `dtypes.Float32` or
// `dtypes.Float64`.
// The output will be either `dtypes.Complex64` or `dtypes.Complex128`, depending on x0 and x1 dtypes.
// The shapes of `real` or `imaginary` must be the same, or one must be a scalar, in which case
// the value is broadcast to every other value.
func (b Builder) Complex(lhs backends.Op, rhs backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeComplex)
}

// Concatenate results on the given axis.
// All axes that are not being concatenated must match dimensions.
// It doesn't work with scalars -- use ExpandDims.
// If there is only one operand, it is returned and this is a no-op.
func (b Builder) Concatenate(axis int, operands ...backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeConcatenate)
}

// Conj returns the conjugate of a complex number. E.g: Conj(1+3i) = 1-3i
func (b Builder) Conj(x backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeConj)
}

// ConvGeneral is a generic Convolution operation with support for:
// - Arbitrary number of spatial axes.
// - Arbitrary transposition of axes.
// - Strides and padding.
// - Dilations of the input.
// - Dilations of the kernel, aka. atrous convolution.
// - Channels grouping (on the input channels).
// - Batch grouping.
// Some details in https://www.tensorflow.org/xla/operation_semantics#convwithgeneralpadding_convolution.
// There operand and filter are called lhs and rhs.
// (XLA documentation is unfortunately poor, much is guess-work).
// Also useful, https://arxiv.org/pdf/1603.07285v1.pdf.
// Note:
//   - Another common term for "channels" is "features".
//   - "Kernel" is also commonly called "weights" or "filters".
func (b Builder) ConvGeneral(input backends.Op, kernel backends.Op, axes backends.ConvolveAxesConfig, strides []int, paddings [][2]int, inputDilations []int, kernelDilations []int, channelGroupCount int, batchGroupCount int) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeConvGeneral)
}

// ConvertDType of x to dtype.
func (b Builder) ConvertDType(x backends.Op, dtype dtypes.DType) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeConvertDType)
}

// Cos returns the Op that represents the output of the corresponding operation.
func (b Builder) Cos(x backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeCos)
}

// Div returns the element-wise division of the two values.
// Standard broadcasting rules apply (see documentation).
func (b Builder) Div(lhs backends.Op, rhs backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeDiv)
}

// Dot returns the "dot product" operation.
// The exact semantics of this operation depend on the ranks of the operands:
// | Input | Output | Semantics |
// | vector [n] dot vector [n] | scalar | vector dot product |
// | matrix [m x k] dot vector [k] | vector [m]	matrix-vector multiplication |
// | matrix [m x k] dot matrix [k x n] | matrix [m x n] | matrix-matrix multiplication |
// The operation performs sum of products over the second dimension of x0 (or the first if it has rank 1) and
// the first dimension of x1.
// These are the "contracted" dimensions.
// The contracted dimensions of x0 and x1 must be of the same size.
// In practice, it can be used to perform dot products between vectors, vector/matrix multiplications, or
// matrix/matrix multiplications.
func (b Builder) Dot(lhs backends.Op, rhs backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeDot)
}

// DotGeneral takes as input lhs (left-hand-side) and rhs (right-hand-side) specifications
// for a general vector product -- a generalized "Einsum". Each axis can be:
//
//   - Just aligned (batch axes), so the output has the same axes as the inputs. The dimensions
//     must match in lhs and rhs.
//   - Crossed (default), in which case the output is the combination (concatenation) of the
//     dimensions.
//   - Contracted (contracting axes), where the output does multiply the values and reduce sum
//     those dimensions.
//
// It follows that the resulting dimension number starts with the batch dimension, then the 'lhs'
// non-contracting/non-batch dimension, and finally the 'rhs' non-contracting/non-batch dimension.
// It provides the basic means of implementing Einsum.
func (b Builder) DotGeneral(lhs backends.Op, lhsContractingAxes []int, lhsBatchAxes []int, rhs backends.Op, rhsContractingAxes []int, rhsBatchAxes []int) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeDotGeneral)
}

// DynamicSlice extracts a subarray from the input array at dynamic start_indices.
// The size of the slice in each axis is passed in sliceDims, which specify the slice
// intervals for each axis: [start, start + size).
// The shape of startIndices must be rank == 1, with dimension size equal to the rank of operand.
// See description in https://openxla.org/xla/operation_semantics#dynamicslice
func (b Builder) DynamicSlice(operand backends.Op, startIndices []backends.Op, sliceDims []int) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeDynamicSlice)
}

// DynamicUpdateSlice returns the operand with slice updates from update overwritten
// at startIndices.
//
// The shape of update determines the shape of result's updated slices.
//
// The shape of startIndices must be rank == 1, with dimension size equal to the rank of operand.
// See description in https://openxla.org/xla/operation_semantics#dynamicupdateslice
func (b Builder) DynamicUpdateSlice(operand backends.Op, update backends.Op, startIndices []backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeDynamicUpdateSlice)
}

// Equal performs element-wise equality check, returns boolean results with the same dimensions as input.
func (b Builder) Equal(lhs backends.Op, rhs backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeEqual)
}

// EqualTotalOrder returns the element-wise operation.
// Standard broadcasting rules apply (see documentation).
// The "TotalOrder" version of the operation enforces `-NaN < -Inf < -Finite < -0 < +0 < +Finite < +Inf < +NaN`.
func (b Builder) EqualTotalOrder(lhs backends.Op, rhs backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeEqualTotalOrder)
}

// Erf returns the "error function", defined as erf(x) = 2/Pi * \int_{0}^{x}{e^{-t^2}dt}.
func (b Builder) Erf(x backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeErf)
}

// Exp returns the Op that represents the output of the corresponding operation.
func (b Builder) Exp(x backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeExp)
}

// Expm1 returns the Op that represents the output of the corresponding operation.
func (b Builder) Expm1(x backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeExpm1)
}

// FFT calls the XLA FFT operation, which implements {Forward, Inverse} x {Complex, Real} versions.
// See documentation in https://www.tensorflow.org/xla/operation_semantics.
// Underlying, CPU FFT is backed by Eigen's TensorFFT and GPU FFT uses cuFFT.
func (b Builder) FFT(operand backends.Op, fftType backends.FFTType, fftLength []int) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeFFT)
}

// Floor returns the Op that represents the output of the corresponding operation.
func (b Builder) Floor(x backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeFloor)
}

// Gather is a powerful but cumbersome Gather operation offered by XLA.
// Full details in https://www.tensorflow.org/xla/operation_semantics#gather.
// (Warning: it's circular and cumbersome)
//
// The output of Gather has the same DType of the operand, from where we are pulling the data.
//
// Its output shape will be composed of 2 parts:
//
//   - Batch axes: they come from the axes of startIndices, except the "indexVectorAxis" (usually the last)
//     that is used as the indices into the operand. (*)
//   - "Offset axes": these are axes that come from the operand, the sizes given by sliceSizes.
//     Notice that if sliceSizes for an axis is 1, and that axis is present in the collapsedSliceAxes list, this
//     axis gets omitted in the output.
//
// So in general output.Rank() = startIndices.Rank() - 1 + len(offsetAxes).
//
// (*) One exception is if indexVectorAxis == startIndices.Rank(), in which case we assume there is an
// extra virtual axis in startIndices of size 1, in which case output.Rank() = startIndices.Rank() + len(offsetAxes).
//
// Arguments:
//   - operand: the values from where we are gathering. The output DType will follow the operand one.
//   - startIndices: are the indices we want to gather. The axis pointed by indexVector
//     lists the indices of the slice to be gathered in the operand array (their values are mapped to the axis
//     in the operand according to startIndexMap).
//     All other axes are "batch dimensions" and they will have equivalent axes (same dimensions) in the output.
//   - indexVectorAxis: which of the axis in startIndices is collected and used as the start index for slices
//     to be gathered in the operand.
//     It is typically the last axis of startIndices, so startIndices.Shape.Rank()-1.
//     There is a special case where indexVectorAxis == startIndices.Rank() in which case we assume there is an
//     extra virtual axis in startIndices of size 1, in which case output.Rank() = startIndices.Rank() + len(offsetAxes).
//   - offsetOutputAxes: axes in the _output_ (not on the operand) that will hold the "offset slices", slices that are not
//     collapsed. It points in which position (axis) in the output these slices should show up. Any axis in sliceSizes
//     that is > 1 must feature here.
//     Notice all axes in the operand will either become an "offset axis" in the output, if their slice size > 1,
//     of optionally collapsed (or "squeezed") in the output, if their slice size == 1. We map the axes in the output
//     (given in offsetAxes) to the axes in the operand (the axes not present in collapsedSliceAxes) sequentially.
//     One must have Rank(operand) == len(collapsedSliceAxes) + len(offsetAxes).
//   - collapsedSliceAxes: for sliceSizes that are 1 in the operand, one may not want to include them in the output.
//     The _operand_ axes included here are marked to be collapsed (removed) in the output. Notice, the corresponding
//     value in sliceSizes must be 1.
//     One must have Rank(operand) == len(collapsedSliceAxes) + len(offsetOutputAxes).
//   - startIndexMap: this maps which value in startIndices is used for which axis index in the slice to be gathered.
//     Notice len(startIndexMap) must match the startIndices.Shape().Dimensions[indexVectorAxis].
//     E.g: if startIndices.shape=(2, 3), indexVectorAxis=1, and operand.rank=4 and startIndexMap=[]int{0, 1, 2},
//     this mean each row of the startIndices will point to the first 3 axis (0,1 and 2) in operand.
//     In many cases this is [0, 1, 2, ..., operand.Shape.Rank()-1], that is, each "index vector" fully defines
//     an element on the operand. In some this is only a prefix of the operand's rank.
//     For those axis in the operand not explicitly set (so if len(startIndexMap) < operand.Rank()), the corresponding
//     axis start index is considered to be 0, and one sets the sliceSizes to take the slice one wants (typically the
//     full slice).
//   - sliceSizes: once the start index from where to gather is resolved, this defines how much data in each axis
//     to gather. The "offset" output axes (see above) will have dimensions equal to this number for not axes that
//     are not collapsed.
//   - indicesAreSorted: can be set to true if its guaranteed that startIndices are sorted (in ascending order,
//     after scattering its values according to start_index_map) by the user. This allows for some optimizations
//     in some platforms.
func (b Builder) Gather(operand backends.Op, startIndices backends.Op, indexVectorAxis int, offsetOutputAxes []int, collapsedSliceAxes []int, startIndexMap []int, sliceSizes []int, indicesAreSorted bool) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeGather)
}

// GreaterOrEqual performs element-wise comparison, returns boolean results with the same dimensions as input.
func (b Builder) GreaterOrEqual(lhs backends.Op, rhs backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeGreaterOrEqual)
}

// GreaterOrEqualTotalOrder returns the element-wise operation.
// Standard broadcasting rules apply (see documentation).
// The "TotalOrder" version of the operation enforces `-NaN < -Inf < -Finite < -0 < +0 < +Finite < +Inf < +NaN`.
func (b Builder) GreaterOrEqualTotalOrder(lhs backends.Op, rhs backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeGreaterOrEqualTotalOrder)
}

// GreaterThan performs element-wise comparison, returns boolean results with the same dimensions as input.
func (b Builder) GreaterThan(lhs backends.Op, rhs backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeGreaterThan)
}

// GreaterThanTotalOrder returns the element-wise operation.
// Standard broadcasting rules apply (see documentation).
// The "TotalOrder" version of the operation enforces `-NaN < -Inf < -Finite < -0 < +0 < +Finite < +Inf < +NaN`.
func (b Builder) GreaterThanTotalOrder(lhs backends.Op, rhs backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeGreaterThanTotalOrder)
}

// Imag returns the imaginary part of a complex number. It returns 0 if the x is a float number.
func (b Builder) Imag(x backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeImag)
}

// Iota creates a constant of the given shape with increasing numbers (starting from 0)
// on the given axis. So Iota([2,2], 1) returns [[0 1][0 1]], while Iota([2,2], 0)
// returns [[0 0][1 1]].
func (b Builder) Iota(shape shapes.Shape, iotaAxis int) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeIota)
}

// IsFinite tests whether each element of operand is finite, i.e., is not positive or negative infinity, and is not NaN.
// It returns an array of boolean values with the same shape as the input, where each element is true if and only if
// the corresponding input element is finite.
func (b Builder) IsFinite(x backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeIsFinite)
}

// LessOrEqual performs element-wise comparison, returns boolean results with the same dimensions as input.
func (b Builder) LessOrEqual(lhs backends.Op, rhs backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeLessOrEqual)
}

// LessOrEqualTotalOrder returns the element-wise operation.
// Standard broadcasting rules apply (see documentation).
// The "TotalOrder" version of the operation enforces `-NaN < -Inf < -Finite < -0 < +0 < +Finite < +Inf < +NaN`.
func (b Builder) LessOrEqualTotalOrder(lhs backends.Op, rhs backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeLessOrEqualTotalOrder)
}

// LessThan performs element-wise comparison, returns boolean results with the same dimensions as input.
func (b Builder) LessThan(lhs backends.Op, rhs backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeLessThan)
}

// LessThanTotalOrder returns the element-wise operation.
// Standard broadcasting rules apply (see documentation).
// The "TotalOrder" version of the operation enforces `-NaN < -Inf < -Finite < -0 < +0 < +Finite < +Inf < +NaN`.
func (b Builder) LessThanTotalOrder(lhs backends.Op, rhs backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeLessThanTotalOrder)
}

// Log returns the Op that represents the output of the corresponding operation.
func (b Builder) Log(x backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeLog)
}

// Log1p returns the expression log(x+1).
func (b Builder) Log1p(x backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeLog1p)
}

// LogicalAnd returns the element-wise logical AND operation.
func (b Builder) LogicalAnd(lhs backends.Op, rhs backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeLogicalAnd)
}

// LogicalNot returns the Op that represents the output of the corresponding operation.
func (b Builder) LogicalNot(x backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeLogicalNot)
}

// LogicalOr returns the element-wise logical OR operation.
func (b Builder) LogicalOr(lhs backends.Op, rhs backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeLogicalOr)
}

// LogicalXor returns the element-wise logical XOR operator.
func (b Builder) LogicalXor(lhs backends.Op, rhs backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeLogicalXor)
}

// Logistic returns the element-wise expression 1/(1+exp(-x)). Also known as the Sigmoid function.
func (b Builder) Logistic(x backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeLogistic)
}

// Max returns the element-wise highest value among the two.
func (b Builder) Max(lhs backends.Op, rhs backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeMax)
}

// Min returns the element-wise smallest value among the two.
func (b Builder) Min(lhs backends.Op, rhs backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeMin)
}

// Mul returns the element-wise multiplication of the two values.
// Standard broadcasting rules apply (see documentation).
func (b Builder) Mul(lhs backends.Op, rhs backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeMul)
}

// Neg returns the Op that represents the output of the corresponding operation.
func (b Builder) Neg(x backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeNeg)
}

// NotEqual performs element-wise inequality check, returns boolean results with the same dimensions as input.
func (b Builder) NotEqual(lhs backends.Op, rhs backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeNotEqual)
}

// NotEqualTotalOrder returns the element-wise operation.
// Standard broadcasting rules apply (see documentation).
// The "TotalOrder" version of the operation enforces `-NaN < -Inf < -Finite < -0 < +0 < +Finite < +Inf < +NaN`.
func (b Builder) NotEqualTotalOrder(lhs backends.Op, rhs backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeNotEqualTotalOrder)
}

// Pad injects padding on the start, end, or interior (in between each element) of the given operand.
// There must be at most `operand.Rank()` axesConfig values. Missing PadAxis are assumed to be zeros,
// that is, no padding for those axes.
func (b Builder) Pad(x backends.Op, fillValue backends.Op, axesConfig ...backends.PadAxis) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypePad)
}

// Pow returns the Op that represents the output of the corresponding operation.
func (b Builder) Pow(lhs backends.Op, rhs backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypePow)
}

// Real return the real part of a complex number. It returns x if the x is a float number.
func (b Builder) Real(x backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeReal)
}

// ReduceBitwiseAnd is a shortcut for Reduce with the proper computation and initial value to reduce x on the given axes, by taking the bitwise/logical And of the reduced axes.
// If no axes are given, it reduces the full array.
func (b Builder) ReduceBitwiseAnd(x backends.Op, axes ...int) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeReduceBitwiseAnd)
}

// ReduceBitwiseOr is a shortcut for Reduce with the proper computation and initial value to reduce x on the given axes, by taking the bitwise/logical Or of the reduced axes.
// If no axes are given, it reduces the full array.
func (b Builder) ReduceBitwiseOr(x backends.Op, axes ...int) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeReduceBitwiseOr)
}

// ReduceBitwiseXor is a shortcut for Reduce with the proper computation and initial value to reduce x on the given axes, by taking the bitwise/logical Xor of the reduced axes.
// If no axes are given, it reduces the full array.
func (b Builder) ReduceBitwiseXor(x backends.Op, axes ...int) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeReduceBitwiseXor)
}

// ReduceLogicalAnd is a shortcut for Reduce with the proper computation and initial value to reduce x on the given axes, by taking the bitwise/logical And of the reduced axes.
// If no axes are given, it reduces the full array.
func (b Builder) ReduceLogicalAnd(x backends.Op, axes ...int) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeReduceLogicalAnd)
}

// ReduceLogicalOr is a shortcut for Reduce with the proper computation and initial value to reduce x on the given axes, by taking the bitwise/logical Or of the reduced axes.
// If no axes are given, it reduces the full array.
func (b Builder) ReduceLogicalOr(x backends.Op, axes ...int) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeReduceLogicalOr)
}

// ReduceLogicalXor is a shortcut for Reduce with the proper computation and initial value to reduce x on the given axes, by taking the bitwise/logical Xor of the reduced axes.
// If no axes are given, it reduces the full array.
func (b Builder) ReduceLogicalXor(x backends.Op, axes ...int) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeReduceLogicalXor)
}

// ReduceMax is a shortcut for Reduce with the proper computation and initial value to reduce x on the given axes, by taking the max value.
// If no axes are given, it reduces the full array.
func (b Builder) ReduceMax(x backends.Op, axes ...int) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeReduceMax)
}

// ReduceMin is a shortcut for Reduce with the proper computation and initial value to reduce x on the given axes, by taking the min value.
// If no axes are given, it reduces the full array.
func (b Builder) ReduceMin(x backends.Op, axes ...int) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeReduceMin)
}

// ReduceProduct is a shortcut for Reduce with the proper computation and initial value to reduce x on the given axes, by taking the product of the reduced axes.
// If no axes are given, it reduces the full array.
func (b Builder) ReduceProduct(x backends.Op, axes ...int) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeReduceProduct)
}

// ReduceSum is a shortcut for Reduce with the proper computation and initial value to reduce x on the given axes, by taking the sum of the reduced axes.
// If no axes are given, it reduces the full array.
func (b Builder) ReduceSum(x backends.Op, axes ...int) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeReduceSum)
}

// Rem returns the remainder operation, also known as modulo (or Mod for short).
// Notice despite the name XLA implements Mod not IEEE754 Remainder operation.
func (b Builder) Rem(lhs backends.Op, rhs backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeRem)
}

// Reshape reshapes x to the new dimensions.
// Total size cannot change, it's just a "reinterpretation" of the same flat data.
// The dtype remains the same, see ConvertDType to actually convert the values.
func (b Builder) Reshape(x backends.Op, dimensions ...int) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeReshape)
}

// Reverse returns x with the values for the given dimensions reversed, that is,
// the value indexed at `i` will be swapped with the value at indexed `(dimension_size - 1 - i)`.
// The shape remains the same.
func (b Builder) Reverse(x backends.Op, axes ...int) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeReverse)
}

// Round returns the Op that represents the output of the corresponding operation.
func (b Builder) Round(x backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeRound)
}

// Rsqrt returns the element-wise reciprocal of square root operation 1/sqrt(x).
func (b Builder) Rsqrt(x backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeRsqrt)
}

// ScatterMax scatter values from updates pointed by scatterIndices to operand, by taking the Max.
func (b Builder) ScatterMax(operand backends.Op, scatterIndices backends.Op, updates backends.Op, indexVectorAxis int, updateWindowAxes []int, insertedWindowAxes []int, scatterAxesToOperandAxes []int, indicesAreSorted bool, uniqueIndices bool) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeScatterMax)
}

// ScatterMin scatter values from updates pointed by scatterIndices to operand, by taking the Min.
func (b Builder) ScatterMin(operand backends.Op, scatterIndices backends.Op, updates backends.Op, indexVectorAxis int, updateWindowAxes []int, insertedWindowAxes []int, scatterAxesToOperandAxes []int, indicesAreSorted bool, uniqueIndices bool) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeScatterMin)
}

// ScatterSum values from updates pointed by scatterIndices to operand.
func (b Builder) ScatterSum(operand backends.Op, scatterIndices backends.Op, updates backends.Op, indexVectorAxis int, updateWindowAxes []int, insertedWindowAxes []int, scatterAxesToOperandAxes []int, indicesAreSorted bool, uniqueIndices bool) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeScatterSum)
}

// SelectAndScatterMax runs windows (similar to ReduceWindow) over the operand, selects values to updates the output (like ScatterAdd)
// It selects the values in the window such that it works as reverse for a PoolMax operation.
// See details in https://openxla.org/xla/operation_semantics#selectandscatter
func (b Builder) SelectAndScatterMax(operand backends.Op, source backends.Op, windowDimensions []int, windowStrides []int, paddings [][2]int) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeSelectAndScatterMax)
}

// SelectAndScatterMin runs windows (similar to ReduceWindow) over the operand, selects values to updates the output (like ScatterAdd)
// It selects the values in the window such that it works as reverse for a PoolMin operation.
// See details in https://openxla.org/xla/operation_semantics#selectandscatter
func (b Builder) SelectAndScatterMin(operand backends.Op, source backends.Op, windowDimensions []int, windowStrides []int, paddings [][2]int) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeSelectAndScatterMin)
}

// SelectAndScatterSum runs windows (similar to ReduceWindow) over the operand, selects values to updates the output (like ScatterAdd)
// It selects the values in the window such that it works as reverse for a PoolSum operation.
// See details in https://openxla.org/xla/operation_semantics#selectandscatter
func (b Builder) SelectAndScatterSum(operand backends.Op, source backends.Op, windowDimensions []int, windowStrides []int, paddings [][2]int) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeSelectAndScatterSum)
}

// ShiftLeft n bits. It implicitly preserves the sign bit, if there is no overflow. So ShiftLeft(-1, 1) = -2.
func (b Builder) ShiftLeft(lhs backends.Op, rhs backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeShiftLeft)
}

// ShiftRightArithmetic shifts right by n bits, preserving the sign bit. So ShiftRight(-2, 1) = -1.
func (b Builder) ShiftRightArithmetic(lhs backends.Op, rhs backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeShiftRightArithmetic)
}

// ShiftRightLogical shifts right by n bits, destroying the sign bit.
func (b Builder) ShiftRightLogical(lhs backends.Op, rhs backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeShiftRightLogical)
}

// Sign returns element-wise +1, +/-0 or -1 depending on the sign of x. It returns NaN if the input is NaN.
func (b Builder) Sign(x backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeSign)
}

// Sin returns the Op that represents the output of the corresponding operation.
func (b Builder) Sin(x backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeSin)
}

// Slice extracts a sub-array from the input array.
// The sub-array is of the same rank as the input and contains the values inside a bounding box within the input array
// where the dimensions and indices of the bounding box are given as arguments to the slice operation.
// The strides set the input stride of the slice in each axis and must be >= 1.
// It is optional, and if missing it is assumed to be 1 for every dimension.
// Examples:
//
//	Slice(x={0, 1, 2, 3, 4}, starts={2}, limits={4}, strides=nil) -> {2, 3}
//	Slice(x={0, 1, 2, 3, 4}, starts={2}, limits={5}, strides={2}) -> {2, 4}
func (b Builder) Slice(x backends.Op, starts []int, limits []int, strides []int) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeSlice)
}

// Sqrt returns the Op that represents the output of the corresponding operation.
func (b Builder) Sqrt(x backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeSqrt)
}

// Sub returns the element-wise subtraction of the two values.
// Standard broadcasting rules apply (see documentation).
func (b Builder) Sub(lhs backends.Op, rhs backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeSub)
}

// Tanh returns the Op that represents the output of the corresponding operation.
func (b Builder) Tanh(x backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeTanh)
}

// Transpose axes of x.
// There should be one value in permutations for each axis in x.
// The output will have: output.Shape.Dimension[ii] = x.Shape.Dimension[permutations[i]].
func (b Builder) Transpose(x backends.Op, permutations ...int) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeTranspose)
}

// Where takes element-wise values from onTrue or onFalse depending on the value of condition (expected to be boolean).
func (b Builder) Where(condition backends.Op, onTrue backends.Op, onFalse backends.Op) (backends.Op, error) {
	return nil, b.baseErrFn(backends.OpTypeWhere)
}
