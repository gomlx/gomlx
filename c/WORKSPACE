load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

# Used for building rules for .tar.gz files.
http_archive(
    name = "rules_pkg",
    sha256 = "335632735e625d408870ec3e361e192e99ef7462315caa887417f4d88c4c8fb8",
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/rules_pkg/releases/download/0.9.0/rules_pkg-0.9.0.tar.gz",
        "https://github.com/bazelbuild/rules_pkg/releases/download/0.9.0/rules_pkg-0.9.0.tar.gz",
    ],
)

load("@rules_pkg//:deps.bzl", "rules_pkg_dependencies")

rules_pkg_dependencies()

# Bazel Skylib, required by llvm.
SKYLIB_VERSION = "1.3.0"

http_archive(
    name = "bazel_skylib",
    sha256 = "74d544d96f4a5bb630d465ca8bbcfe231e3594e5aae57e1edbf17a6eb3ca2506",
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/bazel-skylib/releases/download/{version}/bazel-skylib-{version}.tar.gz".format(version = SKYLIB_VERSION),
        "https://github.com/bazelbuild/bazel-skylib/releases/download/{version}/bazel-skylib-{version}.tar.gz".format(version = SKYLIB_VERSION),
    ],
)

# OpenXLA XLA: no releases yet, so we choose a specific commit version.
# Version should match the one in bazel.sh.
# Notice bazel.sh scrape the line below for the OpenXLA version, the format
# of the line should remain the same (the hash in between quotes), or bazel.sh
# must be changed accordingly.
# = "0d9a1dbc2b02a316afbae3e3c9b4083dc16b894b"  # From 2023-03-30
# = "cf0515f724bdbd693b86c5c5b3e01e91eb6ef6be"  # From 2023-04-28
# = "2fc2bc05cc8aa04c0902555ab2f9f817c41886c3"  # From 2023-07-10
OPENXLA_XLA_COMMIT_HASH = "4f8381651977dff16b1d86bb4b198eb733c5f478"  # From 2023-10-22

http_archive(
    name = "xla",
    # sha256 = "c86b68ce16b08ba1287c641b9790f5ba7944ebbfe7218710f11827c2a65569f4",  # From 2023-03-30
    # sha256 = "e05e41cd1d968d0bbacf32f9c2ccee6b5f783a7597b6e6668756953282cf90b9",  # From 2023-04-28
    # sha256 = "a2c905c02d2e9fa44109d163b7e8adedbb56b2f241a2bd95a962d549834f161e",  # From 2023-07-10
    sha256 = "980e86702bd5a7722ec3ccd2412714ab62dbf0e2d58251af86ec60e1d832579c",  # From 2023-10-22
    strip_prefix = "xla-" + OPENXLA_XLA_COMMIT_HASH,
    urls = [
        "https://github.com/openxla/xla/archive/{hash}.zip".format(hash = OPENXLA_XLA_COMMIT_HASH),
    ],
)

# gperftools with tcmalloc.
GPERFTOOLS_VERSION = "2.10"

http_archive(
    name = "gperftools",
    build_file = "//deps:gperftools.BUILD",
    sha256 = "83e3bfdd28b8bcf53222c3798d4d395d52dadbbae59e8730c4a6d31a9c3732d8",
    strip_prefix = "gperftools-{version}".format(version = GPERFTOOLS_VERSION),
    urls = [
        "https://github.com/gperftools/gperftools/releases/download/gperftools-{version}/gperftools-{version}.tar.gz".format(version = GPERFTOOLS_VERSION),
    ],
)

# Create @tsl repository.
load("@xla//third_party:repo.bzl", "tf_vendored")

tf_vendored(
    name = "tsl",
    relpath = "third_party/tsl",
)

# Initialize the XLA repository and all dependencies.
#
# The cascade of load() statements and xla_workspace?() calls works around the
# restriction that load() statements need to be at the top of .bzl files.
# E.g. we can not retrieve a new repository with http_archive and then load()
# a macro from that repository in the same file.
load("@xla//:workspace4.bzl", "xla_workspace4")

xla_workspace4()

load("@xla//:workspace3.bzl", "xla_workspace3")

xla_workspace3()

load("@xla//:workspace2.bzl", "xla_workspace2")

xla_workspace2()

# Make @local_config_cuda workspace available.
load("@xla//third_party/gpus:cuda_configure.bzl", "cuda_configure")

cuda_configure(name = "local_config_cuda")

load("@xla//:workspace1.bzl", "xla_workspace1")

xla_workspace1()

load("@xla//:workspace0.bzl", "xla_workspace0")

xla_workspace0()
