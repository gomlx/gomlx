<<<<<<< HEAD:pkg/ml/exec/gen_builderiface.go
<<<<<<<< HEAD:pkg/ml/model/gen_builderiface.go
package model
========
package exec
>>>>>>>> b1bebb70fa399f07e42a4df4a8b4735919894d8e:pkg/ml/exec/gen_builderiface.go
=======
package models
>>>>>>> parent of b1bebb7 (Middle of refactoring: package models -> packages exec and variable):pkg/ml/models/gen_builderiface.go

// ***** This file is generated by internal/cmd/builderiface. DO NOT EDIT DIRECTLY. *****

import (
	"github.com/gomlx/gomlx/pkg/core/graph"
	"github.com/pkg/errors"
)

<<<<<<< HEAD:pkg/ml/exec/gen_builderiface.go
<<<<<<<< HEAD:pkg/ml/model/gen_builderiface.go
// normalizedBuilderFn is the normalized function used internally by the model.Exec object.
========
// normalizedBuilderFn is the normalized function used internally by the exec.Exec object.
>>>>>>>> b1bebb70fa399f07e42a4df4a8b4735919894d8e:pkg/ml/exec/gen_builderiface.go
=======
// normalizedBuilderFn is the normalized function used internally by the models.Exec object.
>>>>>>> parent of b1bebb7 (Middle of refactoring: package models -> packages exec and variable):pkg/ml/models/gen_builderiface.go
//
// See convertToNormalizedBuilderFn() to convert from a BuilderFnSet to this type.
type normalizedBuilderFn func(g *graph.Graph, inputs []*graph.Node) []*graph.Node

type BuilderFnSet interface {
	func(input0 *graph.Node) |
		func(input0 *graph.Node) *graph.Node |
		func(input0 *graph.Node) (*graph.Node, *graph.Node) |
		func(input0 *graph.Node) (*graph.Node, *graph.Node, *graph.Node) |
		func(input0 *graph.Node) (*graph.Node, *graph.Node, *graph.Node, *graph.Node) |
		func(input0 *graph.Node) (outputs []*graph.Node) |
		func(input0, input1 *graph.Node) |
		func(input0, input1 *graph.Node) *graph.Node |
		func(input0, input1 *graph.Node) (*graph.Node, *graph.Node) |
		func(input0, input1 *graph.Node) (*graph.Node, *graph.Node, *graph.Node) |
		func(input0, input1 *graph.Node) (*graph.Node, *graph.Node, *graph.Node, *graph.Node) |
		func(input0, input1 *graph.Node) (outputs []*graph.Node) |
		func(input0, input1, input2 *graph.Node) |
		func(input0, input1, input2 *graph.Node) *graph.Node |
		func(input0, input1, input2 *graph.Node) (*graph.Node, *graph.Node) |
		func(input0, input1, input2 *graph.Node) (*graph.Node, *graph.Node, *graph.Node) |
		func(input0, input1, input2 *graph.Node) (*graph.Node, *graph.Node, *graph.Node, *graph.Node) |
		func(input0, input1, input2 *graph.Node) (outputs []*graph.Node) |
		func(input0, input1, input2, input3 *graph.Node) |
		func(input0, input1, input2, input3 *graph.Node) *graph.Node |
		func(input0, input1, input2, input3 *graph.Node) (*graph.Node, *graph.Node) |
		func(input0, input1, input2, input3 *graph.Node) (*graph.Node, *graph.Node, *graph.Node) |
		func(input0, input1, input2, input3 *graph.Node) (*graph.Node, *graph.Node, *graph.Node, *graph.Node) |
		func(input0, input1, input2, input3 *graph.Node) (outputs []*graph.Node) |
		func(inputs ...*graph.Node) |
		func(inputs ...*graph.Node) *graph.Node |
		func(inputs ...*graph.Node) (*graph.Node, *graph.Node) |
		func(inputs ...*graph.Node) (*graph.Node, *graph.Node, *graph.Node) |
		func(inputs ...*graph.Node) (*graph.Node, *graph.Node, *graph.Node, *graph.Node) |
		func(inputs ...*graph.Node) (outputs []*graph.Node) |
		func(g *graph.Graph) |
		func(g *graph.Graph) *graph.Node |
		func(g *graph.Graph) (*graph.Node, *graph.Node) |
		func(g *graph.Graph) (*graph.Node, *graph.Node, *graph.Node) |
		func(g *graph.Graph) (*graph.Node, *graph.Node, *graph.Node, *graph.Node) |
		func(g *graph.Graph) (outputs []*graph.Node) |
		func(g *graph.Graph, input0 *graph.Node) |
		func(g *graph.Graph, input0 *graph.Node) *graph.Node |
		func(g *graph.Graph, input0 *graph.Node) (*graph.Node, *graph.Node) |
		func(g *graph.Graph, input0 *graph.Node) (*graph.Node, *graph.Node, *graph.Node) |
		func(g *graph.Graph, input0 *graph.Node) (*graph.Node, *graph.Node, *graph.Node, *graph.Node) |
		func(g *graph.Graph, input0 *graph.Node) (outputs []*graph.Node) |
		func(g *graph.Graph, input0, input1 *graph.Node) |
		func(g *graph.Graph, input0, input1 *graph.Node) *graph.Node |
		func(g *graph.Graph, input0, input1 *graph.Node) (*graph.Node, *graph.Node) |
		func(g *graph.Graph, input0, input1 *graph.Node) (*graph.Node, *graph.Node, *graph.Node) |
		func(g *graph.Graph, input0, input1 *graph.Node) (*graph.Node, *graph.Node, *graph.Node, *graph.Node) |
		func(g *graph.Graph, input0, input1 *graph.Node) (outputs []*graph.Node) |
		func(g *graph.Graph, input0, input1, input2 *graph.Node) |
		func(g *graph.Graph, input0, input1, input2 *graph.Node) *graph.Node |
		func(g *graph.Graph, input0, input1, input2 *graph.Node) (*graph.Node, *graph.Node) |
		func(g *graph.Graph, input0, input1, input2 *graph.Node) (*graph.Node, *graph.Node, *graph.Node) |
		func(g *graph.Graph, input0, input1, input2 *graph.Node) (*graph.Node, *graph.Node, *graph.Node, *graph.Node) |
		func(g *graph.Graph, input0, input1, input2 *graph.Node) (outputs []*graph.Node) |
		func(g *graph.Graph, input0, input1, input2, input3 *graph.Node) |
		func(g *graph.Graph, input0, input1, input2, input3 *graph.Node) *graph.Node |
		func(g *graph.Graph, input0, input1, input2, input3 *graph.Node) (*graph.Node, *graph.Node) |
		func(g *graph.Graph, input0, input1, input2, input3 *graph.Node) (*graph.Node, *graph.Node, *graph.Node) |
		func(g *graph.Graph, input0, input1, input2, input3 *graph.Node) (*graph.Node, *graph.Node, *graph.Node, *graph.Node) |
		func(g *graph.Graph, input0, input1, input2, input3 *graph.Node) (outputs []*graph.Node) |
		func(g *graph.Graph, inputs ...*graph.Node) |
		func(g *graph.Graph, inputs ...*graph.Node) *graph.Node |
		func(g *graph.Graph, inputs ...*graph.Node) (*graph.Node, *graph.Node) |
		func(g *graph.Graph, inputs ...*graph.Node) (*graph.Node, *graph.Node, *graph.Node) |
		func(g *graph.Graph, inputs ...*graph.Node) (*graph.Node, *graph.Node, *graph.Node, *graph.Node) |
		func(g *graph.Graph, inputs ...*graph.Node) (outputs []*graph.Node)
}

// convertToNormalizedBuilderFn converts a build closure compatible with BuilderFnSet to a canonical BuilderFn matching the corresponding parameters.
// It also returns the number of inputs and outputs of the underlying Builder.
func convertToNormalizedBuilderFn[B BuilderFnSet](builder B) (builderFn normalizedBuilderFn, numInputs, numOutputs int, err error) {
	return convertToNormalizedBuilderImpl(builder)
}

func convertToNormalizedBuilderImpl(builderAny any) (builderFn normalizedBuilderFn, numInputs, numOutputs int, err error) {
	switch builder := builderAny.(type) {
	case func(input0 *graph.Node):
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			if len(inputs) != 1 {
				panic(errors.Errorf("wrong number of inputs for model, expected 1, got %d", len(inputs)))
			}
			builder(inputs[0])
			return nil
		}, 1, 0, nil

	case func(input0 *graph.Node) *graph.Node:
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			if len(inputs) != 1 {
				panic(errors.Errorf("wrong number of inputs for model, expected 1, got %d", len(inputs)))
			}
			outputs := make([]*graph.Node, 1)
			outputs[0] = builder(inputs[0])
			return outputs
		}, 1, 1, nil

	case func(input0 *graph.Node) (*graph.Node, *graph.Node):
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			if len(inputs) != 1 {
				panic(errors.Errorf("wrong number of inputs for model, expected 1, got %d", len(inputs)))
			}
			outputs := make([]*graph.Node, 2)
			outputs[0], outputs[1] = builder(inputs[0])
			return outputs
		}, 1, 2, nil

	case func(input0 *graph.Node) (*graph.Node, *graph.Node, *graph.Node):
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			if len(inputs) != 1 {
				panic(errors.Errorf("wrong number of inputs for model, expected 1, got %d", len(inputs)))
			}
			outputs := make([]*graph.Node, 3)
			outputs[0], outputs[1], outputs[2] = builder(inputs[0])
			return outputs
		}, 1, 3, nil

	case func(input0 *graph.Node) (*graph.Node, *graph.Node, *graph.Node, *graph.Node):
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			if len(inputs) != 1 {
				panic(errors.Errorf("wrong number of inputs for model, expected 1, got %d", len(inputs)))
			}
			outputs := make([]*graph.Node, 4)
			outputs[0], outputs[1], outputs[2], outputs[3] = builder(inputs[0])
			return outputs
		}, 1, 4, nil

	case func(input0 *graph.Node) (outputs []*graph.Node):
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			if len(inputs) != 1 {
				panic(errors.Errorf("wrong number of inputs for model, expected 1, got %d", len(inputs)))
			}
			return builder(inputs[0])
		}, 1, -1, nil

	case func(input0, input1 *graph.Node):
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			if len(inputs) != 2 {
				panic(errors.Errorf("wrong number of inputs for model, expected 2, got %d", len(inputs)))
			}
			builder(inputs[0], inputs[1])
			return nil
		}, 2, 0, nil

	case func(input0, input1 *graph.Node) *graph.Node:
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			if len(inputs) != 2 {
				panic(errors.Errorf("wrong number of inputs for model, expected 2, got %d", len(inputs)))
			}
			outputs := make([]*graph.Node, 1)
			outputs[0] = builder(inputs[0], inputs[1])
			return outputs
		}, 2, 1, nil

	case func(input0, input1 *graph.Node) (*graph.Node, *graph.Node):
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			if len(inputs) != 2 {
				panic(errors.Errorf("wrong number of inputs for model, expected 2, got %d", len(inputs)))
			}
			outputs := make([]*graph.Node, 2)
			outputs[0], outputs[1] = builder(inputs[0], inputs[1])
			return outputs
		}, 2, 2, nil

	case func(input0, input1 *graph.Node) (*graph.Node, *graph.Node, *graph.Node):
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			if len(inputs) != 2 {
				panic(errors.Errorf("wrong number of inputs for model, expected 2, got %d", len(inputs)))
			}
			outputs := make([]*graph.Node, 3)
			outputs[0], outputs[1], outputs[2] = builder(inputs[0], inputs[1])
			return outputs
		}, 2, 3, nil

	case func(input0, input1 *graph.Node) (*graph.Node, *graph.Node, *graph.Node, *graph.Node):
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			if len(inputs) != 2 {
				panic(errors.Errorf("wrong number of inputs for model, expected 2, got %d", len(inputs)))
			}
			outputs := make([]*graph.Node, 4)
			outputs[0], outputs[1], outputs[2], outputs[3] = builder(inputs[0], inputs[1])
			return outputs
		}, 2, 4, nil

	case func(input0, input1 *graph.Node) (outputs []*graph.Node):
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			if len(inputs) != 2 {
				panic(errors.Errorf("wrong number of inputs for model, expected 2, got %d", len(inputs)))
			}
			return builder(inputs[0], inputs[1])
		}, 2, -1, nil

	case func(input0, input1, input2 *graph.Node):
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			if len(inputs) != 3 {
				panic(errors.Errorf("wrong number of inputs for model, expected 3, got %d", len(inputs)))
			}
			builder(inputs[0], inputs[1], inputs[2])
			return nil
		}, 3, 0, nil

	case func(input0, input1, input2 *graph.Node) *graph.Node:
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			if len(inputs) != 3 {
				panic(errors.Errorf("wrong number of inputs for model, expected 3, got %d", len(inputs)))
			}
			outputs := make([]*graph.Node, 1)
			outputs[0] = builder(inputs[0], inputs[1], inputs[2])
			return outputs
		}, 3, 1, nil

	case func(input0, input1, input2 *graph.Node) (*graph.Node, *graph.Node):
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			if len(inputs) != 3 {
				panic(errors.Errorf("wrong number of inputs for model, expected 3, got %d", len(inputs)))
			}
			outputs := make([]*graph.Node, 2)
			outputs[0], outputs[1] = builder(inputs[0], inputs[1], inputs[2])
			return outputs
		}, 3, 2, nil

	case func(input0, input1, input2 *graph.Node) (*graph.Node, *graph.Node, *graph.Node):
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			if len(inputs) != 3 {
				panic(errors.Errorf("wrong number of inputs for model, expected 3, got %d", len(inputs)))
			}
			outputs := make([]*graph.Node, 3)
			outputs[0], outputs[1], outputs[2] = builder(inputs[0], inputs[1], inputs[2])
			return outputs
		}, 3, 3, nil

	case func(input0, input1, input2 *graph.Node) (*graph.Node, *graph.Node, *graph.Node, *graph.Node):
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			if len(inputs) != 3 {
				panic(errors.Errorf("wrong number of inputs for model, expected 3, got %d", len(inputs)))
			}
			outputs := make([]*graph.Node, 4)
			outputs[0], outputs[1], outputs[2], outputs[3] = builder(inputs[0], inputs[1], inputs[2])
			return outputs
		}, 3, 4, nil

	case func(input0, input1, input2 *graph.Node) (outputs []*graph.Node):
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			if len(inputs) != 3 {
				panic(errors.Errorf("wrong number of inputs for model, expected 3, got %d", len(inputs)))
			}
			return builder(inputs[0], inputs[1], inputs[2])
		}, 3, -1, nil

	case func(input0, input1, input2, input3 *graph.Node):
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			if len(inputs) != 4 {
				panic(errors.Errorf("wrong number of inputs for model, expected 4, got %d", len(inputs)))
			}
			builder(inputs[0], inputs[1], inputs[2], inputs[3])
			return nil
		}, 4, 0, nil

	case func(input0, input1, input2, input3 *graph.Node) *graph.Node:
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			if len(inputs) != 4 {
				panic(errors.Errorf("wrong number of inputs for model, expected 4, got %d", len(inputs)))
			}
			outputs := make([]*graph.Node, 1)
			outputs[0] = builder(inputs[0], inputs[1], inputs[2], inputs[3])
			return outputs
		}, 4, 1, nil

	case func(input0, input1, input2, input3 *graph.Node) (*graph.Node, *graph.Node):
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			if len(inputs) != 4 {
				panic(errors.Errorf("wrong number of inputs for model, expected 4, got %d", len(inputs)))
			}
			outputs := make([]*graph.Node, 2)
			outputs[0], outputs[1] = builder(inputs[0], inputs[1], inputs[2], inputs[3])
			return outputs
		}, 4, 2, nil

	case func(input0, input1, input2, input3 *graph.Node) (*graph.Node, *graph.Node, *graph.Node):
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			if len(inputs) != 4 {
				panic(errors.Errorf("wrong number of inputs for model, expected 4, got %d", len(inputs)))
			}
			outputs := make([]*graph.Node, 3)
			outputs[0], outputs[1], outputs[2] = builder(inputs[0], inputs[1], inputs[2], inputs[3])
			return outputs
		}, 4, 3, nil

	case func(input0, input1, input2, input3 *graph.Node) (*graph.Node, *graph.Node, *graph.Node, *graph.Node):
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			if len(inputs) != 4 {
				panic(errors.Errorf("wrong number of inputs for model, expected 4, got %d", len(inputs)))
			}
			outputs := make([]*graph.Node, 4)
			outputs[0], outputs[1], outputs[2], outputs[3] = builder(inputs[0], inputs[1], inputs[2], inputs[3])
			return outputs
		}, 4, 4, nil

	case func(input0, input1, input2, input3 *graph.Node) (outputs []*graph.Node):
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			if len(inputs) != 4 {
				panic(errors.Errorf("wrong number of inputs for model, expected 4, got %d", len(inputs)))
			}
			return builder(inputs[0], inputs[1], inputs[2], inputs[3])
		}, 4, -1, nil

	case func(inputs ...*graph.Node):
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			builder(inputs...)
			return nil
		}, -1, 0, nil

	case func(inputs ...*graph.Node) *graph.Node:
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			outputs := make([]*graph.Node, 1)
			outputs[0] = builder(inputs...)
			return outputs
		}, -1, 1, nil

	case func(inputs ...*graph.Node) (*graph.Node, *graph.Node):
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			outputs := make([]*graph.Node, 2)
			outputs[0], outputs[1] = builder(inputs...)
			return outputs
		}, -1, 2, nil

	case func(inputs ...*graph.Node) (*graph.Node, *graph.Node, *graph.Node):
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			outputs := make([]*graph.Node, 3)
			outputs[0], outputs[1], outputs[2] = builder(inputs...)
			return outputs
		}, -1, 3, nil

	case func(inputs ...*graph.Node) (*graph.Node, *graph.Node, *graph.Node, *graph.Node):
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			outputs := make([]*graph.Node, 4)
			outputs[0], outputs[1], outputs[2], outputs[3] = builder(inputs...)
			return outputs
		}, -1, 4, nil

	case func(inputs ...*graph.Node) (outputs []*graph.Node):
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			return builder(inputs...)
		}, -1, -1, nil

	case func(g *graph.Graph):
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			if len(inputs) != 0 {
				panic(errors.Errorf("wrong number of inputs for model, expected 0, got %d", len(inputs)))
			}
			builder(g)
			return nil
		}, 0, 0, nil

	case func(g *graph.Graph) *graph.Node:
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			if len(inputs) != 0 {
				panic(errors.Errorf("wrong number of inputs for model, expected 0, got %d", len(inputs)))
			}
			outputs := make([]*graph.Node, 1)
			outputs[0] = builder(g)
			return outputs
		}, 0, 1, nil

	case func(g *graph.Graph) (*graph.Node, *graph.Node):
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			if len(inputs) != 0 {
				panic(errors.Errorf("wrong number of inputs for model, expected 0, got %d", len(inputs)))
			}
			outputs := make([]*graph.Node, 2)
			outputs[0], outputs[1] = builder(g)
			return outputs
		}, 0, 2, nil

	case func(g *graph.Graph) (*graph.Node, *graph.Node, *graph.Node):
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			if len(inputs) != 0 {
				panic(errors.Errorf("wrong number of inputs for model, expected 0, got %d", len(inputs)))
			}
			outputs := make([]*graph.Node, 3)
			outputs[0], outputs[1], outputs[2] = builder(g)
			return outputs
		}, 0, 3, nil

	case func(g *graph.Graph) (*graph.Node, *graph.Node, *graph.Node, *graph.Node):
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			if len(inputs) != 0 {
				panic(errors.Errorf("wrong number of inputs for model, expected 0, got %d", len(inputs)))
			}
			outputs := make([]*graph.Node, 4)
			outputs[0], outputs[1], outputs[2], outputs[3] = builder(g)
			return outputs
		}, 0, 4, nil

	case func(g *graph.Graph) (outputs []*graph.Node):
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			if len(inputs) != 0 {
				panic(errors.Errorf("wrong number of inputs for model, expected 0, got %d", len(inputs)))
			}
			return builder(g)
		}, 0, -1, nil

	case func(g *graph.Graph, input0 *graph.Node):
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			if len(inputs) != 1 {
				panic(errors.Errorf("wrong number of inputs for model, expected 1, got %d", len(inputs)))
			}
			builder(g, inputs[0])
			return nil
		}, 1, 0, nil

	case func(g *graph.Graph, input0 *graph.Node) *graph.Node:
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			if len(inputs) != 1 {
				panic(errors.Errorf("wrong number of inputs for model, expected 1, got %d", len(inputs)))
			}
			outputs := make([]*graph.Node, 1)
			outputs[0] = builder(g, inputs[0])
			return outputs
		}, 1, 1, nil

	case func(g *graph.Graph, input0 *graph.Node) (*graph.Node, *graph.Node):
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			if len(inputs) != 1 {
				panic(errors.Errorf("wrong number of inputs for model, expected 1, got %d", len(inputs)))
			}
			outputs := make([]*graph.Node, 2)
			outputs[0], outputs[1] = builder(g, inputs[0])
			return outputs
		}, 1, 2, nil

	case func(g *graph.Graph, input0 *graph.Node) (*graph.Node, *graph.Node, *graph.Node):
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			if len(inputs) != 1 {
				panic(errors.Errorf("wrong number of inputs for model, expected 1, got %d", len(inputs)))
			}
			outputs := make([]*graph.Node, 3)
			outputs[0], outputs[1], outputs[2] = builder(g, inputs[0])
			return outputs
		}, 1, 3, nil

	case func(g *graph.Graph, input0 *graph.Node) (*graph.Node, *graph.Node, *graph.Node, *graph.Node):
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			if len(inputs) != 1 {
				panic(errors.Errorf("wrong number of inputs for model, expected 1, got %d", len(inputs)))
			}
			outputs := make([]*graph.Node, 4)
			outputs[0], outputs[1], outputs[2], outputs[3] = builder(g, inputs[0])
			return outputs
		}, 1, 4, nil

	case func(g *graph.Graph, input0 *graph.Node) (outputs []*graph.Node):
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			if len(inputs) != 1 {
				panic(errors.Errorf("wrong number of inputs for model, expected 1, got %d", len(inputs)))
			}
			return builder(g, inputs[0])
		}, 1, -1, nil

	case func(g *graph.Graph, input0, input1 *graph.Node):
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			if len(inputs) != 2 {
				panic(errors.Errorf("wrong number of inputs for model, expected 2, got %d", len(inputs)))
			}
			builder(g, inputs[0], inputs[1])
			return nil
		}, 2, 0, nil

	case func(g *graph.Graph, input0, input1 *graph.Node) *graph.Node:
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			if len(inputs) != 2 {
				panic(errors.Errorf("wrong number of inputs for model, expected 2, got %d", len(inputs)))
			}
			outputs := make([]*graph.Node, 1)
			outputs[0] = builder(g, inputs[0], inputs[1])
			return outputs
		}, 2, 1, nil

	case func(g *graph.Graph, input0, input1 *graph.Node) (*graph.Node, *graph.Node):
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			if len(inputs) != 2 {
				panic(errors.Errorf("wrong number of inputs for model, expected 2, got %d", len(inputs)))
			}
			outputs := make([]*graph.Node, 2)
			outputs[0], outputs[1] = builder(g, inputs[0], inputs[1])
			return outputs
		}, 2, 2, nil

	case func(g *graph.Graph, input0, input1 *graph.Node) (*graph.Node, *graph.Node, *graph.Node):
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			if len(inputs) != 2 {
				panic(errors.Errorf("wrong number of inputs for model, expected 2, got %d", len(inputs)))
			}
			outputs := make([]*graph.Node, 3)
			outputs[0], outputs[1], outputs[2] = builder(g, inputs[0], inputs[1])
			return outputs
		}, 2, 3, nil

	case func(g *graph.Graph, input0, input1 *graph.Node) (*graph.Node, *graph.Node, *graph.Node, *graph.Node):
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			if len(inputs) != 2 {
				panic(errors.Errorf("wrong number of inputs for model, expected 2, got %d", len(inputs)))
			}
			outputs := make([]*graph.Node, 4)
			outputs[0], outputs[1], outputs[2], outputs[3] = builder(g, inputs[0], inputs[1])
			return outputs
		}, 2, 4, nil

	case func(g *graph.Graph, input0, input1 *graph.Node) (outputs []*graph.Node):
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			if len(inputs) != 2 {
				panic(errors.Errorf("wrong number of inputs for model, expected 2, got %d", len(inputs)))
			}
			return builder(g, inputs[0], inputs[1])
		}, 2, -1, nil

	case func(g *graph.Graph, input0, input1, input2 *graph.Node):
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			if len(inputs) != 3 {
				panic(errors.Errorf("wrong number of inputs for model, expected 3, got %d", len(inputs)))
			}
			builder(g, inputs[0], inputs[1], inputs[2])
			return nil
		}, 3, 0, nil

	case func(g *graph.Graph, input0, input1, input2 *graph.Node) *graph.Node:
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			if len(inputs) != 3 {
				panic(errors.Errorf("wrong number of inputs for model, expected 3, got %d", len(inputs)))
			}
			outputs := make([]*graph.Node, 1)
			outputs[0] = builder(g, inputs[0], inputs[1], inputs[2])
			return outputs
		}, 3, 1, nil

	case func(g *graph.Graph, input0, input1, input2 *graph.Node) (*graph.Node, *graph.Node):
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			if len(inputs) != 3 {
				panic(errors.Errorf("wrong number of inputs for model, expected 3, got %d", len(inputs)))
			}
			outputs := make([]*graph.Node, 2)
			outputs[0], outputs[1] = builder(g, inputs[0], inputs[1], inputs[2])
			return outputs
		}, 3, 2, nil

	case func(g *graph.Graph, input0, input1, input2 *graph.Node) (*graph.Node, *graph.Node, *graph.Node):
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			if len(inputs) != 3 {
				panic(errors.Errorf("wrong number of inputs for model, expected 3, got %d", len(inputs)))
			}
			outputs := make([]*graph.Node, 3)
			outputs[0], outputs[1], outputs[2] = builder(g, inputs[0], inputs[1], inputs[2])
			return outputs
		}, 3, 3, nil

	case func(g *graph.Graph, input0, input1, input2 *graph.Node) (*graph.Node, *graph.Node, *graph.Node, *graph.Node):
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			if len(inputs) != 3 {
				panic(errors.Errorf("wrong number of inputs for model, expected 3, got %d", len(inputs)))
			}
			outputs := make([]*graph.Node, 4)
			outputs[0], outputs[1], outputs[2], outputs[3] = builder(g, inputs[0], inputs[1], inputs[2])
			return outputs
		}, 3, 4, nil

	case func(g *graph.Graph, input0, input1, input2 *graph.Node) (outputs []*graph.Node):
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			if len(inputs) != 3 {
				panic(errors.Errorf("wrong number of inputs for model, expected 3, got %d", len(inputs)))
			}
			return builder(g, inputs[0], inputs[1], inputs[2])
		}, 3, -1, nil

	case func(g *graph.Graph, input0, input1, input2, input3 *graph.Node):
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			if len(inputs) != 4 {
				panic(errors.Errorf("wrong number of inputs for model, expected 4, got %d", len(inputs)))
			}
			builder(g, inputs[0], inputs[1], inputs[2], inputs[3])
			return nil
		}, 4, 0, nil

	case func(g *graph.Graph, input0, input1, input2, input3 *graph.Node) *graph.Node:
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			if len(inputs) != 4 {
				panic(errors.Errorf("wrong number of inputs for model, expected 4, got %d", len(inputs)))
			}
			outputs := make([]*graph.Node, 1)
			outputs[0] = builder(g, inputs[0], inputs[1], inputs[2], inputs[3])
			return outputs
		}, 4, 1, nil

	case func(g *graph.Graph, input0, input1, input2, input3 *graph.Node) (*graph.Node, *graph.Node):
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			if len(inputs) != 4 {
				panic(errors.Errorf("wrong number of inputs for model, expected 4, got %d", len(inputs)))
			}
			outputs := make([]*graph.Node, 2)
			outputs[0], outputs[1] = builder(g, inputs[0], inputs[1], inputs[2], inputs[3])
			return outputs
		}, 4, 2, nil

	case func(g *graph.Graph, input0, input1, input2, input3 *graph.Node) (*graph.Node, *graph.Node, *graph.Node):
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			if len(inputs) != 4 {
				panic(errors.Errorf("wrong number of inputs for model, expected 4, got %d", len(inputs)))
			}
			outputs := make([]*graph.Node, 3)
			outputs[0], outputs[1], outputs[2] = builder(g, inputs[0], inputs[1], inputs[2], inputs[3])
			return outputs
		}, 4, 3, nil

	case func(g *graph.Graph, input0, input1, input2, input3 *graph.Node) (*graph.Node, *graph.Node, *graph.Node, *graph.Node):
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			if len(inputs) != 4 {
				panic(errors.Errorf("wrong number of inputs for model, expected 4, got %d", len(inputs)))
			}
			outputs := make([]*graph.Node, 4)
			outputs[0], outputs[1], outputs[2], outputs[3] = builder(g, inputs[0], inputs[1], inputs[2], inputs[3])
			return outputs
		}, 4, 4, nil

	case func(g *graph.Graph, input0, input1, input2, input3 *graph.Node) (outputs []*graph.Node):
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			if len(inputs) != 4 {
				panic(errors.Errorf("wrong number of inputs for model, expected 4, got %d", len(inputs)))
			}
			return builder(g, inputs[0], inputs[1], inputs[2], inputs[3])
		}, 4, -1, nil

	case func(g *graph.Graph, inputs ...*graph.Node):
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			builder(g, inputs...)
			return nil
		}, -1, 0, nil

	case func(g *graph.Graph, inputs ...*graph.Node) *graph.Node:
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			outputs := make([]*graph.Node, 1)
			outputs[0] = builder(g, inputs...)
			return outputs
		}, -1, 1, nil

	case func(g *graph.Graph, inputs ...*graph.Node) (*graph.Node, *graph.Node):
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			outputs := make([]*graph.Node, 2)
			outputs[0], outputs[1] = builder(g, inputs...)
			return outputs
		}, -1, 2, nil

	case func(g *graph.Graph, inputs ...*graph.Node) (*graph.Node, *graph.Node, *graph.Node):
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			outputs := make([]*graph.Node, 3)
			outputs[0], outputs[1], outputs[2] = builder(g, inputs...)
			return outputs
		}, -1, 3, nil

	case func(g *graph.Graph, inputs ...*graph.Node) (*graph.Node, *graph.Node, *graph.Node, *graph.Node):
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			outputs := make([]*graph.Node, 4)
			outputs[0], outputs[1], outputs[2], outputs[3] = builder(g, inputs...)
			return outputs
		}, -1, 4, nil

	case func(g *graph.Graph, inputs ...*graph.Node) (outputs []*graph.Node):
		return func(g *graph.Graph, inputs []*graph.Node) []*graph.Node {
			return builder(g, inputs...)
		}, -1, -1, nil

	default:
		return nil, 0, 0, errors.Errorf("model object passed (%T) doesn't implement any of the valid Build methods signatures supported, see documentation in models.NewExec for details", builderAny)
	}
}
