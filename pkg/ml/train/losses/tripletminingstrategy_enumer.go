// Code generated by "enumer -type=TripletMiningStrategy -trimprefix=TripletMiningStrategy -transform=snake -values -text -json -yaml triplet.go"; DO NOT EDIT.

package losses

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _TripletMiningStrategyName = "allhardsemi_hard"

var _TripletMiningStrategyIndex = [...]uint8{0, 3, 7, 16}

const _TripletMiningStrategyLowerName = "allhardsemi_hard"

func (i TripletMiningStrategy) String() string {
	if i < 0 || i >= TripletMiningStrategy(len(_TripletMiningStrategyIndex)-1) {
		return fmt.Sprintf("TripletMiningStrategy(%d)", i)
	}
	return _TripletMiningStrategyName[_TripletMiningStrategyIndex[i]:_TripletMiningStrategyIndex[i+1]]
}

func (TripletMiningStrategy) Values() []string {
	return TripletMiningStrategyStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _TripletMiningStrategyNoOp() {
	var x [1]struct{}
	_ = x[TripletMiningStrategyAll-(0)]
	_ = x[TripletMiningStrategyHard-(1)]
	_ = x[TripletMiningStrategySemiHard-(2)]
}

var _TripletMiningStrategyValues = []TripletMiningStrategy{TripletMiningStrategyAll, TripletMiningStrategyHard, TripletMiningStrategySemiHard}

var _TripletMiningStrategyNameToValueMap = map[string]TripletMiningStrategy{
	_TripletMiningStrategyName[0:3]:       TripletMiningStrategyAll,
	_TripletMiningStrategyLowerName[0:3]:  TripletMiningStrategyAll,
	_TripletMiningStrategyName[3:7]:       TripletMiningStrategyHard,
	_TripletMiningStrategyLowerName[3:7]:  TripletMiningStrategyHard,
	_TripletMiningStrategyName[7:16]:      TripletMiningStrategySemiHard,
	_TripletMiningStrategyLowerName[7:16]: TripletMiningStrategySemiHard,
}

var _TripletMiningStrategyNames = []string{
	_TripletMiningStrategyName[0:3],
	_TripletMiningStrategyName[3:7],
	_TripletMiningStrategyName[7:16],
}

// TripletMiningStrategyString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TripletMiningStrategyString(s string) (TripletMiningStrategy, error) {
	if val, ok := _TripletMiningStrategyNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _TripletMiningStrategyNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to TripletMiningStrategy values", s)
}

// TripletMiningStrategyValues returns all values of the enum
func TripletMiningStrategyValues() []TripletMiningStrategy {
	return _TripletMiningStrategyValues
}

// TripletMiningStrategyStrings returns a slice of all String values of the enum
func TripletMiningStrategyStrings() []string {
	strs := make([]string, len(_TripletMiningStrategyNames))
	copy(strs, _TripletMiningStrategyNames)
	return strs
}

// IsATripletMiningStrategy returns "true" if the value is listed in the enum definition. "false" otherwise
func (i TripletMiningStrategy) IsATripletMiningStrategy() bool {
	for _, v := range _TripletMiningStrategyValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for TripletMiningStrategy
func (i TripletMiningStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for TripletMiningStrategy
func (i *TripletMiningStrategy) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("TripletMiningStrategy should be a string, got %s", data)
	}

	var err error
	*i, err = TripletMiningStrategyString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for TripletMiningStrategy
func (i TripletMiningStrategy) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for TripletMiningStrategy
func (i *TripletMiningStrategy) UnmarshalText(text []byte) error {
	var err error
	*i, err = TripletMiningStrategyString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for TripletMiningStrategy
func (i TripletMiningStrategy) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for TripletMiningStrategy
func (i *TripletMiningStrategy) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = TripletMiningStrategyString(s)
	return err
}
