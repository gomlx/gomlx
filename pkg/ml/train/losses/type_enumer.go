// Code generated by "enumer -type=Type -trimprefix=Type -transform=snake -values -text -json -yaml losses.go"; DO NOT EDIT.

package losses

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _TypeName = "maemsehuberaplbin_crossbin_cross_logitscategorical_crosscategorical_cross_logitssparse_cross_logitstripleteuclideaneuclidean_square"

var _TypeIndex = [...]uint8{0, 3, 6, 11, 14, 23, 39, 56, 80, 99, 106, 115, 131}

const _TypeLowerName = "maemsehuberaplbin_crossbin_cross_logitscategorical_crosscategorical_cross_logitssparse_cross_logitstripleteuclideaneuclidean_square"

func (i Type) String() string {
	if i < 0 || i >= Type(len(_TypeIndex)-1) {
		return fmt.Sprintf("Type(%d)", i)
	}
	return _TypeName[_TypeIndex[i]:_TypeIndex[i+1]]
}

func (Type) Values() []string {
	return TypeStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _TypeNoOp() {
	var x [1]struct{}
	_ = x[TypeMAE-(0)]
	_ = x[TypeMSE-(1)]
	_ = x[TypeHuber-(2)]
	_ = x[TypeAPL-(3)]
	_ = x[TypeBinCross-(4)]
	_ = x[TypeBinCrossLogits-(5)]
	_ = x[TypeCategoricalCross-(6)]
	_ = x[TypeCategoricalCrossLogits-(7)]
	_ = x[TypeSparseCrossLogits-(8)]
	_ = x[TypeTriplet-(9)]
	_ = x[TypeEuclidean-(10)]
	_ = x[TypeEuclideanSquare-(11)]
}

var _TypeValues = []Type{TypeMAE, TypeMSE, TypeHuber, TypeAPL, TypeBinCross, TypeBinCrossLogits, TypeCategoricalCross, TypeCategoricalCrossLogits, TypeSparseCrossLogits, TypeTriplet, TypeEuclidean, TypeEuclideanSquare}

var _TypeNameToValueMap = map[string]Type{
	_TypeName[0:3]:          TypeMAE,
	_TypeLowerName[0:3]:     TypeMAE,
	_TypeName[3:6]:          TypeMSE,
	_TypeLowerName[3:6]:     TypeMSE,
	_TypeName[6:11]:         TypeHuber,
	_TypeLowerName[6:11]:    TypeHuber,
	_TypeName[11:14]:        TypeAPL,
	_TypeLowerName[11:14]:   TypeAPL,
	_TypeName[14:23]:        TypeBinCross,
	_TypeLowerName[14:23]:   TypeBinCross,
	_TypeName[23:39]:        TypeBinCrossLogits,
	_TypeLowerName[23:39]:   TypeBinCrossLogits,
	_TypeName[39:56]:        TypeCategoricalCross,
	_TypeLowerName[39:56]:   TypeCategoricalCross,
	_TypeName[56:80]:        TypeCategoricalCrossLogits,
	_TypeLowerName[56:80]:   TypeCategoricalCrossLogits,
	_TypeName[80:99]:        TypeSparseCrossLogits,
	_TypeLowerName[80:99]:   TypeSparseCrossLogits,
	_TypeName[99:106]:       TypeTriplet,
	_TypeLowerName[99:106]:  TypeTriplet,
	_TypeName[106:115]:      TypeEuclidean,
	_TypeLowerName[106:115]: TypeEuclidean,
	_TypeName[115:131]:      TypeEuclideanSquare,
	_TypeLowerName[115:131]: TypeEuclideanSquare,
}

var _TypeNames = []string{
	_TypeName[0:3],
	_TypeName[3:6],
	_TypeName[6:11],
	_TypeName[11:14],
	_TypeName[14:23],
	_TypeName[23:39],
	_TypeName[39:56],
	_TypeName[56:80],
	_TypeName[80:99],
	_TypeName[99:106],
	_TypeName[106:115],
	_TypeName[115:131],
}

// TypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TypeString(s string) (Type, error) {
	if val, ok := _TypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _TypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Type values", s)
}

// TypeValues returns all values of the enum
func TypeValues() []Type {
	return _TypeValues
}

// TypeStrings returns a slice of all String values of the enum
func TypeStrings() []string {
	strs := make([]string, len(_TypeNames))
	copy(strs, _TypeNames)
	return strs
}

// IsAType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Type) IsAType() bool {
	for _, v := range _TypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Type
func (i Type) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Type
func (i *Type) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Type should be a string, got %s", data)
	}

	var err error
	*i, err = TypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for Type
func (i Type) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Type
func (i *Type) UnmarshalText(text []byte) error {
	var err error
	*i, err = TypeString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for Type
func (i Type) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for Type
func (i *Type) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = TypeString(s)
	return err
}
