// Code generated by "enumer -trimprefix Dir -type=DirectionType -transform=snake -values -text -json -yaml lstm.go"; DO NOT EDIT.

package lstm

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _DirectionTypeName = "forwardreversebidirectional"

var _DirectionTypeIndex = [...]uint8{0, 7, 14, 27}

const _DirectionTypeLowerName = "forwardreversebidirectional"

func (i DirectionType) String() string {
	if i < 0 || i >= DirectionType(len(_DirectionTypeIndex)-1) {
		return fmt.Sprintf("DirectionType(%d)", i)
	}
	return _DirectionTypeName[_DirectionTypeIndex[i]:_DirectionTypeIndex[i+1]]
}

func (DirectionType) Values() []string {
	return DirectionTypeStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _DirectionTypeNoOp() {
	var x [1]struct{}
	_ = x[DirForward-(0)]
	_ = x[DirReverse-(1)]
	_ = x[DirBidirectional-(2)]
}

var _DirectionTypeValues = []DirectionType{DirForward, DirReverse, DirBidirectional}

var _DirectionTypeNameToValueMap = map[string]DirectionType{
	_DirectionTypeName[0:7]:        DirForward,
	_DirectionTypeLowerName[0:7]:   DirForward,
	_DirectionTypeName[7:14]:       DirReverse,
	_DirectionTypeLowerName[7:14]:  DirReverse,
	_DirectionTypeName[14:27]:      DirBidirectional,
	_DirectionTypeLowerName[14:27]: DirBidirectional,
}

var _DirectionTypeNames = []string{
	_DirectionTypeName[0:7],
	_DirectionTypeName[7:14],
	_DirectionTypeName[14:27],
}

// DirectionTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DirectionTypeString(s string) (DirectionType, error) {
	if val, ok := _DirectionTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _DirectionTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to DirectionType values", s)
}

// DirectionTypeValues returns all values of the enum
func DirectionTypeValues() []DirectionType {
	return _DirectionTypeValues
}

// DirectionTypeStrings returns a slice of all String values of the enum
func DirectionTypeStrings() []string {
	strs := make([]string, len(_DirectionTypeNames))
	copy(strs, _DirectionTypeNames)
	return strs
}

// IsADirectionType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i DirectionType) IsADirectionType() bool {
	for _, v := range _DirectionTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for DirectionType
func (i DirectionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for DirectionType
func (i *DirectionType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("DirectionType should be a string, got %s", data)
	}

	var err error
	*i, err = DirectionTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for DirectionType
func (i DirectionType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for DirectionType
func (i *DirectionType) UnmarshalText(text []byte) error {
	var err error
	*i, err = DirectionTypeString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for DirectionType
func (i DirectionType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for DirectionType
func (i *DirectionType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = DirectionTypeString(s)
	return err
}
