// Code generated by "enumer -type=PerturbationType -trimprefix=Perturbation -transform=snake -values -text -json -yaml discrete.go"; DO NOT EDIT.

package kan

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _PerturbationTypeName = "triangularnormal"

var _PerturbationTypeIndex = [...]uint8{0, 10, 16}

const _PerturbationTypeLowerName = "triangularnormal"

func (i PerturbationType) String() string {
	if i < 0 || i >= PerturbationType(len(_PerturbationTypeIndex)-1) {
		return fmt.Sprintf("PerturbationType(%d)", i)
	}
	return _PerturbationTypeName[_PerturbationTypeIndex[i]:_PerturbationTypeIndex[i+1]]
}

func (PerturbationType) Values() []string {
	return PerturbationTypeStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _PerturbationTypeNoOp() {
	var x [1]struct{}
	_ = x[PerturbationTriangular-(0)]
	_ = x[PerturbationNormal-(1)]
}

var _PerturbationTypeValues = []PerturbationType{PerturbationTriangular, PerturbationNormal}

var _PerturbationTypeNameToValueMap = map[string]PerturbationType{
	_PerturbationTypeName[0:10]:       PerturbationTriangular,
	_PerturbationTypeLowerName[0:10]:  PerturbationTriangular,
	_PerturbationTypeName[10:16]:      PerturbationNormal,
	_PerturbationTypeLowerName[10:16]: PerturbationNormal,
}

var _PerturbationTypeNames = []string{
	_PerturbationTypeName[0:10],
	_PerturbationTypeName[10:16],
}

// PerturbationTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func PerturbationTypeString(s string) (PerturbationType, error) {
	if val, ok := _PerturbationTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _PerturbationTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to PerturbationType values", s)
}

// PerturbationTypeValues returns all values of the enum
func PerturbationTypeValues() []PerturbationType {
	return _PerturbationTypeValues
}

// PerturbationTypeStrings returns a slice of all String values of the enum
func PerturbationTypeStrings() []string {
	strs := make([]string, len(_PerturbationTypeNames))
	copy(strs, _PerturbationTypeNames)
	return strs
}

// IsAPerturbationType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i PerturbationType) IsAPerturbationType() bool {
	for _, v := range _PerturbationTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for PerturbationType
func (i PerturbationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for PerturbationType
func (i *PerturbationType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("PerturbationType should be a string, got %s", data)
	}

	var err error
	*i, err = PerturbationTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for PerturbationType
func (i PerturbationType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for PerturbationType
func (i *PerturbationType) UnmarshalText(text []byte) error {
	var err error
	*i, err = PerturbationTypeString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for PerturbationType
func (i PerturbationType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for PerturbationType
func (i *PerturbationType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = PerturbationTypeString(s)
	return err
}
