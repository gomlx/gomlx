// Code generated by "enumer -type=SoftnessScheduleType -trimprefix=SoftnessSchedule -transform=snake -values -text -json -yaml discrete.go"; DO NOT EDIT.

package kan

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _SoftnessScheduleTypeName = "nonecosinelinearexponentiallast"

var _SoftnessScheduleTypeIndex = [...]uint8{0, 4, 10, 16, 27, 31}

const _SoftnessScheduleTypeLowerName = "nonecosinelinearexponentiallast"

func (i SoftnessScheduleType) String() string {
	if i < 0 || i >= SoftnessScheduleType(len(_SoftnessScheduleTypeIndex)-1) {
		return fmt.Sprintf("SoftnessScheduleType(%d)", i)
	}
	return _SoftnessScheduleTypeName[_SoftnessScheduleTypeIndex[i]:_SoftnessScheduleTypeIndex[i+1]]
}

func (SoftnessScheduleType) Values() []string {
	return SoftnessScheduleTypeStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _SoftnessScheduleTypeNoOp() {
	var x [1]struct{}
	_ = x[SoftnessScheduleNone-(0)]
	_ = x[SoftnessScheduleCosine-(1)]
	_ = x[SoftnessScheduleLinear-(2)]
	_ = x[SoftnessScheduleExponential-(3)]
	_ = x[SoftnessScheduleLast-(4)]
}

var _SoftnessScheduleTypeValues = []SoftnessScheduleType{SoftnessScheduleNone, SoftnessScheduleCosine, SoftnessScheduleLinear, SoftnessScheduleExponential, SoftnessScheduleLast}

var _SoftnessScheduleTypeNameToValueMap = map[string]SoftnessScheduleType{
	_SoftnessScheduleTypeName[0:4]:        SoftnessScheduleNone,
	_SoftnessScheduleTypeLowerName[0:4]:   SoftnessScheduleNone,
	_SoftnessScheduleTypeName[4:10]:       SoftnessScheduleCosine,
	_SoftnessScheduleTypeLowerName[4:10]:  SoftnessScheduleCosine,
	_SoftnessScheduleTypeName[10:16]:      SoftnessScheduleLinear,
	_SoftnessScheduleTypeLowerName[10:16]: SoftnessScheduleLinear,
	_SoftnessScheduleTypeName[16:27]:      SoftnessScheduleExponential,
	_SoftnessScheduleTypeLowerName[16:27]: SoftnessScheduleExponential,
	_SoftnessScheduleTypeName[27:31]:      SoftnessScheduleLast,
	_SoftnessScheduleTypeLowerName[27:31]: SoftnessScheduleLast,
}

var _SoftnessScheduleTypeNames = []string{
	_SoftnessScheduleTypeName[0:4],
	_SoftnessScheduleTypeName[4:10],
	_SoftnessScheduleTypeName[10:16],
	_SoftnessScheduleTypeName[16:27],
	_SoftnessScheduleTypeName[27:31],
}

// SoftnessScheduleTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SoftnessScheduleTypeString(s string) (SoftnessScheduleType, error) {
	if val, ok := _SoftnessScheduleTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _SoftnessScheduleTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SoftnessScheduleType values", s)
}

// SoftnessScheduleTypeValues returns all values of the enum
func SoftnessScheduleTypeValues() []SoftnessScheduleType {
	return _SoftnessScheduleTypeValues
}

// SoftnessScheduleTypeStrings returns a slice of all String values of the enum
func SoftnessScheduleTypeStrings() []string {
	strs := make([]string, len(_SoftnessScheduleTypeNames))
	copy(strs, _SoftnessScheduleTypeNames)
	return strs
}

// IsASoftnessScheduleType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SoftnessScheduleType) IsASoftnessScheduleType() bool {
	for _, v := range _SoftnessScheduleTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for SoftnessScheduleType
func (i SoftnessScheduleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for SoftnessScheduleType
func (i *SoftnessScheduleType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("SoftnessScheduleType should be a string, got %s", data)
	}

	var err error
	*i, err = SoftnessScheduleTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for SoftnessScheduleType
func (i SoftnessScheduleType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for SoftnessScheduleType
func (i *SoftnessScheduleType) UnmarshalText(text []byte) error {
	var err error
	*i, err = SoftnessScheduleTypeString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for SoftnessScheduleType
func (i SoftnessScheduleType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for SoftnessScheduleType
func (i *SoftnessScheduleType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = SoftnessScheduleTypeString(s)
	return err
}
