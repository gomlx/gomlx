// Code generated by "enumer -type=Type -trimprefix=Type -transform=snake -values -text -json -yaml activations.go"; DO NOT EDIT.

package activations

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _TypeName = "nonerelusigmoidleaky_reluseluswishsilutanhgelugelu_approx"

var _TypeIndex = [...]uint8{0, 4, 8, 15, 25, 29, 34, 38, 42, 46, 57}

const _TypeLowerName = "nonerelusigmoidleaky_reluseluswishsilutanhgelugelu_approx"

func (i Type) String() string {
	if i < 0 || i >= Type(len(_TypeIndex)-1) {
		return fmt.Sprintf("Type(%d)", i)
	}
	return _TypeName[_TypeIndex[i]:_TypeIndex[i+1]]
}

func (Type) Values() []string {
	return TypeStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _TypeNoOp() {
	var x [1]struct{}
	_ = x[TypeNone-(0)]
	_ = x[TypeRelu-(1)]
	_ = x[TypeSigmoid-(2)]
	_ = x[TypeLeakyRelu-(3)]
	_ = x[TypeSelu-(4)]
	_ = x[TypeSwish-(5)]
	_ = x[TypeSilu-(6)]
	_ = x[TypeTanh-(7)]
	_ = x[TypeGelu-(8)]
	_ = x[TypeGeluApprox-(9)]
}

var _TypeValues = []Type{TypeNone, TypeRelu, TypeSigmoid, TypeLeakyRelu, TypeSelu, TypeSwish, TypeSilu, TypeTanh, TypeGelu, TypeGeluApprox}

var _TypeNameToValueMap = map[string]Type{
	_TypeName[0:4]:        TypeNone,
	_TypeLowerName[0:4]:   TypeNone,
	_TypeName[4:8]:        TypeRelu,
	_TypeLowerName[4:8]:   TypeRelu,
	_TypeName[8:15]:       TypeSigmoid,
	_TypeLowerName[8:15]:  TypeSigmoid,
	_TypeName[15:25]:      TypeLeakyRelu,
	_TypeLowerName[15:25]: TypeLeakyRelu,
	_TypeName[25:29]:      TypeSelu,
	_TypeLowerName[25:29]: TypeSelu,
	_TypeName[29:34]:      TypeSwish,
	_TypeLowerName[29:34]: TypeSwish,
	_TypeName[34:38]:      TypeSilu,
	_TypeLowerName[34:38]: TypeSilu,
	_TypeName[38:42]:      TypeTanh,
	_TypeLowerName[38:42]: TypeTanh,
	_TypeName[42:46]:      TypeGelu,
	_TypeLowerName[42:46]: TypeGelu,
	_TypeName[46:57]:      TypeGeluApprox,
	_TypeLowerName[46:57]: TypeGeluApprox,
}

var _TypeNames = []string{
	_TypeName[0:4],
	_TypeName[4:8],
	_TypeName[8:15],
	_TypeName[15:25],
	_TypeName[25:29],
	_TypeName[29:34],
	_TypeName[34:38],
	_TypeName[38:42],
	_TypeName[42:46],
	_TypeName[46:57],
}

// TypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TypeString(s string) (Type, error) {
	if val, ok := _TypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _TypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Type values", s)
}

// TypeValues returns all values of the enum
func TypeValues() []Type {
	return _TypeValues
}

// TypeStrings returns a slice of all String values of the enum
func TypeStrings() []string {
	strs := make([]string, len(_TypeNames))
	copy(strs, _TypeNames)
	return strs
}

// IsAType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Type) IsAType() bool {
	for _, v := range _TypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Type
func (i Type) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Type
func (i *Type) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Type should be a string, got %s", data)
	}

	var err error
	*i, err = TypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for Type
func (i Type) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Type
func (i *Type) UnmarshalText(text []byte) error {
	var err error
	*i, err = TypeString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for Type
func (i Type) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for Type
func (i *Type) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = TypeString(s)
	return err
}
