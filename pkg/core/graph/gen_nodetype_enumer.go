// Code generated by "enumer -type=NodeType -trimprefix=NodeType -yaml -json -text -values -output=/home/janpf/Projects/gomlx/pkg/core/graph/gen_nodetype_enumer.go /home/janpf/Projects/gomlx/pkg/core/graph/gen_backend_ops.go"; DO NOT EDIT.

package graph

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _NodeTypeName = "InvalidSplitNodeAbsAddArgMinMaxBatchNormForInferenceBatchNormForTrainingBatchNormGradientBitCountBitcastBitwiseAndBitwiseNotBitwiseOrBitwiseXorBroadcastInDimCeilClampClzComplexConcatenateConjConstantConvGeneralConvertDTypeCosDivDotDotGeneralDynamicSliceDynamicUpdateSliceEqualEqualTotalOrderErfExpExpm1FFTFloorGatherGreaterOrEqualGreaterOrEqualTotalOrderGreaterThanGreaterThanTotalOrderIdentityImagIotaIsFiniteIsNaNLessOrEqualLessOrEqualTotalOrderLessThanLessThanTotalOrderLogLog1pLogicalAndLogicalNotLogicalOrLogicalXorLogisticMaxMinMulNegNotEqualNotEqualTotalOrderPadParameterPowRealReduceBitwiseAndReduceBitwiseOrReduceBitwiseXorReduceLogicalAndReduceLogicalOrReduceLogicalXorReduceMaxReduceMinReduceProductReduceSumReduceWindowRemReshapeReverseRngBitGeneratorRoundRsqrtScatterMaxScatterMinScatterSumSelectAndScatterMaxSelectAndScatterMinShiftLeftShiftRightArithmeticShiftRightLogicalSignSinSliceSqrtSubTanhTransposeWhere"

var _NodeTypeIndex = [...]uint16{0, 7, 16, 19, 22, 31, 52, 72, 89, 97, 104, 114, 124, 133, 143, 157, 161, 166, 169, 176, 187, 191, 199, 210, 222, 225, 228, 231, 241, 253, 271, 276, 291, 294, 297, 302, 305, 310, 316, 330, 354, 365, 386, 394, 398, 402, 410, 415, 426, 447, 455, 473, 476, 481, 491, 501, 510, 520, 528, 531, 534, 537, 540, 548, 566, 569, 578, 581, 585, 601, 616, 632, 648, 663, 679, 688, 697, 710, 719, 731, 734, 741, 748, 763, 768, 773, 783, 793, 803, 822, 841, 850, 870, 887, 891, 894, 899, 903, 906, 910, 919, 924}

const _NodeTypeLowerName = "invalidsplitnodeabsaddargminmaxbatchnormforinferencebatchnormfortrainingbatchnormgradientbitcountbitcastbitwiseandbitwisenotbitwiseorbitwisexorbroadcastindimceilclampclzcomplexconcatenateconjconstantconvgeneralconvertdtypecosdivdotdotgeneraldynamicslicedynamicupdatesliceequalequaltotalordererfexpexpm1fftfloorgathergreaterorequalgreaterorequaltotalordergreaterthangreaterthantotalorderidentityimagiotaisfiniteisnanlessorequallessorequaltotalorderlessthanlessthantotalorderloglog1plogicalandlogicalnotlogicalorlogicalxorlogisticmaxminmulnegnotequalnotequaltotalorderpadparameterpowrealreducebitwiseandreducebitwiseorreducebitwisexorreducelogicalandreducelogicalorreducelogicalxorreducemaxreduceminreduceproductreducesumreducewindowremreshapereverserngbitgeneratorroundrsqrtscattermaxscatterminscattersumselectandscattermaxselectandscatterminshiftleftshiftrightarithmeticshiftrightlogicalsignsinslicesqrtsubtanhtransposewhere"

func (i NodeType) String() string {
	if i < 0 || i >= NodeType(len(_NodeTypeIndex)-1) {
		return fmt.Sprintf("NodeType(%d)", i)
	}
	return _NodeTypeName[_NodeTypeIndex[i]:_NodeTypeIndex[i+1]]
}

func (NodeType) Values() []string {
	return NodeTypeStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _NodeTypeNoOp() {
	var x [1]struct{}
	_ = x[NodeTypeInvalid-(0)]
	_ = x[NodeTypeSplitNode-(1)]
	_ = x[NodeTypeAbs-(2)]
	_ = x[NodeTypeAdd-(3)]
	_ = x[NodeTypeArgMinMax-(4)]
	_ = x[NodeTypeBatchNormForInference-(5)]
	_ = x[NodeTypeBatchNormForTraining-(6)]
	_ = x[NodeTypeBatchNormGradient-(7)]
	_ = x[NodeTypeBitCount-(8)]
	_ = x[NodeTypeBitcast-(9)]
	_ = x[NodeTypeBitwiseAnd-(10)]
	_ = x[NodeTypeBitwiseNot-(11)]
	_ = x[NodeTypeBitwiseOr-(12)]
	_ = x[NodeTypeBitwiseXor-(13)]
	_ = x[NodeTypeBroadcastInDim-(14)]
	_ = x[NodeTypeCeil-(15)]
	_ = x[NodeTypeClamp-(16)]
	_ = x[NodeTypeClz-(17)]
	_ = x[NodeTypeComplex-(18)]
	_ = x[NodeTypeConcatenate-(19)]
	_ = x[NodeTypeConj-(20)]
	_ = x[NodeTypeConstant-(21)]
	_ = x[NodeTypeConvGeneral-(22)]
	_ = x[NodeTypeConvertDType-(23)]
	_ = x[NodeTypeCos-(24)]
	_ = x[NodeTypeDiv-(25)]
	_ = x[NodeTypeDot-(26)]
	_ = x[NodeTypeDotGeneral-(27)]
	_ = x[NodeTypeDynamicSlice-(28)]
	_ = x[NodeTypeDynamicUpdateSlice-(29)]
	_ = x[NodeTypeEqual-(30)]
	_ = x[NodeTypeEqualTotalOrder-(31)]
	_ = x[NodeTypeErf-(32)]
	_ = x[NodeTypeExp-(33)]
	_ = x[NodeTypeExpm1-(34)]
	_ = x[NodeTypeFFT-(35)]
	_ = x[NodeTypeFloor-(36)]
	_ = x[NodeTypeGather-(37)]
	_ = x[NodeTypeGreaterOrEqual-(38)]
	_ = x[NodeTypeGreaterOrEqualTotalOrder-(39)]
	_ = x[NodeTypeGreaterThan-(40)]
	_ = x[NodeTypeGreaterThanTotalOrder-(41)]
	_ = x[NodeTypeIdentity-(42)]
	_ = x[NodeTypeImag-(43)]
	_ = x[NodeTypeIota-(44)]
	_ = x[NodeTypeIsFinite-(45)]
	_ = x[NodeTypeIsNaN-(46)]
	_ = x[NodeTypeLessOrEqual-(47)]
	_ = x[NodeTypeLessOrEqualTotalOrder-(48)]
	_ = x[NodeTypeLessThan-(49)]
	_ = x[NodeTypeLessThanTotalOrder-(50)]
	_ = x[NodeTypeLog-(51)]
	_ = x[NodeTypeLog1p-(52)]
	_ = x[NodeTypeLogicalAnd-(53)]
	_ = x[NodeTypeLogicalNot-(54)]
	_ = x[NodeTypeLogicalOr-(55)]
	_ = x[NodeTypeLogicalXor-(56)]
	_ = x[NodeTypeLogistic-(57)]
	_ = x[NodeTypeMax-(58)]
	_ = x[NodeTypeMin-(59)]
	_ = x[NodeTypeMul-(60)]
	_ = x[NodeTypeNeg-(61)]
	_ = x[NodeTypeNotEqual-(62)]
	_ = x[NodeTypeNotEqualTotalOrder-(63)]
	_ = x[NodeTypePad-(64)]
	_ = x[NodeTypeParameter-(65)]
	_ = x[NodeTypePow-(66)]
	_ = x[NodeTypeReal-(67)]
	_ = x[NodeTypeReduceBitwiseAnd-(68)]
	_ = x[NodeTypeReduceBitwiseOr-(69)]
	_ = x[NodeTypeReduceBitwiseXor-(70)]
	_ = x[NodeTypeReduceLogicalAnd-(71)]
	_ = x[NodeTypeReduceLogicalOr-(72)]
	_ = x[NodeTypeReduceLogicalXor-(73)]
	_ = x[NodeTypeReduceMax-(74)]
	_ = x[NodeTypeReduceMin-(75)]
	_ = x[NodeTypeReduceProduct-(76)]
	_ = x[NodeTypeReduceSum-(77)]
	_ = x[NodeTypeReduceWindow-(78)]
	_ = x[NodeTypeRem-(79)]
	_ = x[NodeTypeReshape-(80)]
	_ = x[NodeTypeReverse-(81)]
	_ = x[NodeTypeRngBitGenerator-(82)]
	_ = x[NodeTypeRound-(83)]
	_ = x[NodeTypeRsqrt-(84)]
	_ = x[NodeTypeScatterMax-(85)]
	_ = x[NodeTypeScatterMin-(86)]
	_ = x[NodeTypeScatterSum-(87)]
	_ = x[NodeTypeSelectAndScatterMax-(88)]
	_ = x[NodeTypeSelectAndScatterMin-(89)]
	_ = x[NodeTypeShiftLeft-(90)]
	_ = x[NodeTypeShiftRightArithmetic-(91)]
	_ = x[NodeTypeShiftRightLogical-(92)]
	_ = x[NodeTypeSign-(93)]
	_ = x[NodeTypeSin-(94)]
	_ = x[NodeTypeSlice-(95)]
	_ = x[NodeTypeSqrt-(96)]
	_ = x[NodeTypeSub-(97)]
	_ = x[NodeTypeTanh-(98)]
	_ = x[NodeTypeTranspose-(99)]
	_ = x[NodeTypeWhere-(100)]
}

var _NodeTypeValues = []NodeType{NodeTypeInvalid, NodeTypeSplitNode, NodeTypeAbs, NodeTypeAdd, NodeTypeArgMinMax, NodeTypeBatchNormForInference, NodeTypeBatchNormForTraining, NodeTypeBatchNormGradient, NodeTypeBitCount, NodeTypeBitcast, NodeTypeBitwiseAnd, NodeTypeBitwiseNot, NodeTypeBitwiseOr, NodeTypeBitwiseXor, NodeTypeBroadcastInDim, NodeTypeCeil, NodeTypeClamp, NodeTypeClz, NodeTypeComplex, NodeTypeConcatenate, NodeTypeConj, NodeTypeConstant, NodeTypeConvGeneral, NodeTypeConvertDType, NodeTypeCos, NodeTypeDiv, NodeTypeDot, NodeTypeDotGeneral, NodeTypeDynamicSlice, NodeTypeDynamicUpdateSlice, NodeTypeEqual, NodeTypeEqualTotalOrder, NodeTypeErf, NodeTypeExp, NodeTypeExpm1, NodeTypeFFT, NodeTypeFloor, NodeTypeGather, NodeTypeGreaterOrEqual, NodeTypeGreaterOrEqualTotalOrder, NodeTypeGreaterThan, NodeTypeGreaterThanTotalOrder, NodeTypeIdentity, NodeTypeImag, NodeTypeIota, NodeTypeIsFinite, NodeTypeIsNaN, NodeTypeLessOrEqual, NodeTypeLessOrEqualTotalOrder, NodeTypeLessThan, NodeTypeLessThanTotalOrder, NodeTypeLog, NodeTypeLog1p, NodeTypeLogicalAnd, NodeTypeLogicalNot, NodeTypeLogicalOr, NodeTypeLogicalXor, NodeTypeLogistic, NodeTypeMax, NodeTypeMin, NodeTypeMul, NodeTypeNeg, NodeTypeNotEqual, NodeTypeNotEqualTotalOrder, NodeTypePad, NodeTypeParameter, NodeTypePow, NodeTypeReal, NodeTypeReduceBitwiseAnd, NodeTypeReduceBitwiseOr, NodeTypeReduceBitwiseXor, NodeTypeReduceLogicalAnd, NodeTypeReduceLogicalOr, NodeTypeReduceLogicalXor, NodeTypeReduceMax, NodeTypeReduceMin, NodeTypeReduceProduct, NodeTypeReduceSum, NodeTypeReduceWindow, NodeTypeRem, NodeTypeReshape, NodeTypeReverse, NodeTypeRngBitGenerator, NodeTypeRound, NodeTypeRsqrt, NodeTypeScatterMax, NodeTypeScatterMin, NodeTypeScatterSum, NodeTypeSelectAndScatterMax, NodeTypeSelectAndScatterMin, NodeTypeShiftLeft, NodeTypeShiftRightArithmetic, NodeTypeShiftRightLogical, NodeTypeSign, NodeTypeSin, NodeTypeSlice, NodeTypeSqrt, NodeTypeSub, NodeTypeTanh, NodeTypeTranspose, NodeTypeWhere}

var _NodeTypeNameToValueMap = map[string]NodeType{
	_NodeTypeName[0:7]:          NodeTypeInvalid,
	_NodeTypeLowerName[0:7]:     NodeTypeInvalid,
	_NodeTypeName[7:16]:         NodeTypeSplitNode,
	_NodeTypeLowerName[7:16]:    NodeTypeSplitNode,
	_NodeTypeName[16:19]:        NodeTypeAbs,
	_NodeTypeLowerName[16:19]:   NodeTypeAbs,
	_NodeTypeName[19:22]:        NodeTypeAdd,
	_NodeTypeLowerName[19:22]:   NodeTypeAdd,
	_NodeTypeName[22:31]:        NodeTypeArgMinMax,
	_NodeTypeLowerName[22:31]:   NodeTypeArgMinMax,
	_NodeTypeName[31:52]:        NodeTypeBatchNormForInference,
	_NodeTypeLowerName[31:52]:   NodeTypeBatchNormForInference,
	_NodeTypeName[52:72]:        NodeTypeBatchNormForTraining,
	_NodeTypeLowerName[52:72]:   NodeTypeBatchNormForTraining,
	_NodeTypeName[72:89]:        NodeTypeBatchNormGradient,
	_NodeTypeLowerName[72:89]:   NodeTypeBatchNormGradient,
	_NodeTypeName[89:97]:        NodeTypeBitCount,
	_NodeTypeLowerName[89:97]:   NodeTypeBitCount,
	_NodeTypeName[97:104]:       NodeTypeBitcast,
	_NodeTypeLowerName[97:104]:  NodeTypeBitcast,
	_NodeTypeName[104:114]:      NodeTypeBitwiseAnd,
	_NodeTypeLowerName[104:114]: NodeTypeBitwiseAnd,
	_NodeTypeName[114:124]:      NodeTypeBitwiseNot,
	_NodeTypeLowerName[114:124]: NodeTypeBitwiseNot,
	_NodeTypeName[124:133]:      NodeTypeBitwiseOr,
	_NodeTypeLowerName[124:133]: NodeTypeBitwiseOr,
	_NodeTypeName[133:143]:      NodeTypeBitwiseXor,
	_NodeTypeLowerName[133:143]: NodeTypeBitwiseXor,
	_NodeTypeName[143:157]:      NodeTypeBroadcastInDim,
	_NodeTypeLowerName[143:157]: NodeTypeBroadcastInDim,
	_NodeTypeName[157:161]:      NodeTypeCeil,
	_NodeTypeLowerName[157:161]: NodeTypeCeil,
	_NodeTypeName[161:166]:      NodeTypeClamp,
	_NodeTypeLowerName[161:166]: NodeTypeClamp,
	_NodeTypeName[166:169]:      NodeTypeClz,
	_NodeTypeLowerName[166:169]: NodeTypeClz,
	_NodeTypeName[169:176]:      NodeTypeComplex,
	_NodeTypeLowerName[169:176]: NodeTypeComplex,
	_NodeTypeName[176:187]:      NodeTypeConcatenate,
	_NodeTypeLowerName[176:187]: NodeTypeConcatenate,
	_NodeTypeName[187:191]:      NodeTypeConj,
	_NodeTypeLowerName[187:191]: NodeTypeConj,
	_NodeTypeName[191:199]:      NodeTypeConstant,
	_NodeTypeLowerName[191:199]: NodeTypeConstant,
	_NodeTypeName[199:210]:      NodeTypeConvGeneral,
	_NodeTypeLowerName[199:210]: NodeTypeConvGeneral,
	_NodeTypeName[210:222]:      NodeTypeConvertDType,
	_NodeTypeLowerName[210:222]: NodeTypeConvertDType,
	_NodeTypeName[222:225]:      NodeTypeCos,
	_NodeTypeLowerName[222:225]: NodeTypeCos,
	_NodeTypeName[225:228]:      NodeTypeDiv,
	_NodeTypeLowerName[225:228]: NodeTypeDiv,
	_NodeTypeName[228:231]:      NodeTypeDot,
	_NodeTypeLowerName[228:231]: NodeTypeDot,
	_NodeTypeName[231:241]:      NodeTypeDotGeneral,
	_NodeTypeLowerName[231:241]: NodeTypeDotGeneral,
	_NodeTypeName[241:253]:      NodeTypeDynamicSlice,
	_NodeTypeLowerName[241:253]: NodeTypeDynamicSlice,
	_NodeTypeName[253:271]:      NodeTypeDynamicUpdateSlice,
	_NodeTypeLowerName[253:271]: NodeTypeDynamicUpdateSlice,
	_NodeTypeName[271:276]:      NodeTypeEqual,
	_NodeTypeLowerName[271:276]: NodeTypeEqual,
	_NodeTypeName[276:291]:      NodeTypeEqualTotalOrder,
	_NodeTypeLowerName[276:291]: NodeTypeEqualTotalOrder,
	_NodeTypeName[291:294]:      NodeTypeErf,
	_NodeTypeLowerName[291:294]: NodeTypeErf,
	_NodeTypeName[294:297]:      NodeTypeExp,
	_NodeTypeLowerName[294:297]: NodeTypeExp,
	_NodeTypeName[297:302]:      NodeTypeExpm1,
	_NodeTypeLowerName[297:302]: NodeTypeExpm1,
	_NodeTypeName[302:305]:      NodeTypeFFT,
	_NodeTypeLowerName[302:305]: NodeTypeFFT,
	_NodeTypeName[305:310]:      NodeTypeFloor,
	_NodeTypeLowerName[305:310]: NodeTypeFloor,
	_NodeTypeName[310:316]:      NodeTypeGather,
	_NodeTypeLowerName[310:316]: NodeTypeGather,
	_NodeTypeName[316:330]:      NodeTypeGreaterOrEqual,
	_NodeTypeLowerName[316:330]: NodeTypeGreaterOrEqual,
	_NodeTypeName[330:354]:      NodeTypeGreaterOrEqualTotalOrder,
	_NodeTypeLowerName[330:354]: NodeTypeGreaterOrEqualTotalOrder,
	_NodeTypeName[354:365]:      NodeTypeGreaterThan,
	_NodeTypeLowerName[354:365]: NodeTypeGreaterThan,
	_NodeTypeName[365:386]:      NodeTypeGreaterThanTotalOrder,
	_NodeTypeLowerName[365:386]: NodeTypeGreaterThanTotalOrder,
	_NodeTypeName[386:394]:      NodeTypeIdentity,
	_NodeTypeLowerName[386:394]: NodeTypeIdentity,
	_NodeTypeName[394:398]:      NodeTypeImag,
	_NodeTypeLowerName[394:398]: NodeTypeImag,
	_NodeTypeName[398:402]:      NodeTypeIota,
	_NodeTypeLowerName[398:402]: NodeTypeIota,
	_NodeTypeName[402:410]:      NodeTypeIsFinite,
	_NodeTypeLowerName[402:410]: NodeTypeIsFinite,
	_NodeTypeName[410:415]:      NodeTypeIsNaN,
	_NodeTypeLowerName[410:415]: NodeTypeIsNaN,
	_NodeTypeName[415:426]:      NodeTypeLessOrEqual,
	_NodeTypeLowerName[415:426]: NodeTypeLessOrEqual,
	_NodeTypeName[426:447]:      NodeTypeLessOrEqualTotalOrder,
	_NodeTypeLowerName[426:447]: NodeTypeLessOrEqualTotalOrder,
	_NodeTypeName[447:455]:      NodeTypeLessThan,
	_NodeTypeLowerName[447:455]: NodeTypeLessThan,
	_NodeTypeName[455:473]:      NodeTypeLessThanTotalOrder,
	_NodeTypeLowerName[455:473]: NodeTypeLessThanTotalOrder,
	_NodeTypeName[473:476]:      NodeTypeLog,
	_NodeTypeLowerName[473:476]: NodeTypeLog,
	_NodeTypeName[476:481]:      NodeTypeLog1p,
	_NodeTypeLowerName[476:481]: NodeTypeLog1p,
	_NodeTypeName[481:491]:      NodeTypeLogicalAnd,
	_NodeTypeLowerName[481:491]: NodeTypeLogicalAnd,
	_NodeTypeName[491:501]:      NodeTypeLogicalNot,
	_NodeTypeLowerName[491:501]: NodeTypeLogicalNot,
	_NodeTypeName[501:510]:      NodeTypeLogicalOr,
	_NodeTypeLowerName[501:510]: NodeTypeLogicalOr,
	_NodeTypeName[510:520]:      NodeTypeLogicalXor,
	_NodeTypeLowerName[510:520]: NodeTypeLogicalXor,
	_NodeTypeName[520:528]:      NodeTypeLogistic,
	_NodeTypeLowerName[520:528]: NodeTypeLogistic,
	_NodeTypeName[528:531]:      NodeTypeMax,
	_NodeTypeLowerName[528:531]: NodeTypeMax,
	_NodeTypeName[531:534]:      NodeTypeMin,
	_NodeTypeLowerName[531:534]: NodeTypeMin,
	_NodeTypeName[534:537]:      NodeTypeMul,
	_NodeTypeLowerName[534:537]: NodeTypeMul,
	_NodeTypeName[537:540]:      NodeTypeNeg,
	_NodeTypeLowerName[537:540]: NodeTypeNeg,
	_NodeTypeName[540:548]:      NodeTypeNotEqual,
	_NodeTypeLowerName[540:548]: NodeTypeNotEqual,
	_NodeTypeName[548:566]:      NodeTypeNotEqualTotalOrder,
	_NodeTypeLowerName[548:566]: NodeTypeNotEqualTotalOrder,
	_NodeTypeName[566:569]:      NodeTypePad,
	_NodeTypeLowerName[566:569]: NodeTypePad,
	_NodeTypeName[569:578]:      NodeTypeParameter,
	_NodeTypeLowerName[569:578]: NodeTypeParameter,
	_NodeTypeName[578:581]:      NodeTypePow,
	_NodeTypeLowerName[578:581]: NodeTypePow,
	_NodeTypeName[581:585]:      NodeTypeReal,
	_NodeTypeLowerName[581:585]: NodeTypeReal,
	_NodeTypeName[585:601]:      NodeTypeReduceBitwiseAnd,
	_NodeTypeLowerName[585:601]: NodeTypeReduceBitwiseAnd,
	_NodeTypeName[601:616]:      NodeTypeReduceBitwiseOr,
	_NodeTypeLowerName[601:616]: NodeTypeReduceBitwiseOr,
	_NodeTypeName[616:632]:      NodeTypeReduceBitwiseXor,
	_NodeTypeLowerName[616:632]: NodeTypeReduceBitwiseXor,
	_NodeTypeName[632:648]:      NodeTypeReduceLogicalAnd,
	_NodeTypeLowerName[632:648]: NodeTypeReduceLogicalAnd,
	_NodeTypeName[648:663]:      NodeTypeReduceLogicalOr,
	_NodeTypeLowerName[648:663]: NodeTypeReduceLogicalOr,
	_NodeTypeName[663:679]:      NodeTypeReduceLogicalXor,
	_NodeTypeLowerName[663:679]: NodeTypeReduceLogicalXor,
	_NodeTypeName[679:688]:      NodeTypeReduceMax,
	_NodeTypeLowerName[679:688]: NodeTypeReduceMax,
	_NodeTypeName[688:697]:      NodeTypeReduceMin,
	_NodeTypeLowerName[688:697]: NodeTypeReduceMin,
	_NodeTypeName[697:710]:      NodeTypeReduceProduct,
	_NodeTypeLowerName[697:710]: NodeTypeReduceProduct,
	_NodeTypeName[710:719]:      NodeTypeReduceSum,
	_NodeTypeLowerName[710:719]: NodeTypeReduceSum,
	_NodeTypeName[719:731]:      NodeTypeReduceWindow,
	_NodeTypeLowerName[719:731]: NodeTypeReduceWindow,
	_NodeTypeName[731:734]:      NodeTypeRem,
	_NodeTypeLowerName[731:734]: NodeTypeRem,
	_NodeTypeName[734:741]:      NodeTypeReshape,
	_NodeTypeLowerName[734:741]: NodeTypeReshape,
	_NodeTypeName[741:748]:      NodeTypeReverse,
	_NodeTypeLowerName[741:748]: NodeTypeReverse,
	_NodeTypeName[748:763]:      NodeTypeRngBitGenerator,
	_NodeTypeLowerName[748:763]: NodeTypeRngBitGenerator,
	_NodeTypeName[763:768]:      NodeTypeRound,
	_NodeTypeLowerName[763:768]: NodeTypeRound,
	_NodeTypeName[768:773]:      NodeTypeRsqrt,
	_NodeTypeLowerName[768:773]: NodeTypeRsqrt,
	_NodeTypeName[773:783]:      NodeTypeScatterMax,
	_NodeTypeLowerName[773:783]: NodeTypeScatterMax,
	_NodeTypeName[783:793]:      NodeTypeScatterMin,
	_NodeTypeLowerName[783:793]: NodeTypeScatterMin,
	_NodeTypeName[793:803]:      NodeTypeScatterSum,
	_NodeTypeLowerName[793:803]: NodeTypeScatterSum,
	_NodeTypeName[803:822]:      NodeTypeSelectAndScatterMax,
	_NodeTypeLowerName[803:822]: NodeTypeSelectAndScatterMax,
	_NodeTypeName[822:841]:      NodeTypeSelectAndScatterMin,
	_NodeTypeLowerName[822:841]: NodeTypeSelectAndScatterMin,
	_NodeTypeName[841:850]:      NodeTypeShiftLeft,
	_NodeTypeLowerName[841:850]: NodeTypeShiftLeft,
	_NodeTypeName[850:870]:      NodeTypeShiftRightArithmetic,
	_NodeTypeLowerName[850:870]: NodeTypeShiftRightArithmetic,
	_NodeTypeName[870:887]:      NodeTypeShiftRightLogical,
	_NodeTypeLowerName[870:887]: NodeTypeShiftRightLogical,
	_NodeTypeName[887:891]:      NodeTypeSign,
	_NodeTypeLowerName[887:891]: NodeTypeSign,
	_NodeTypeName[891:894]:      NodeTypeSin,
	_NodeTypeLowerName[891:894]: NodeTypeSin,
	_NodeTypeName[894:899]:      NodeTypeSlice,
	_NodeTypeLowerName[894:899]: NodeTypeSlice,
	_NodeTypeName[899:903]:      NodeTypeSqrt,
	_NodeTypeLowerName[899:903]: NodeTypeSqrt,
	_NodeTypeName[903:906]:      NodeTypeSub,
	_NodeTypeLowerName[903:906]: NodeTypeSub,
	_NodeTypeName[906:910]:      NodeTypeTanh,
	_NodeTypeLowerName[906:910]: NodeTypeTanh,
	_NodeTypeName[910:919]:      NodeTypeTranspose,
	_NodeTypeLowerName[910:919]: NodeTypeTranspose,
	_NodeTypeName[919:924]:      NodeTypeWhere,
	_NodeTypeLowerName[919:924]: NodeTypeWhere,
}

var _NodeTypeNames = []string{
	_NodeTypeName[0:7],
	_NodeTypeName[7:16],
	_NodeTypeName[16:19],
	_NodeTypeName[19:22],
	_NodeTypeName[22:31],
	_NodeTypeName[31:52],
	_NodeTypeName[52:72],
	_NodeTypeName[72:89],
	_NodeTypeName[89:97],
	_NodeTypeName[97:104],
	_NodeTypeName[104:114],
	_NodeTypeName[114:124],
	_NodeTypeName[124:133],
	_NodeTypeName[133:143],
	_NodeTypeName[143:157],
	_NodeTypeName[157:161],
	_NodeTypeName[161:166],
	_NodeTypeName[166:169],
	_NodeTypeName[169:176],
	_NodeTypeName[176:187],
	_NodeTypeName[187:191],
	_NodeTypeName[191:199],
	_NodeTypeName[199:210],
	_NodeTypeName[210:222],
	_NodeTypeName[222:225],
	_NodeTypeName[225:228],
	_NodeTypeName[228:231],
	_NodeTypeName[231:241],
	_NodeTypeName[241:253],
	_NodeTypeName[253:271],
	_NodeTypeName[271:276],
	_NodeTypeName[276:291],
	_NodeTypeName[291:294],
	_NodeTypeName[294:297],
	_NodeTypeName[297:302],
	_NodeTypeName[302:305],
	_NodeTypeName[305:310],
	_NodeTypeName[310:316],
	_NodeTypeName[316:330],
	_NodeTypeName[330:354],
	_NodeTypeName[354:365],
	_NodeTypeName[365:386],
	_NodeTypeName[386:394],
	_NodeTypeName[394:398],
	_NodeTypeName[398:402],
	_NodeTypeName[402:410],
	_NodeTypeName[410:415],
	_NodeTypeName[415:426],
	_NodeTypeName[426:447],
	_NodeTypeName[447:455],
	_NodeTypeName[455:473],
	_NodeTypeName[473:476],
	_NodeTypeName[476:481],
	_NodeTypeName[481:491],
	_NodeTypeName[491:501],
	_NodeTypeName[501:510],
	_NodeTypeName[510:520],
	_NodeTypeName[520:528],
	_NodeTypeName[528:531],
	_NodeTypeName[531:534],
	_NodeTypeName[534:537],
	_NodeTypeName[537:540],
	_NodeTypeName[540:548],
	_NodeTypeName[548:566],
	_NodeTypeName[566:569],
	_NodeTypeName[569:578],
	_NodeTypeName[578:581],
	_NodeTypeName[581:585],
	_NodeTypeName[585:601],
	_NodeTypeName[601:616],
	_NodeTypeName[616:632],
	_NodeTypeName[632:648],
	_NodeTypeName[648:663],
	_NodeTypeName[663:679],
	_NodeTypeName[679:688],
	_NodeTypeName[688:697],
	_NodeTypeName[697:710],
	_NodeTypeName[710:719],
	_NodeTypeName[719:731],
	_NodeTypeName[731:734],
	_NodeTypeName[734:741],
	_NodeTypeName[741:748],
	_NodeTypeName[748:763],
	_NodeTypeName[763:768],
	_NodeTypeName[768:773],
	_NodeTypeName[773:783],
	_NodeTypeName[783:793],
	_NodeTypeName[793:803],
	_NodeTypeName[803:822],
	_NodeTypeName[822:841],
	_NodeTypeName[841:850],
	_NodeTypeName[850:870],
	_NodeTypeName[870:887],
	_NodeTypeName[887:891],
	_NodeTypeName[891:894],
	_NodeTypeName[894:899],
	_NodeTypeName[899:903],
	_NodeTypeName[903:906],
	_NodeTypeName[906:910],
	_NodeTypeName[910:919],
	_NodeTypeName[919:924],
}

// NodeTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func NodeTypeString(s string) (NodeType, error) {
	if val, ok := _NodeTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _NodeTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to NodeType values", s)
}

// NodeTypeValues returns all values of the enum
func NodeTypeValues() []NodeType {
	return _NodeTypeValues
}

// NodeTypeStrings returns a slice of all String values of the enum
func NodeTypeStrings() []string {
	strs := make([]string, len(_NodeTypeNames))
	copy(strs, _NodeTypeNames)
	return strs
}

// IsANodeType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i NodeType) IsANodeType() bool {
	for _, v := range _NodeTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for NodeType
func (i NodeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for NodeType
func (i *NodeType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("NodeType should be a string, got %s", data)
	}

	var err error
	*i, err = NodeTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for NodeType
func (i NodeType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for NodeType
func (i *NodeType) UnmarshalText(text []byte) error {
	var err error
	*i, err = NodeTypeString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for NodeType
func (i NodeType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for NodeType
func (i *NodeType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = NodeTypeString(s)
	return err
}
